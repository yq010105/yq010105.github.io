<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>System</title>
      <link href="/2020/02/25/system/"/>
      <url>/2020/02/25/system/</url>
      
        <content type="html"><![CDATA[<p><strong>重置Windows后的软件装备过程</strong></p><a id="more"></a><h1 id="1-2-25日"><a href="#1-2-25日" class="headerlink" title="1. 2/25日"></a>1. 2/25日</h1><ul><li><p><strong>creo的重装</strong><br>重装完成后的多出来的软件<br><img src="/img/sys/creo%E5%AE%8C%E6%88%90%E5%90%8E.png" alt="creo卸载处"></p></li><li><p><strong>VB的重装</strong><br>重装后的<br><img src="/img/sys/vb%E5%AE%8C%E6%88%90%E5%90%8E.png" alt="vb卸载处"></p></li><li><p><strong>PSPR的重装</strong><br>第一次装的时候安装包出错，待会儿再重下一遍<br>吧2020的删了，下了2019的，装上了<br>顺便装了一下pr<br><img src="/img/sys/pspr%E5%AE%8C%E6%88%90%E5%90%8E.png" alt="pspr卸载处"></p></li><li><p><strong>jdk的重装</strong><br>jdk重装后eclipse终于打开了<br><img src="/img/sys/jdk%E5%AE%8C%E6%88%90%E5%90%8E.png" alt="jdk卸载处"></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_mysql</title>
      <link href="/2020/02/24/python-mysql/"/>
      <url>/2020/02/24/python-mysql/</url>
      
        <content type="html"><![CDATA[<p><strong>MySQL数据库的学习</strong><br>根据<a href="https://www.bilibili.com/video/av49181542" target="_blank" rel="noopener">b站视频</a>学习MySQL数据库</p><a id="more"></a><h1 id="0-安装完的一些基本操作"><a href="#0-安装完的一些基本操作" class="headerlink" title="0. 安装完的一些基本操作"></a>0. 安装完的一些基本操作</h1><h2 id="0-1-服务的启动与停止"><a href="#0-1-服务的启动与停止" class="headerlink" title="0.1 服务的启动与停止"></a>0.1 服务的启动与停止</h2><ul><li>管理员启动cmd</li><li>输入<code>net stop mysql</code> 关闭服务</li><li>输入<code>net start mysql</code> 启动服务</li></ul><h2 id="0-2-登录和退出"><a href="#0-2-登录和退出" class="headerlink" title="0.2 登录和退出"></a>0.2 登录和退出</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_plotly</title>
      <link href="/2020/02/22/python-plotly/"/>
      <url>/2020/02/22/python-plotly/</url>
      
        <content type="html"><![CDATA[<p><strong>数据可视化的 plotly</strong></p><blockquote><p><a href="https://blog.csdn.net/weixin_34407348/article/details/91371969" target="_blank" rel="noopener">参考教程</a></p></blockquote><a id="more"></a><h1 id="1-基本操作，初步理解代码"><a href="#1-基本操作，初步理解代码" class="headerlink" title="1. 基本操作，初步理解代码"></a>1. 基本操作，初步理解代码</h1><pre class=" language-py"><code class="language-py"># 生成一个直方图import plotly.offline as ptlyimport plotly.graph_objs as godata=[]trace1 = go.Bar(x=['first','second','third'],                y=[20,40,30]    )data.append(trace1)layout = go.Layout(font=dict(family='Courier New, monospace', size=18, color='#3D3D3D'),                   title='example'    )fig = go.Figure(data=data, layout=layout)ptly.plot(fig, filename = 'example.html')</code></pre><p>或者用 dict 表示</p><pre class=" language-py"><code class="language-py">trace1 = {'type':'bar',          'x':['first','second','third'],          'y':[20,40,30]    }</code></pre><h1 id="2-图形属性"><a href="#2-图形属性" class="headerlink" title="2. 图形属性`"></a>2. 图形属性`</h1><h2 id="2-1-柱状图"><a href="#2-1-柱状图" class="headerlink" title="2.1 柱状图"></a>2.1 柱状图</h2><pre class=" language-py"><code class="language-py">trace1 = go.Bar(x=[],                y=[],                name='thename',                width=0.5,                marker=dict(color="#c45ca2"),                opacity=1            )</code></pre><h2 id="2-2-饼图"><a href="#2-2-饼图" class="headerlink" title="2.2 饼图"></a>2.2 饼图</h2><pre class=" language-py"><code class="language-py">trace1 = go.Pie(labels=[],                values=[],                hoverinfo='label+percent',                textinfo='value',                textfont=dict(size=20),                marker=dict(colors=colors,                           line=dict(color='#000000', width=2)),                hole= .4,                name="pie name",                domain=dict(x = [0, .48]),                opacity=1            )</code></pre><h2 id="2-3-散点图，折线图"><a href="#2-3-散点图，折线图" class="headerlink" title="2.3 散点图，折线图"></a>2.3 散点图，折线图</h2><pre class=" language-py"><code class="language-py">trace1 = go.Scatter(x = [],                    y = [],                    mode = 'markers',   #mode可选'markers','lines','lines+markers'                    name = 'the name',                    marker = dict(size = 10,        #若设为变量则可用散点大小表示变量大小                                  color = 'rgba(152, 0, 0, .8)',                                  line = dict(width = 2,                                              color = 'rgb(0, 0, 0)'                                              ),                                  opacity=[]                                )            )</code></pre><h1 id="3-布局属性"><a href="#3-布局属性" class="headerlink" title="3. 布局属性"></a>3. 布局属性</h1><pre class=" language-py"><code class="language-py"># 通用layout = go.Layout(title='your title',  #大标题                   font=dict(                     family='Courier New, monospace',                     size=18,                     color='#3D3D3D'                               ),#字体                   width=1400,                   height=800,              #图形的大小                   margin=go.Margin(                                    l=100,                                    r=100,                                    b=200,                                    t=200,                                    pad=0                                    ),      #边距设置                   plot_bgcolor='#ffffff',   #绘图部分背景颜色                   paper_bgcolor='#ffffff',   #整体背景颜色                   showlegend=True,        #是否显示图例，也可放在每个trace里单独设置                   #图例相关参数设置：                   legend=dict(orientation="v",                                x=0,                                y=1,                                traceorder='normal',                                font=dict(                                        family='sans-serif',                                        size=12,                                        color='#000'                                            ),                                bgcolor='#E2E2E2',                                bordercolor='#FFFFFF',                                borderwidth=2                            ),                   #x轴相关参数设置（y轴对应yaxis）：                   xaxis=dict(title='x Axis',                              titlefont=dict(                                        family='Courier New, monospace',                                        size=18,                                        color='#7f7f7f'                                            ),                               range=[],   #x轴范围，如[0,30]                               type='-',                              #x轴类型，可选["-","linear","log","date","category"]                               domain=[0,0.45]                              #设置x轴在整个图像占的位置范围（主要在有多张图时使用，第二个图用xaxis2设置相关参数）                            )    )# 柱状图layout = go.Layout(bargap=0.3,      #0~1                   bargroupgap=0.1,  #0~1                   barmode='',                   #barmode: ["stack","group","overlay","relative"],设置多个trace的组合方式                   barnorm=''    )</code></pre><h2 id="3-1-设置坐标轴"><a href="#3-1-设置坐标轴" class="headerlink" title="3.1 设置坐标轴"></a>3.1 设置坐标轴</h2><pre class=" language-py"><code class="language-py">axis_template=dict(    showgrid=True,  #网格    zeroline=True,  #是否显示基线,即沿着(0,0)画出x轴和y轴    nticks=20,    showline=True,    title='X axis',    mirror='all',    zerolinecolor="#FF0000")layout=go.Layout(    xaxis=axis_template,    yaxis=axis_template)</code></pre><blockquote><p><a href="https://blog.csdn.net/u012897374/article/details/77857980" target="_blank" rel="noopener">原文链接</a></p></blockquote><h1 id="4-图像整体属性"><a href="#4-图像整体属性" class="headerlink" title="4. 图像整体属性"></a>4. 图像整体属性</h1><pre class=" language-py"><code class="language-py">ptly.plot(figure_or_data, show_link=True, link_text='Export to plot.ly',         validate=True, output_type='file', include_plotlyjs=True,         filename='temp-plot.html', auto_open=True, image=None,         image_filename='plot_image', image_width=800, image_height=600,         config=None)s</code></pre><h1 id="5-数据处理"><a href="#5-数据处理" class="headerlink" title="5. 数据处理"></a>5. 数据处理</h1><p><strong>包括 aggregate,filter,groupby,sort</strong></p><pre class=" language-py"><code class="language-py"># aggregatetransforms = [dict(    type = 'aggregate',    groups = [],        #用于分组的数组    aggregations = [dict(        target = 'y', func = 'sum', enabled = True),    ]  )]"""func参数可用："count","sum","avg","median","mode","rms","stddev","min","max","first","last""""# filtertransforms = [dict(    type = 'filter',    target = 'y',    operation = '>',    value = 4  )]"""operation参数可用:"=","!=","<",">=",">","<=","[]","()","[)","(]","][",")(","](",")[","{}","}{""""# groupbytransforms = [dict(    type = 'groupby',    groups = [],     #用于分组的数组    styles = [        dict(target = 'Moe', value = dict(marker = dict(color = 'blue'))),        dict(target = 'Larry', value = dict(marker = dict(color = 'red'))),        dict(target = 'Curly', value = dict(marker = dict(color = 'black')))    ]  )]# sorttransforms = [dict(    type = 'sort',    target = 'x',    order = 'ascending'   #升序ascending，降序descending  )]</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_openpyxl</title>
      <link href="/2020/02/22/python-openpyxl/"/>
      <url>/2020/02/22/python-openpyxl/</url>
      
        <content type="html"><![CDATA[<p><strong>Python openpyxl的操作方法</strong></p><blockquote><p><a href="https://www.jb51.net/article/169356.htm" target="_blank" rel="noopener">参考教程</a></p></blockquote><a id="more"></a><h1 id="1-打开文件夹"><a href="#1-打开文件夹" class="headerlink" title="1. 打开文件夹"></a>1. 打开文件夹</h1><p><strong><code>from openpyxl import Workbook</code></strong></p><h2 id="1-1-创建"><a href="#1-1-创建" class="headerlink" title="1.1 创建"></a>1.1 创建</h2><pre class=" language-py"><code class="language-py"># 实例化wb = Workbook()# 激活worksheetws = wb.active</code></pre><h2 id="1-2-储存"><a href="#1-2-储存" class="headerlink" title="1.2 储存"></a>1.2 储存</h2><p>每个文件操作完之后需要储存</p><pre class=" language-py"><code class="language-py">wb.save('文件名.xlsx')</code></pre><h2 id="1-3-打开已有"><a href="#1-3-打开已有" class="headerlink" title="1.3 打开已有"></a>1.3 打开已有</h2><pre class=" language-py"><code class="language-py">wb2 = load_workbook('文件名.xlsx')</code></pre><h1 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2. 创建表"></a>2. 创建表</h1><h1 id="2-1-创建表（sheet"><a href="#2-1-创建表（sheet" class="headerlink" title="2.1 创建表（sheet"></a>2.1 创建表（sheet</h1><pre class=" language-py"><code class="language-py"># 方式一：插入到最后(default)ws1 = wb.create_sheet("Mysheet") # 方式二：插入到最开始的位置ws2 = wb.create_sheet("Mysheet", 0)</code></pre><h2 id="2-2-选择表"><a href="#2-2-选择表" class="headerlink" title="2.2 选择表"></a>2.2 选择表</h2><pre class=" language-py"><code class="language-py"># sheet 名称可以作为 key 进行索引ws3 = wb["New Title"]ws4 = wb.get_sheet_by_name("New Title")</code></pre><h2 id="2-3-查看表名（sheet）"><a href="#2-3-查看表名（sheet）" class="headerlink" title="2.3 查看表名（sheet）"></a>2.3 查看表名（sheet）</h2><pre class=" language-py"><code class="language-py"># 显示所有表名print(wb.sheetnames)['Sheet2', 'New Title', 'Sheet1']# 遍历所有表for sheet in wb:    print(sheet.title)</code></pre><h1 id="3-单元格"><a href="#3-单元格" class="headerlink" title="3. 单元格"></a>3. 单元格</h1><h2 id="3-1-储存数据"><a href="#3-1-储存数据" class="headerlink" title="3.1 储存数据"></a>3.1 储存数据</h2><pre class=" language-py"><code class="language-py">#  方式一 数据可以直接分配到单元格中(可以输入公式)ws['A1'] = 42# 方式二：可以附加行，从第一列开始附加(从最下方空白处，最左开始)(可以输入多行)ws.append([1,2,3])# 方式三：Python 类型会被自动转换ws['A3'] = datetime.datetime.now().strftime("%Y-%m-%d")</code></pre><h2 id="3-2-访问单元格（call）"><a href="#3-2-访问单元格（call）" class="headerlink" title="3.2 访问单元格（call）"></a>3.2 访问单元格（call）</h2><h3 id="3-2-1-单单元格访问"><a href="#3-2-1-单单元格访问" class="headerlink" title="3.2.1 单单元格访问"></a>3.2.1 单单元格访问</h3><pre class=" language-py"><code class="language-py"># 方法一c = ws['A4']# 方法二：row 行；column 列d = ws.cell(row=4, column=2, value=10)# 方法三：只要访问就创建for i in range(1,101):    for j in range(1,101):        ws.cell(row=i, column=j)</code></pre><h3 id="3-2-2-多单元格访问"><a href="#3-2-2-多单元格访问" class="headerlink" title="3.2.2 多单元格访问"></a>3.2.2 多单元格访问</h3><pre class=" language-py"><code class="language-py"># 通过切片cell_range = ws['A1':'C2']# 通过行(列)colC = ws['C']col_range = ws['C:D']row10 = ws[10]row_range = ws[5:10]# 通过指定范围(行 → 行)for row in ws.iter_rows(min_row=1, max_col=3, max_row=2):    for cell in row:        print(cell)<Cell Sheet1.A1><Cell Sheet1.B1><Cell Sheet1.C1><Cell Sheet1.A2><Cell Sheet1.B2><Cell Sheet1.C2>　# 通过指定范围(列 → 列)for row in ws.iter_rows(min_row=1, max_col=3, max_row=2):    for cell in row:        print(cell)<Cell Sheet1.A1><Cell Sheet1.B1><Cell Sheet1.C1><Cell Sheet1.A2><Cell Sheet1.B2><Cell Sheet1.C2># 遍历所有 方法一ws = wb.activews['C9'] = 'hello world'tuple(ws.rows)((<Cell Sheet.A1>, <Cell Sheet.B1>, <Cell Sheet.C1>),(<Cell Sheet.A2>, <Cell Sheet.B2>, <Cell Sheet.C2>),...(<Cell Sheet.A8>, <Cell Sheet.B8>, <Cell Sheet.C8>),(<Cell Sheet.A9>, <Cell Sheet.B9>, <Cell Sheet.C9>))# 遍历所有 方法二tuple(ws.columns)((<Cell Sheet.A1>,<Cell Sheet.A2>,<Cell Sheet.A3>,...<Cell Sheet.B7>,<Cell Sheet.B8>,<Cell Sheet.B9>),(<Cell Sheet.C1>,...<Cell Sheet.C8>,<Cell Sheet.C9>))</code></pre><h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h1><h2 id="4-1-改变sheet-标签按钮颜色"><a href="#4-1-改变sheet-标签按钮颜色" class="headerlink" title="4.1 改变sheet 标签按钮颜色"></a>4.1 改变sheet 标签按钮颜色</h2><pre class=" language-py"><code class="language-py">ws.sheet_properties.tabColor = "1072BA"</code></pre><h2 id="4-2-获取最大行，最大列"><a href="#4-2-获取最大行，最大列" class="headerlink" title="4.2 获取最大行，最大列"></a>4.2 获取最大行，最大列</h2><pre class=" language-py"><code class="language-py"># 获得最大列和最大行print(sheet.max_row)print(sheet.max_column)</code></pre><h2 id="4-3-获取每一行每一列"><a href="#4-3-获取每一行每一列" class="headerlink" title="4.3 获取每一行每一列"></a>4.3 获取每一行每一列</h2><pre class=" language-py"><code class="language-py">sheet.rows为生成器, 里面是每一行的数据，每一行又由一个tuple包裹。sheet.columns类似，不过里面是每个tuple是每一列的单元格。# 因为按行，所以返回A1, B1, C1这样的顺序for row in sheet.rows:  for cell in row:    print(cell.value)# A1, A2, A3这样的顺序for column in sheet.columns:  for cell in column:    print(cell.value)</code></pre><h2 id="4-4-根据数字得到字母，根据字母得到数字"><a href="#4-4-根据数字得到字母，根据字母得到数字" class="headerlink" title="4.4 根据数字得到字母，根据字母得到数字"></a>4.4 根据数字得到字母，根据字母得到数字</h2><pre class=" language-py"><code class="language-py">from openpyxl.utils import get_column_letter, column_index_from_string# 根据列的数字返回字母print(get_column_letter(2)) # B# 根据字母返回列的数字print(column_index_from_string('D')) # 4</code></pre><h2 id="4-5-删除工作表"><a href="#4-5-删除工作表" class="headerlink" title="4.5  删除工作表"></a>4.5  删除工作表</h2><pre class=" language-py"><code class="language-py"># 方式一wb.remove(sheet)# 方式二del wb[sheet]</code></pre><h2 id="4-6-矩阵置换（行-→-列）"><a href="#4-6-矩阵置换（行-→-列）" class="headerlink" title="4.6 矩阵置换（行 → 列）"></a>4.6 矩阵置换（行 → 列）</h2><pre class=" language-py"><code class="language-py">rows = [  ['Number', 'data1', 'data2'],  [2, 40, 30],  [3, 40, 25],  [4, 50, 30],  [5, 30, 10],  [6, 25, 5],  [7, 50, 10]]list(zip(*rows))# out[('Number', 2, 3, 4, 5, 6, 7), ('data1', 40, 40, 50, 30, 25, 50), ('data2', 30, 25, 30, 10, 5, 10)]# 注意 方法会舍弃缺少数据的列(行)rows = [  ['Number', 'data1', 'data2'],  [2, 40  ], # 这里少一个数据  [3, 40, 25],  [4, 50, 30],  [5, 30, 10],  [6, 25, 5],  [7, 50, 10],]# out[('Number', 2, 3, 4, 5, 6, 7), ('data1', 40, 40, 50, 30, 25, 50)]</code></pre><h2 id="4-7-设置单元格风格"><a href="#4-7-设置单元格风格" class="headerlink" title="4.7 设置单元格风格"></a>4.7 设置单元格风格</h2><h3 id="4-7-1-需要导入的类"><a href="#4-7-1-需要导入的类" class="headerlink" title="4.7.1 需要导入的类"></a>4.7.1 需要导入的类</h3><p><code>from openpyxl.styles import Font, colors, Alignment</code></p><h3 id="4-7-2-字体"><a href="#4-7-2-字体" class="headerlink" title="4.7.2 字体"></a>4.7.2 字体</h3><pre class=" language-py"><code class="language-py">bold_itatic_24_font = Font(name='等线', size=24, italic=True, color=colors.RED, bold=True)# 代码指定了等线24号，加粗斜体，字体颜色红色。直接使用cell的font属性，将Font对象赋值给它sheet['A1'].font = bold_itatic_24_font</code></pre><h3 id="4-7-3-对齐方式"><a href="#4-7-3-对齐方式" class="headerlink" title="4.7.3 对齐方式"></a>4.7.3 对齐方式</h3><pre class=" language-py"><code class="language-py"># 设置B1中的数据垂直居中和水平居中sheet['B1'].alignment = Alignment(horizontal='center', vertical='center')</code></pre><h3 id="4-7-4-设置行高和列宽"><a href="#4-7-4-设置行高和列宽" class="headerlink" title="4.7.4 设置行高和列宽"></a>4.7.4 设置行高和列宽</h3><pre class=" language-py"><code class="language-py"># 第2行行高sheet.row_dimensions[2].height = 40# C列列宽sheet.column_dimensions['C'].width = 30</code></pre><h3 id="4-7-5-合并和拆分单元格"><a href="#4-7-5-合并和拆分单元格" class="headerlink" title="4.7.5 合并和拆分单元格"></a>4.7.5 合并和拆分单元格</h3><pre class=" language-py"><code class="language-py"># 合并单元格， 往左上角写入数据即可sheet.merge_cells('B1:G1') # 合并一行中的几个单元格sheet.merge_cells('A1:C3') # 合并一个矩形区域中的单元格</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_np</title>
      <link href="/2020/02/21/python-np/"/>
      <url>/2020/02/21/python-np/</url>
      
        <content type="html"><![CDATA[<p><strong>Python 中 numpy 的学习</strong><br>一点一点地学，可能没有逻辑，知识点分散<br><em>import numpy as np</em></p><a id="more"></a><h1 id="1-np-linspace"><a href="#1-np-linspace" class="headerlink" title="1. np.linspace()"></a>1. np.linspace()</h1><p><strong>用来创建等差数列</strong></p><pre class=" language-py"><code class="language-py">numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)start:返回样本数据开始点stop:返回样本数据结束点num:生成的样本数据量，默认为50endpoint：True则包含stop；False则不包含stopretstep：If True, return (samples, step), where step is the spacing between samples.(即如果为True则结果会给出数据间隔)dtype：输出数组类型axis：0(默认)或-1</code></pre><p>eg:</p><pre class=" language-py"><code class="language-py">>>> np.linspace(2.0, 3.0, num=5)array([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ])>>> np.linspace(2.0, 3.0, num=5, endpoint=False)array([ 2. ,  2.2,  2.4,  2.6,  2.8])>>> np.linspace(2.0, 3.0, num=5, retstep=True)(array([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)</code></pre><blockquote><p><a href="https://blog.csdn.net/Asher117/article/details/87855493" target="_blank" rel="noopener">原文链接</a></p></blockquote><h1 id="2-np-arange"><a href="#2-np-arange" class="headerlink" title="2. np.arange()"></a>2. np.arange()</h1><p><strong>函数返回一个有终点和起点的固定步长的排列，如[1,2,3,4,5]，起点是 1，终点是 5，步长为 1</strong></p><ul><li>1）一个参数时，参数值为终点，起点取默认值0，步长取默认值1</li><li>2）两个参数时，第一个参数为起点，第二个参数为终点，步长取默认值1</li><li>3）三个参数时，第一个参数为起点，第二个参数为终点，第三个参数为步长。其中步长支持小数</li></ul><pre class=" language-py"><code class="language-py">#一个参数 默认起点0，步长为1 输出：[0 1 2]a = np.arange(3)#两个参数 默认步长为1 输出[3 4 5 6 7 8]a = np.arange(3,9)#三个参数 起点为0，终点为3，步长为0.1 输出[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.   1.1  1.2  1.3  1.4 1.5  1.6  1.7  1.8  1.9  2.   2.1  2.2  2.3  2.4  2.5  2.6  2.7  2.8  2.9]a = np.arange(0, 3, 0.1)</code></pre><blockquote><p><a href="https://blog.csdn.net/qq_41550480/article/details/89390579" target="_blank" rel="noopener">原文链接</a></p></blockquote><h1 id="3-np-random"><a href="#3-np-random" class="headerlink" title="3. np.random()"></a>3. np.random()</h1><h2 id="3-1-np-random-randint"><a href="#3-1-np-random-randint" class="headerlink" title="3.1 np.random.randint"></a>3.1 np.random.randint</h2><p>low、high、size三个参数。默认high是None,如果只有low，那范围就是[0,low)。如果有high，范围就是[low,high)</p><pre class=" language-py"><code class="language-py">>>> np.random.randint(2, size=10)array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0])>>> np.random.randint(1, size=10)array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])>>> np.random.randint(5, size=(2, 4))array([[4, 0, 2, 1],       [3, 2, 2, 0]])</code></pre><blockquote><p><a href="https://blog.csdn.net/weixin_42029738/article/details/81977492" target="_blank" rel="noopener">原文链接</a></p></blockquote><h2 id="3-2-numpy-random-randn-与rand"><a href="#3-2-numpy-random-randn-与rand" class="headerlink" title="3.2 numpy.random.randn()与rand()"></a>3.2 numpy.random.randn()与rand()</h2><ul><li>numpy.random.randn(d0, d1, …, dn)是从标准正态分布中返回一个或多个样本值</li><li>numpy.random.rand(d0, d1, …, dn)的随机样本位于[0, 1)中</li></ul><pre class=" language-py"><code class="language-py">import numpy as np arr1 = np.random.randn(2,4)print(arr1)print('******************************************************************')arr2 = np.random.rand(2,4)print(arr2)'''正负数都有[[-1.03021018 0.5197033 0.52117459 -0.70102661][ 0.98268569 1.21940697 -1.095241 -0.38161758]]******************************************************************正数部分[[ 0.19947349 0.05282713 0.56704222 0.45479972][ 0.28827103 0.1643551 0.30486786 0.56386943]]'''</code></pre><h2 id="3-3-np-random-seed"><a href="#3-3-np-random-seed" class="headerlink" title="3.3 np.random.seed()"></a>3.3 np.random.seed()</h2><p><strong>seed( ) 用于指定随机数生成时所用算法开始的整数值</strong></p><ul><li>1.如果使用相同的seed( )值，则每次生成的随即数都相同</li><li>2.如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同</li><li>3.设置的seed()值仅一次有效</li></ul><p><img src="/img/np/random_seed.webp" alt="seed示例"></p><h2 id="3-4-np-random-normal-loc-scale-size"><a href="#3-4-np-random-normal-loc-scale-size" class="headerlink" title="3.4 np.random.normal([loc,scale,size])"></a>3.4 np.random.normal([loc,scale,size])</h2><p>正态(高斯)分布</p><pre class=" language-py"><code class="language-py">mu,sigma = 0,0.1s = np.random.normal(mu,sigma,10)print(s)''' [-0.14154151 -0.04927673  0.01828343  0.05323477  0.05350814 -0.14129784  0.06566983 -0.05441259 -0.01597307  0.16633013]'''</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Plt</title>
      <link href="/2020/02/21/python-plt/"/>
      <url>/2020/02/21/python-plt/</url>
      
        <content type="html"><![CDATA[<p><strong>Python plt 的学习</strong></p><blockquote><p><a href="https://blog.csdn.net/qiurisiyu2016/article/details/80187177" target="_blank" rel="noopener">参考教程</a></p></blockquote><a id="more"></a><h1 id="0-plt-打开-opencv-图像"><a href="#0-plt-打开-opencv-图像" class="headerlink" title="0. plt 打开 opencv 图像"></a>0. plt 打开 opencv 图像</h1><p><strong>BGR 用 RGB 打开</strong></p><pre class=" language-py"><code class="language-py">import numpy as npimport cv2from matplotlib import pyplot as pltimg=cv2.imread('lena.jpg',cv2.IMREAD_COLOR)#method1b,g,r=cv2.split(img)img2=cv2.merge([r,g,b])plt.imshow(img2)plt.show()#method2img3=img[:,:,::-1]plt.imshow(img3)plt.show()#method3img4=cv2.cvtColor(img, cv2.COLOR_BGR2RGB)plt.imshow(img4)plt.show()</code></pre><h1 id="1-plt-plot-x-y"><a href="#1-plt-plot-x-y" class="headerlink" title="1. plt.plot(x,y)"></a>1. plt.plot(x,y)</h1><p><code>format_string的内容</code><br><img src="/img/plt/plot1.png" alt="string内容图片"><br><img src="/img/plt/plot2.png" alt="string内容图片"><br><img src="/img/plt/plot3.png" alt="string内容图片"><br><code>**kwargs</code></p><p>**kwards：<br>color 颜色<br>linestyle 线条样式<br>marker 标记风格<br>markerfacecolor 标记颜色<br>markersize 标记大小 等等</p><pre class=" language-py"><code class="language-py"># plt.plot(x,y,format_string,**kwargs)# x轴数据，y轴数据，控制曲线格式的字符串format_string颜色字符，风格字符，和标记字符plt.plot([1,2,3,6],[4,5,8,1],'r-s')plt.show()</code></pre><p><strong>展示</strong><br><img src="/img/plt/plot4.png" alt="plot"></p><h1 id="2-plt-figure-用来画图，自定义画布大小"><a href="#2-plt-figure-用来画图，自定义画布大小" class="headerlink" title="2. plt.figure()用来画图，自定义画布大小"></a>2. plt.figure()用来画图，自定义画布大小</h1><p>定义画布大小，然后用 plot 画图</p><pre class=" language-py"><code class="language-py"># plt.figure() # 用来画图,自定义画布大小fig1 = plt.figure(num='fig111111', figsize=(10, 3), dpi=75, facecolor='#FFFFFF', edgecolor='#0000FF')# 名字,宽*高，dpi图像每英寸长度内的像素点数 一般75，plt.plot([1,2,3],[2,2,3])plt.show()plt.close()</code></pre><p><img src="/img/plt/figure1.png" alt="展示图片"></p><h1 id="3、plt-subplot-222"><a href="#3、plt-subplot-222" class="headerlink" title="3、plt.subplot(222)"></a>3、plt.subplot(222)</h1><p>将 figure 设置的画布大小分成几个部分，参数‘221’表示 2(row)x2(colu),即将画布分成 2x2，两行两列的 4 块区域，1 表示选择图形输出的区域在第一块，图形输出区域参数必须在“行 x 列”范围，此处必须在 1 和 2 之间选择——如果参数设置为 subplot(111)，则表示画布整个输出，不分割成小块区域，图形直接输出在整块画布上</p><pre class=" language-py"><code class="language-py">plt.subplot(222) plt.plot(y,xx)    #在2x2画布中第二块区域输出图形plt.show()plt.subplot(223)  #在2x2画布中第三块区域输出图形plt.plot(y,xx)plt.subplot(224)  # 在在2x2画布中第四块区域输出图形plt.plot(y,xx)# 子图plt.add_subplot(221)plt.add_subplot(222)</code></pre><h1 id="4、plt-xlim-设置-x-轴或者-y-轴刻度范围"><a href="#4、plt-xlim-设置-x-轴或者-y-轴刻度范围" class="headerlink" title="4、plt.xlim 设置 x 轴或者 y 轴刻度范围"></a>4、plt.xlim 设置 x 轴或者 y 轴刻度范围</h1><pre class=" language-py"><code class="language-py">plt.xlim(0,1000)  #  设置x轴刻度范围，从0~1000         #lim为极限，范围plt.ylim(0,20)   # 设置y轴刻度的范围，从0~20</code></pre><h1 id="5、plt-xticks-：设置-x-轴刻度的表现方式"><a href="#5、plt-xticks-：设置-x-轴刻度的表现方式" class="headerlink" title="5、plt.xticks()：设置 x 轴刻度的表现方式"></a>5、plt.xticks()：设置 x 轴刻度的表现方式</h1><pre class=" language-py"><code class="language-py">fig2 = plt.figure(num='fig222222', figsize=(6, 3), dpi=75, facecolor='#FFFFFF', edgecolor='#FF0000')plt.plot()# np.linspace 创建等差数列plt.xticks(np.linspace(0,1000,15,endpoint=True))# 设置x轴刻度plt.yticks(np.linspace(0,20,10,endpoint=True))plt.show()plt.close()</code></pre><p><strong>展示</strong><br><img src="/img/plt/xticks.png" alt="xticks代码展示"></p><h1 id="6-plt-scatter-–散点图"><a href="#6-plt-scatter-–散点图" class="headerlink" title="6. plt.scatter()–散点图"></a>6. plt.scatter()–散点图</h1><p><code>matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None,alpha=None, linewidths=None, verts=None, edgecolors=None, *, data=None, **kwargs)</code></p><ul><li>x，y：表示的是大小为(n,)的数组，也就是我们即将绘制散点图的数据点</li><li>s:是一个实数或者是一个数组大小为(n,)，这个是一个可选的参数</li><li>c:表示的是颜色，也是一个可选项。默认是蓝色’b’,表示的是标记的颜色，或者可以是一个表示颜色的字符，或者是一个长度为 n 的表示颜色的序列等等</li><li>marker:表示的是标记的样式，默认的是’o’</li><li>cmap:Colormap 实体或者是一个 colormap 的名字，cmap 仅仅当 c 是一个浮点数数组的时候才使用。如果没有申明就是 image.cmap</li><li>norm:Normalize 实体来将数据亮度转化到 0-1 之间，也是只有 c 是一个浮点数的数组的时候才使用。如果没有申明，就是默认为 colors.Normalize</li><li>vmin,vmax:实数，当 norm 存在的时候忽略。用来进行亮度数据的归一化</li><li>alpha：实数，0-1 之间</li><li>linewidths:也就是标记点的长度</li></ul><blockquote><p><a href="https://blog.csdn.net/m0_37393514/article/details/81298503" target="_blank" rel="noopener">参考教程</a></p></blockquote><h1 id="7、ax2-set-title-‘xxx’-设置标题，画图"><a href="#7、ax2-set-title-‘xxx’-设置标题，画图" class="headerlink" title="7、ax2.set_title(‘xxx’)设置标题，画图"></a>7、ax2.set_title(‘xxx’)设置标题，画图</h1><p><code>plt.xlabel()</code> <code>plt.ylabel()</code>xy 轴标签</p><pre class=" language-py"><code class="language-py">#产生[1,2,3,...,9]的序列x = np.arange(1,10)y = xfig = plt.figure()ax1 = fig.add_subplot(221)#设置标题ax1.set_title('Scatter Plot1')plt.xlabel('M')plt.ylabel('N')ax2 = fig.add_subplot(222)ax2.set_title('Scatter Plot2clf')#设置X轴标签plt.xlabel('X')           #设置X/Y轴标签是在对应的figure后进行操作才对应到该figure#设置Y轴标签plt.ylabel('Y')#画散点图ax1.scatter(x,y,c = 'r',marker = 'o')          #可以看出画散点图是在对figure进行操作ax2.scatter(x,y,c = 'b',marker = 'x')#设置图标plt.legend('show picture x1 ')#显示所画的图plt.show()</code></pre><p><strong>展示</strong><br><img src="/img/plt/title1.png" alt="title展示"></p><h1 id="8-plt-hist（）绘制直方图"><a href="#8-plt-hist（）绘制直方图" class="headerlink" title="8. plt.hist（）绘制直方图"></a>8. plt.hist（）绘制直方图</h1><p><em>可以将高斯函数这些画出来</em></p><p><code>n, bins, patches = plt.hist(arr, bins=10, normed=0, facecolor='black', edgecolor='black',alpha=1，histtype='bar')</code><br>hist 的参数非常多，但常用的就这六个，只有第一个是必须的，后面四个可选</p><ul><li>arr: 需要计算直方图的一维数组</li><li>bins: 直方图的柱数，可选项，默认为 10</li><li>normed: 是否将得到的直方图向量归一化。默认为 0</li><li>facecolor: 直方图颜色</li><li>edgecolor: 直方图边框颜色</li><li>alpha: 透明度</li><li>histtype: 直方图类型，‘bar’, ‘barstacked’, ‘step’, ‘stepfilled’<br>返回值 ：<br>n: 直方图向量，是否归一化由参数 normed 设定<br>bins: 返回各个 bin 的区间范围<br>patches: 返回每个 bin 里面包含的数据，是一个 list</li></ul><pre><code>mu, sigma = 0, .1s = np.random.normal(loc=mu, scale=sigma, size=1000)a,b,c = plt.hist(s, bins=3)print("a: ",a)print("b: ",b)print("c: ",c)plt.show()结果：a:  [ 85. 720. 195.]         #每个柱子的值b:  [-0.36109509 -0.1357318   0.08963149  0.31499478]   #每个柱的区间范围c:  &lt;a list of 3 Patch objects&gt;       #总共多少柱子</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_math</title>
      <link href="/2020/02/20/python-math/"/>
      <url>/2020/02/20/python-math/</url>
      
        <content type="html"><![CDATA[<p><strong>python中的math库</strong><br>非常的有意思hhh<br>暂时先写一部分；没什么时间深入研究，等过段时间再说</p><a id="more"></a><h1 id="1-角度相关函数"><a href="#1-角度相关函数" class="headerlink" title="1. 角度相关函数"></a>1. 角度相关函数</h1><h2 id="1-1-角弧度转换"><a href="#1-1-角弧度转换" class="headerlink" title="1.1 角弧度转换"></a>1.1 角弧度转换</h2><pre class=" language-py"><code class="language-py">import mathmath.degrees(math.pi/2)# 90.0math.radians(90)# 1.5707963267948966</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_mengya_process</title>
      <link href="/2020/02/19/python-mengya/"/>
      <url>/2020/02/19/python-mengya/</url>
      
        <content type="html"><![CDATA[<h1 id="1-测试"><a href="#1-测试" class="headerlink" title="1. 测试"></a>1. 测试</h1><h2 id="1-1-视频经过梯度处理"><a href="#1-1-视频经过梯度处理" class="headerlink" title="1.1 视频经过梯度处理"></a>1.1 视频经过梯度处理</h2><pre class=" language-py"><code class="language-py">import cv2vc = cv2.VideoCapture('./video/1.mp4')if vc.isOpened():    open, frame = vc.read()else:    open = Falsewhile open:    ret, frame = vc.read()    if frame is None:        break    if ret == True:        gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)        # sobelx = cv2.Sobel(gray,cv2.CV_64F,1,0)        # sobely = cv2.Sobel(gray,cv2.CV_64F,0,1)        # sobelx = cv2.convertScaleAbs(sobelx)        # sobely = cv2.convertScaleAbs(sobely)        # sobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)        v1 = cv2.Canny(gray,10,50)        cv2.namedWindow('result',0)        # cv2.imshow('result',sobelxy)        cv2.imshow('result',v1)        if cv2.waitKey(10) & 0xFF == 27:            breakvc.release()cv2.destroyAllWindows()</code></pre><h2 id="1-2-检测指针，绘制直线"><a href="#1-2-检测指针，绘制直线" class="headerlink" title="1.2 检测指针，绘制直线"></a>1.2 检测指针，绘制直线</h2><pre class=" language-py"><code class="language-py">import cv2import numpy as npimport osimg = cv2.imread('./img/clock2.jpg')    # + input('请输入文件路径：')def cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyAllWindows()def linedraw(image):    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)        # edges = cv.Canny(gray, 50, 150, apertureSize=3)        # 自动检测可能的直线，返回的是一条条线段    ret, thresohold = cv2.threshold(gray, 55, 255, cv2.THRESH_BINARY)    # aussian = cv2.GaussianBlur(thresohold, (5, 5), 1) 高斯    # kernel = np.ones((5, 5), np.uint8)  # （5，5）腐蚀大小    # erosion = cv2.erode(thresohold, kernel, iterations=1) 去噪音点    edges = cv2.Canny(thresohold, 10, 150, apertureSize=3)    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, 80, minLineLength=110, maxLineGap=10)        # print(type(lines))    for line in lines:        x1, y1, x2, y2 = line[0]        cv2.line(image, (x1, y1), (x2, y2), (0, 255,0), 2)    cv_show('result',image)linedraw(img)os.system("pause")</code></pre><h2 id="1-3-小综合；根据表盘识别指针并求出斜率"><a href="#1-3-小综合；根据表盘识别指针并求出斜率" class="headerlink" title="1.3 小综合；根据表盘识别指针并求出斜率"></a>1.3 小综合；根据表盘识别指针并求出斜率</h2><pre class=" language-py"><code class="language-py">import cv2import numpy as npimport mathimg = cv2.imread('./img/clock1.jpg', cv2.IMREAD_UNCHANGED)# 裁剪图片  具体指针要改imgbufen = img[70:566,0:1000]# 将图像的阈值化 小于阈值的为max 大于阈值的为0，# 主要是因为这个指针是黑的,圆形遮罩也是黑的，所以先把指针反转为白的# 具体指针要改imgfan = cv2.threshold(imgbufen,127,255,cv2.THRESH_BINARY_INV)[1]# 输出图像def cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyAllWindows()# 得到一个圆形遮罩，返回中间圆形def get_zhezhao(imgfan):    #获取图片尺寸    height, width = imgfan.shape[:2]    height = int(height)    width = int(width)    #生成内显示模板    circleIn = np.zeros((height, width, 1), np.uint8)    circleIn = cv2.circle(circleIn, (width // 2, height // 2), min(height, width) // 2, (1), -1)    #原图与内显示模板融合    #生成空白图片    imgIn = np.zeros((height, width, 4), np.uint8)    #复制前3个通道    imgIn[:, :, 0] = np.multiply(imgfan[:, :, 0], circleIn[:, :, 0])    imgIn[:, :, 1] = np.multiply(imgfan[:, :, 1], circleIn[:, :, 0])    imgIn[:, :, 2] = np.multiply(imgfan[:, :, 2], circleIn[:, :, 0])    #设置α通道的不透明部分    circleIn[circleIn == 1] = 1    imgIn[:, :, 3] = circleIn[:, :, 0]    # cv2.imwrite('./img/result1.jpg', imgIn)    # cv_show('imgin',imgIn)    return imgIn# 得到线，霍夫直线def getlines(imgIn):    gray = cv2.cvtColor(imgIn,cv2.COLOR_BGR2GRAY)    # cv_show("gray",gray)    edges = cv2.Canny(gray, 10, 150, apertureSize=3)    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, 80, minLineLength=110, maxLineGap=10)            # print(type(lines))    for line in lines:        x1, y1, x2, y2 = line[0]        # print(x1,y1,x2,y2)        cv2.line(imgbufen, (x1, y1), (x2, y2), (0, 255,0), 2)        # cv_show('img',imgbufen)        floatx1.append(float(x1))        floaty1.append(float(y1))        floatx2.append(float(x2))        floaty2.append(float(y2))    # cv_show('imgline',imgbufen)    return floatx1,floaty1,floatx2,floaty2def get_thr_k():    thrs = []    ks = []    for i in range(len(floatx1)):        x1 = floatx1[i]        y1 = floaty1[i]        x2 = floatx2[i]        y2 = floaty2[i]        k = (y1-y2)/(x2-x1)        thr = math.atan(k)        thr = math.degrees(thr)        i += 1        ks.append(k)        thrs.append(thr)    return ks,thrsimgIn = get_zhezhao(imgfan)floatx1,floaty1,floatx2,floaty2 = [],[],[],[]getlines(imgIn)# print(floatx1,floaty1,floatx2,floaty2)# 多条直线的角度列表，单条直线直接thrs[0]thrs = get_thr_k()print(f'直线的斜率为：{thrs[0][0]}')print(f'直线与横线间角度值：{thrs[1][0]}')cv_show('imgline',imgbufen)</code></pre><h2 id="1-4-更高级的检测指针，然后返回指针斜率"><a href="#1-4-更高级的检测指针，然后返回指针斜率" class="headerlink" title="1.4 更高级的检测指针，然后返回指针斜率"></a>1.4 更高级的检测指针，然后返回指针斜率</h2><pre class=" language-py"><code class="language-py">import cv2import mathimport linekthr as ltimport numpy as npdef get_pointer_rad(img):    '''获取角度'''    shape = img.shape    c_y, c_x, depth = int(shape[0] / 2), int(shape[1] / 2), shape[2]    # h,w,cute    x1=c_x+c_x*1.5  # 指针长度--宽 2.5倍    src = img.copy()    freq_list = []    for i in range(361):        # 算法        x = (x1 - c_x) * math.cos(i * math.pi / 180) + c_x        y = (x1 - c_x) * math.sin(i * math.pi / 180) + c_y        temp = src.copy()   # 备份        cv2.line(temp, (c_x, c_y), (int(x), int(y)), (0, 255, 0), thickness=1)  # 在temp上画线        t1 = img.copy()        t1[temp[:, :, 1] == 255] = 255        c = img[temp[:, :, 1] == 255]        points = c[c == 0]        freq_list.append((len(points), i))        cv2.imshow('d', temp)        # cv2.imshow('d1', t1)        cv2.waitKey(1)    # key = lambda x: float(x[0])    # keytup = max(freq_list, key=key)    # thrth = keytup[1]    # print(f'当前角度:{thrth}度')    # print('当前角度：',max(freq_list, key=key),'度')    cv2.destroyAllWindows()    return max(freq_list, key=lambda x: x[0])img = cv2.imread('./img/clock_re.png')imgc = img[0:165,6:171]def getthr():    thres = np.random.randint(40,100)   # 随机数范围    # print(thres)    imgfan = cv2.threshold(imgc, thres, 255, cv2.THRESH_BINARY)[1]    max = get_pointer_rad(imgfan)    # lt.cv_show('imgfan',imgfan)    # print(max)    # exit()    thrs = []    thr = max[1]    return thrdef get_averg():    tol = 0    h = 20          # 统计次数    for i in range(h):        thr = getthr()        tol = tol + thr        print(f'第{i+1}次的角度:{thr}')    averg = tol / h    return avergprint(f'角度的平均值：{get_averg()}')</code></pre><h1 id="2-初步完成核心"><a href="#2-初步完成核心" class="headerlink" title="2. 初步完成核心"></a>2. 初步完成<del>核心</del></h1><p><code>line_get.py</code></p><pre class=" language-py"><code class="language-py">import cv2import mathimport numpy as np# 获取指针角度值def get_pointer_rad(img):    shape = img.shape    c_y, c_x, depth = int(shape[0] / 2), int(shape[1] / 2), shape[2]    # h,w,cute    x1=c_x+c_x*1.5  # 指针长度--宽 2.5倍    src = img.copy()    freq_list = []    for i in range(361):        # 算法        x = (x1 - c_x) * math.cos(i * math.pi / 180) + c_x        y = (x1 - c_x) * math.sin(i * math.pi / 180) + c_y        temp = src.copy()   # 备份        cv2.line(temp, (c_x, c_y), (int(x), int(y)), (0, 255, 0), thickness=1)  # 在temp上画线        t1 = img.copy()        t1[temp[:, :, 1] == 255] = 255        c = img[temp[:, :, 1] == 255]        points = c[c == 0]        freq_list.append((len(points), i))        # 可以展示匹配过程        # cv2.imshow('d', temp)        # cv2.imshow('d1', t1)        # 如果要求固定检测时间不要太快，可以在这里调慢        cv2.waitKey(1)    cv2.destroyAllWindows()    return max(freq_list, key=lambda x: x[0])def getthr(imgc):    thres = np.random.randint(40,100)   # 随机数范围    imgfan = cv2.threshold(imgc, thres, 255, cv2.THRESH_BINARY)[1]    max = get_pointer_rad(imgfan)    thr = max[1]    return thrdef get_averg(imgc,h):    tol = 0    h = int(h)          # 统计次数    for i in range(h):        thr = getthr(imgc)        tol = tol + thr        # debug 看看角度是否正确统计        # print(f'第{i+1}次的角度:{thr}')        print(i+1,end='、')    averg = tol / h    return avergif __name__ == '__main__':    img = cv2.imread('./img/clock_re.png')    imgc = img[0:165, 6:171]    print(f'角度的平均值：{get_averg(imgc,5)}')</code></pre><p><code>xlsx_get.py</code></p><pre class=" language-py"><code class="language-py">from openpyxl import Workbookimport openpyxl as xlimport cv2import line_get as lgimport osimport timedef get_xlsx():    # 新建xlsx或打开已有xlsx    filex = 'data.xlsx'    if os.path.exists(filex):        print('--在result.xlsx中写入数据--')        wb = xl.load_workbook('data.xlsx')        # 文件表单定位        sheet = wb['Sheet']    else:        wb = Workbook()        print('--新建一个data.xlsx--')        sheet = wb['Sheet']    # 储存数据    ws = wb.active    ws['A1'] = '指针角度'    ws['B1'] = '转换角度'    ws['C1'] = '测试时间'    img = cv2.imread('./img/clock_re.png')    imgh = img[0:165,6:171]    cishu = int(input('请输入需要多少组数据--一直测则输入0--：'))    pingjun = int(input('请输入多少组算一次平均值--推荐10--:'))    row = 0    if cishu == 0 or cishu < 0:        while row >= cishu :            maxrow = sheet.max_row            # print(f'excel中第{maxrow + 1}行输入数据-----')            # 测几次来算平均值 imgh,10--10次            thr = lg.get_averg(imgh,pingjun)            ws.cell(row=maxrow+1,column=1,value=thr)            print(f'第{row + 1}组-----角度平均值数据：{thr}，输入到第{maxrow + 1}行中')            if thr>0 and thr<=45:                cdu = thr/2.25 +100            elif thr>=135 and thr <= 360:                cdu = (thr - 135)/2.25            else :                cdu = '故障'            ws.cell(row=maxrow+1,column=2,value=cdu)            timed = time.strftime("%H:%M:%S", time.localtime())  # %Y-%m-%d            ws.cell(row=maxrow+1,column=3,value=timed)            row += 1            wb.save('result.xlsx')    else:        while row < cishu :            maxrow = sheet.max_row            # print(f'excel中第{maxrow + 1}行输入数据-----')            # 测几次来算平均值 imgh,10--10次            thr = lg.get_averg(imgh,pingjun)            ws.cell(row=maxrow+1,column=1,value=thr)            print(f'第{row + 1}组-----角度平均值数据：{thr}，输入到第{maxrow + 1}行中')            if thr>0 and thr<=45:                cdu = thr/2.25 +100            elif thr>=135 and thr <= 360:                cdu = (thr - 135)/2.25            else :                cdu = '故障'            ws.cell(row=maxrow+1,column=2,value=cdu)            timed = time.strftime("%H:%M:%S", time.localtime())  # %Y-%m-%d            ws.cell(row=maxrow+1,column=3,value=timed)            row += 1            wb.save('data.xlsx')if __name__ == '__main__':    get_xlsx()</code></pre><p><code>keshihua_data.py</code><br><strong>主要运行文件</strong></p><pre class=" language-py"><code class="language-py">import plotly.offline as ptlyimport plotly.graph_objs as goimport openpyxl as xlimport xlsx_get as xgxg.get_xlsx()data=[]wb = xl.load_workbook('data.xlsx')sheet = wb['Sheet']ws = wb.activecdu = []for row in ws.iter_rows(min_row=2, min_col=2,max_col=2,max_row=sheet.max_row ):    for cell in row:        cdu.append(cell.value)timed = []for row in ws.iter_rows(min_row=2, min_col=3,max_col=3,max_row=sheet.max_row ):    for cell in row:        timed.append(cell.value)trace1 = go.Scatter(x = timed,                    y = cdu,                    mode = 'lines+markers',   #mode可选'markers','lines','lines+markers'                    name = 'data',                    marker = dict(size = 10,        #若设为变量则可用散点大小表示变量大小                                  color = 'rgba(152, 0, 0, .8)',                                  line = dict(width = 2,                                              color = 'rgb(0, 0, 0)'                                              ),                                  opacity=[]                                )            )data.append(trace1)layout = go.Layout(font=dict(family='Courier New, monospace', size=18, color='#3D3D3D'),                   title='温度值'    )fig = go.Figure(data=data, layout=layout)ptly.plot(fig, filename = 'data.html')</code></pre><h1 id="3-进一步优化，直接再存到excel同时绘制图线，达到粗略得实时"><a href="#3-进一步优化，直接再存到excel同时绘制图线，达到粗略得实时" class="headerlink" title="3. 进一步优化，直接再存到excel同时绘制图线，达到粗略得实时"></a>3. 进一步优化，直接再存到excel同时绘制图线，达到粗略得实时</h1><p><code>keshihua_data_shishi.py</code></p><ul><li>1.实时显示，但不太美观，而且不丝滑</li><li>2.界面美观，但不会实时显示</li></ul><pre class=" language-py"><code class="language-py"># import plotly.offline as ptly# import plotly.graph_objs as goimport openpyxl as xlfrom openpyxl import Workbookimport line_get as lgimport cv2import timeimport osimport matplotlib.pyplot as pltdef save_xlsx(thr,cdu,timed):    filex = 'ssdata.xlsx'    if os.path.exists(filex):        print(f'--在ssdata.xlsx中写入数据--')        wb = xl.load_workbook('ssdata.xlsx')        # 文件表单定位        sheet = wb['Sheet']    else:        wb = Workbook()        print('--新建一个ssdata.xlsx--')        sheet = wb['Sheet']    ws = wb.active    ws['A1'] = '指针角度'    ws['B1'] = '转换角度'    ws['C1'] = '测试时间'    maxrow = sheet.max_row + 1    ws.cell(row=maxrow,column=1,value=thr)    ws.cell(row=maxrow,column=2,value=cdu)    ws.cell(row=maxrow,column=3,value=timed)    wb.save('ssdata.xlsx')def get_cts():    filex = 'ssdata.xlsx'    if os.path.exists(filex):        print(f'--在ssdata.xlsx中写入数据--')        wb = xl.load_workbook('ssdata.xlsx')        # 文件表单定位        sheet = wb['Sheet']    else:        wb = Workbook()        print('--新建一个ssdata.xlsx--')        sheet = wb['Sheet']    ws = wb.active    cdu = []    for row in ws.iter_rows(min_row=2, min_col=2,max_col=2,max_row=sheet.max_row ):        for cell in row:            cdu.append(str(cell.value))    timed = []    for row in ws.iter_rows(min_row=2, min_col=3,max_col=3,max_row=sheet.max_row ):        for cell in row:            timed.append(cell.value)    return cdu,timeddef get_shishi(cishu,pingjun):    img = cv2.imread('./img/clock_re.png')    imgh = img[0:165,6:171]    row = 0    cts = get_cts()    cdus = cts[0]    timeds = cts[1]    while row >= cishu :        thr = lg.get_averg(imgh,pingjun)        if thr > 0 and thr <= 45:            cdu = thr / 2.25 + 100        elif thr >= 135 and thr <= 360:            cdu = (thr - 135) / 2.25        else:            cdu = '测试故障'        cdus.append(str(cdu))        timed = time.strftime("%H:%M:%S", time.localtime())        timeds.append(timed)        # 保存数据        save_xlsx(thr,cdu,timed)        # plt.figure(1)        plt.clf()  # 清空画布上的所有内容        fig1 = plt.figure(num='温度-时间', figsize=(20, 10), dpi=75, facecolor='#FFFFFF', edgecolor='#0000FF')        plt.xlabel('Time')        plt.ylabel('Temp')        plt.plot(timeds, cdus, 'r-s')        # plt.draw()  # 注意此函数需要调用        # time.sleep(0.01)        plt.pause(0.01)        if len(timeds) >= 22:            timeds = []            cdus = []            plt.clf()        else :            continue        # # plotly 数据可视化 美观，可是不会动态        # data = []        # namee = str(round(cdu,1)) + '°C'        # trace1 = go.Scatter(x=timeds,        #                     y=cdus,        #                     mode='lines+markers',  # mode可选'markers','lines','lines+markers'        #                     name= namee,        #                     marker=dict(size=10,  # 若设为变量则可用散点大小表示变量大小        #                                 color='rgba(152, 0, 0, .8)',        #                                 line=dict(width=2,        #                                           color='rgb(0, 0, 0)'        #                                           ),        #                                 opacity=[]        #                                 )        #                     )        # data.append(trace1)        # axis_template = dict(        #     showgrid=True,  # 网格        #     zeroline=True,  # 是否显示基线,即沿着(0,0)画出x轴和y轴        #     nticks=20,        #     showline=True,        #     title='Time',        #     mirror='all',        #     zerolinecolor="#FF0000"        # )        # ayis_template = dict(        #     showgrid=True,  # 网格        #     zeroline=True,  # 是否显示基线,即沿着(0,0)画出x轴和y轴        #     nticks=20,        #     showline=True,        #     title='Temp',        #     mirror='all',        #     zerolinecolor="#FF0000"        # )        # layout = go.Layout(font=dict(family='Courier New, monospace', size=18, color='#3D3D3D'),        #                    title='温度值' ,xaxis=axis_template,yaxis=ayis_template        #                    )        # fig = go.Figure(data=data, layout=layout)        # ptly.plot(fig, filename='ssdata.html')if __name__ == '__main__':    get_shishi(0,5)</code></pre><p><code>keshihua_shishi.py</code></p><pre class=" language-py"><code class="language-py">import keshihua_data_shishi as kdscishu = 0   # 0 - 一直测pingjun = int(input('请输入多少组算一次平均数--建议10组--:'))while True:    kds.get_shishi(cishu,pingjun)</code></pre><h1 id="4-粗糙的整合–待优化"><a href="#4-粗糙的整合–待优化" class="headerlink" title="4. 粗糙的整合–待优化"></a>4. 粗糙的整合–待优化</h1><pre class=" language-py"><code class="language-py">import mathimport numpy as npimport openpyxl as xlfrom openpyxl import Workbookimport cv2import timeimport osimport matplotlib.pyplot as pltimport plotly.offline as ptlyimport plotly.graph_objs as go# 获取指针角度值def get_pointer_rad(img):    shape = img.shape    c_y, c_x, depth = int(shape[0] / 2), int(shape[1] / 2), shape[2]    # h,w,cute    x1=c_x+c_x*1.5  # 指针长度--宽 2.5倍    src = img.copy()    freq_list = []    for i in range(361):        # 算法        x = (x1 - c_x) * math.cos(i * math.pi / 180) + c_x        y = (x1 - c_x) * math.sin(i * math.pi / 180) + c_y        temp = src.copy()   # 备份        cv2.line(temp, (c_x, c_y), (int(x), int(y)), (0, 255, 0), thickness=1)  # 在temp上画线        t1 = img.copy()        t1[temp[:, :, 1] == 255] = 255        c = img[temp[:, :, 1] == 255]        points = c[c == 0]        freq_list.append((len(points), i))        # 可以展示匹配过程        # cv2.imshow('d', temp)        # cv2.imshow('d1', t1)        # 如果要求固定检测时间不要太快，可以在这里调慢        cv2.waitKey(1)    cv2.destroyAllWindows()    return max(freq_list, key=lambda x: x[0])def getthr(imgc):    thres = np.random.randint(40,100)   # 随机数范围    imgfan = cv2.threshold(imgc, thres, 255, cv2.THRESH_BINARY)[1]    max = get_pointer_rad(imgfan)    thr = max[1]    return thrdef get_averg(imgc,h):    tol = 0    h = int(h)          # 统计次数    for i in range(h):        thr = getthr(imgc)        tol = tol + thr        # debug 看看角度是否正确统计        # print(f'第{i+1}次的角度:{thr}')        print(i+1,end='、')    averg = tol / h    return avergdef save_xlsx(thr,cdu,timed):    filex = 'ssdata.xlsx'    if os.path.exists(filex):        print(f'--在ssdata.xlsx中写入数据--')        wb = xl.load_workbook('ssdata.xlsx')        # 文件表单定位        sheet = wb['Sheet']    else:        wb = Workbook()        print('--新建一个ssdata.xlsx--')        sheet = wb['Sheet']    ws = wb.active    ws['A1'] = '指针角度'    ws['B1'] = '转换角度'    ws['C1'] = '测试时间'    maxrow = sheet.max_row + 1    ws.cell(row=maxrow,column=1,value=thr)    ws.cell(row=maxrow,column=2,value=cdu)    ws.cell(row=maxrow,column=3,value=timed)    wb.save('ssdata.xlsx')def get_cts():    filex = 'ssdata.xlsx'    if os.path.exists(filex):        print(f'--在ssdata.xlsx中写入数据--')        wb = xl.load_workbook('ssdata.xlsx')        # 文件表单定位        sheet = wb['Sheet']    else:        wb = Workbook()        print('--新建一个ssdata.xlsx--')        sheet = wb['Sheet']    ws = wb.active    cdu = []    for row in ws.iter_rows(min_row=2, min_col=2,max_col=2,max_row=sheet.max_row ):        for cell in row:            cdu.append(str(cell.value))    timed = []    for row in ws.iter_rows(min_row=2, min_col=3,max_col=3,max_row=sheet.max_row ):        for cell in row:            timed.append(cell.value)    return cdu,timeddef get_shishi(cishu,pingjun):    # img = cv2.imread('./img/clock_re.png')    imgh = cv2.imread('frame.jpg')    # imgh = img[0:165,6:171]    # 读取excle中数据    cts = get_cts()    cdus = cts[0]    timeds = cts[1]    row = True    while row:        thr = get_averg(imgh,pingjun)        if thr > 0 and thr <= 45:            cdu = thr / 2.25 + 100        elif thr >= 135 and thr <= 360:            cdu = (thr - 135) / 2.25        else:            cdu = '测试故障'        cdus.append(str(cdu))        timed = time.strftime("%H:%M:%S", time.localtime())        timeds.append(timed)        # 保存数据        save_xlsx(thr,cdu,timed)        # # plotly 数据可视化 美观，可是不会动态        # data = []        # cdu1 = round(cdu ,1)        # namee = str(cdu1) + '°C'        # trace1 = go.Scatter(x=timeds,        #                     y=cdus,        #                     mode='lines+markers',  # mode可选'markers','lines','lines+markers'        #                     name= namee,        #                     marker=dict(size=10,  # 若设为变量则可用散点大小表示变量大小        #                                 color='rgba(152, 0, 0, .8)',        #                                 line=dict(width=2,        #                                           color='rgb(0, 0, 0)'        #                                           ),        #                                 opacity=[]        #                                 )        #                     )        # data.append(trace1)        # axis_template = dict(        #     showgrid=True,  # 网格        #     zeroline=True,  # 是否显示基线,即沿着(0,0)画出x轴和y轴        #     nticks=20,        #     showline=True,        #     title='Time',        #     mirror='all',        #     zerolinecolor="#FF0000"        # )        # ayis_template = dict(        #     showgrid=True,  # 网格        #     zeroline=True,  # 是否显示基线,即沿着(0,0)画出x轴和y轴        #     nticks=20,        #     showline=True,        #     title='Temp',        #     mirror='all',        #     zerolinecolor="#FF0000"        # )        # layout = go.Layout(font=dict(family='Courier New, monospace', size=18, color='#3D3D3D'),        #                    title='温度值' ,xaxis=axis_template,yaxis=ayis_template        #                    )        # fig = go.Figure(data=data, layout=layout)        # ptly.plot(fig, filename='ssdata.html')        # break        # 实时数据，停不下来        # plt.figure(1)        plt.clf()  # 清空画布上的所有内容        fig1 = plt.figure(num='温度-时间', figsize=(20, 10), dpi=75, facecolor='#FFFFFF', edgecolor='#0000FF')        plt.xlabel('Time')        plt.ylabel('Temp')        plt.plot(timeds, cdus, 'r-s')        # plt.draw()  # 注意此函数需要调用        # time.sleep(0.01)        plt.pause(0.01)        if len(timeds) >= 22:            timeds = []            cdus = []            plt.clf()            row = False        else :            breakdef video_show(video,ci):    i = 1    while True:        ret1,frame = video.read()        if not ret1:            print("视频获取失败！")            break        framegray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)        template = cv2.imread('./img/moban_c.jpg')        # print(template.shape)        # exit()        theight , twidth = template.shape[0] , template.shape[1]        result = cv2.matchTemplate(frame,template,cv2.TM_SQDIFF_NORMED)        cv2.normalize(result,result,0,1,cv2.NORM_MINMAX,-1)        min_val,max_val,min_loc,max_loc = cv2.minMaxLoc(result)        # # min_loc：矩形定点        # # (min_loc[0]+twidth,min_loc[1]+theight)：矩形的宽高        # # (0,0,225)：矩形的边框颜色；2：矩形边框宽度        cv2.rectangle(frame ,min_loc ,(min_loc[0] + twidth ,min_loc[1] + theight) ,(255 ,0 ,0) ,2)        cv2.imshow("Video_show",frame)        choose_data = framegray[min_loc[0]:(min_loc[0] + twidth ),min_loc[1]: (min_loc[1] + theight)]        # choose_datafan = cv2.threshold(choose_data ,110,255 ,cv2.THRESH_BINARY_INV)[1]        cv2.imshow("choose_video",choose_data)        if i%ci == 0 :            cv2.imwrite(f'frame.jpg',choose_data)            print(f'照片已保存--frame.jpg--：')            break        i += 1        if cv2.waitKey(1) & 0xff == ord("e"):            break    video.release()    cv2.destroyAllWindows()if __name__ == '__main__' :    cishu = 0  # 0 - 一直测    # pingjun = int(input('请输入多少组算一次平均数--建议2组--:'))    pingjun = 5    ci = 100    # ci = int(input('请输入多少时间换一组照片--100大概3.638s左右--：'))    while True:        video = cv2.VideoCapture(0)        video_show(video ,ci)        get_shishi(cishu ,pingjun)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 萌芽杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次萌芽杯python技能</title>
      <link href="/2020/02/18/python-open-cv/"/>
      <url>/2020/02/18/python-open-cv/</url>
      
        <content type="html"><![CDATA[<p><del>萌芽杯比赛可能需要</del><br><strong>python 学习进程</strong></p><a id="more"></a><h1 id="0-基本知识的学习"><a href="#0-基本知识的学习" class="headerlink" title="0.基本知识的学习"></a>0.基本知识的学习</h1><h2 id="0-1-基本操作"><a href="#0-1-基本操作" class="headerlink" title="0.1 基本操作"></a>0.1 基本操作</h2><p>cv2.IMREAD_COLOR:彩色图像 RGB 三通道<br>cv2.IMREAD_GRAYSCALE：灰度图像 灰度一个通道</p><ul><li><code>img = cv2.imread('1.jpg')</code>打开图像—-type(img) = numpy.ndarry</li><li><code>img = cv2.imread('1.jpg',cv2.IMREAD_GRAYSCALE)</code>打开为灰度图像</li><li><code>cv2.imshow('image',img)</code>展示图像，窗口 image</li><li><code>cv2.waitKey(0)</code>窗口停留时间毫秒级，0 表示按任意键退出</li><li><code>cv2.destroyALLWindows()</code>销毁窗口</li><li><code>cv2.imwrite('result.jpg',img)</code>保存图像，（文件名，图片）</li></ul><p><em>可以直接定义一个函数</em></p><pre class=" language-py"><code class="language-py">def cv_show(name,img):    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyALLWindows()</code></pre><h2 id="0-1-1-画直线"><a href="#0-1-1-画直线" class="headerlink" title="0.1.1 画直线"></a>0.1.1 画直线</h2><p>像素点坐标，左为零，上为零<br>左上角为坐标原点，而坐标系是从左到右x符合，从上到下，y要取负</p><pre class=" language-py"><code class="language-py">img = np.zeros((320, 320, 3), np.uint8) #生成一个空灰度图像print(img.shape) # 输出：(320, 320, 3)def cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyAllWindows()# 图片，初始坐标，结束坐标，图线颜色，图线粗细cv2.line(img,(0,100),(100,0),(0,0,255),2)cv2.line(img,(0,200),(100,0),(0,255,0),2)cv_show('line',img)</code></pre><h2 id="0-2-基本属性-函数"><a href="#0-2-基本属性-函数" class="headerlink" title="0.2 基本属性/函数"></a>0.2 基本属性/函数</h2><p>img.shape # (414.500.3) (h,w,rgb=3)<br>img.size # h*w*rgb<br>img.dtype # uint8</p><h2 id="0-3-读取视频"><a href="#0-3-读取视频" class="headerlink" title="0.3 读取视频"></a>0.3 读取视频</h2><p>cv2.VideoCapture 捕获摄像头</p><ul><li><code>vc = cv2.VideoCapture('test.mp4')</code> 打开视频</li></ul><pre class=" language-py"><code class="language-py"># 检查是否正确打开if vc.isOpened():    open. frame = vc.read()else:    open = Falsewhile open:# 播放视频 循环每一帧while open:    ret, frame = vc.read()    if frame is None:        break    if ret == True:        gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)   #转化为灰度        cv2.namedWindow('result',0)        cv2.imshow('result',gray)        if cv2.waitKey(10) & 0xFF == 27: # 10刚刚好速度，27按esc退出            breakvc.release()cv2.destroyAllWindows()</code></pre><h2 id="0-4-感兴趣区域"><a href="#0-4-感兴趣区域" class="headerlink" title="0.4 感兴趣区域"></a>0.4 感兴趣区域</h2><p>图像截取</p><pre class=" language-py"><code class="language-py">img = cv.imread('1.jpg')cat = img[0:200,0:200]cv.show('cat',cat)</code></pre><h2 id="0-5-特殊选取-切分通道"><a href="#0-5-特殊选取-切分通道" class="headerlink" title="0.5 特殊选取,切分通道"></a>0.5 特殊选取,切分通道</h2><p>b：::0<br>g：::1<br>r：::2</p><pre class=" language-py"><code class="language-py">b,g,r = cv2.split(img)  # 切分b.shape == g.shape == r.shapeimg = cv2.merge((b,g,r))    # 合并img.shape</code></pre><h2 id="0-6-边界填充"><a href="#0-6-边界填充" class="headerlink" title="0.6 边界填充"></a>0.6 边界填充</h2><p>图像的边界</p><pre class=" language-py"><code class="language-py"># 上下左右填充大小import cv2def cv_show(name,img):    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyALLWindows()img = cv2.imread('./img/1.jpg')# 定义边界大小top_size, bottom_size, left_size,right_size = (50,50,50,50)# 复制法，复制最边缘像素replicate = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_REPLICATE)# 反射法 对感兴趣的图像中的像素在两边进行复制  ba|abc|cbreflect = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_REFLECT)# 反射法   edcb|abcdefgh|gfedcreflect2 = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_REFLECT_101)# 外包装法  cdefgh|abcdefgh|abcdefwrap = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_WRAP)# 常量法   常数值补充constant = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_CONSTANT)</code></pre><h2 id="0-7-数值计算-图像融合-大小放缩"><a href="#0-7-数值计算-图像融合-大小放缩" class="headerlink" title="0.7 数值计算\图像融合\大小放缩"></a>0.7 数值计算\图像融合\大小放缩</h2><pre class=" language-py"><code class="language-py">img1 = cv2.imread('1.jpg')img2 = cv2.imread('2.jpg')img11 = img1 + 10  # [500,500,3] 中每一块都加10img1[:5,:,0].shape 只打印前五行img11[:5,:,0](img1+img11)[:5,:,0]    如果超出，则结果取余cv2.add(img1,img11)[:5,:,0] 如果超出255，则不取余直接用255# 图像融合img1+img2 #shape不同，则加不了img1.shape  # (414,500,3)img2.shape  # (419,499,3)img2 = cv2.resize(img2,(500,414))   # 改变大小img2.shape  # (414,500,3)res = cv2.addWeighted(img1,0.4,img2,0.6,0)# res = img1*0.4+img2*0.6+0     权重# 图像大小放缩res = cv2.resize(img,(0,0),fx=0.5,fy=2)</code></pre><h2 id="0-8-图像阈值"><a href="#0-8-图像阈值" class="headerlink" title="0.8 图像阈值"></a>0.8 图像阈值</h2><pre class=" language-py"><code class="language-py">cv2.threshold():参数：    img:图像对象，必须是灰度图    thresh:阈值 0~255   eg:127    maxval：最大值  255    type:        cv2.THRESH_BINARY:     小于阈值的像素置为0，大于阈值的置为maxval            超过阈值部分取最大值maxval=255 white，否则取0 black            亮的地方白，暗的地方黑        cv2.THRESH_BINARY_INV： 小于阈值的像素置为maxval，大于阈值的置为0            亮的地方黑，暗的地方白        cv2.THRESH_TRUNC：      小于阈值的像素不变，大于阈值的置为thresh            指定一个截断值，大于阈值部分变成阈值，小于的不变        cv2.THRESH_TOZERO       小于阈值的像素置0，大于阈值的不变            大于阈值部分不变，小于的全变为0        cv2.THRESH_TOZERO_INV   小于阈值的不变，大于阈值的像素置0            大于阈值变为0   ，小于阈值的不变返回两个值    ret:阈值    img：阈值化处理后的图像cv2.adaptiveThreshold() 自适应阈值处理，图像不同部位采用不同的阈值进行处理参数：    img: 图像对象，8-bit单通道图    maxValue:最大值    adaptiveMethod: 自适应方法        cv2.ADAPTIVE_THRESH_MEAN_C     ：阈值为周围像素的平均值        cv2.ADAPTIVE_THRESH_GAUSSIAN_C : 阈值为周围像素的高斯均值（按权重）    threshType:        cv2.THRESH_BINARY:     小于阈值的像素置为0，大于阈值的置为maxValuel        cv2.THRESH_BINARY_INV:  小于阈值的像素置为maxValue，大于阈值的置为0    blocksize: 计算阈值时，自适应的窗口大小,必须为奇数 （如3：表示附近3个像素范围内的像素点，进行计算阈值）    C： 常数值，通过自适应方法计算的值，减去该常数值(mean value of the blocksize*blocksize neighborhood of (x, y) minus C)</code></pre><h2 id="0-9-图像平滑-去掉噪音点"><a href="#0-9-图像平滑-去掉噪音点" class="headerlink" title="0.9 图像平滑-去掉噪音点"></a>0.9 图像平滑-去掉噪音点</h2><pre class=" language-py"><code class="language-py">import cv2import numpy as npimg = cv2.imread('./img/1.jpg')def cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyALLWindows()# 均值滤波# 简单的平均卷积操作 # (3,3)卷积盒blur = cv2.blur(img,(3,3))  # （奇数，奇数） 中心的值根据周围数改变# 方框滤波# 与均值滤波相似   normalize 是否做归一化，true与均值一样#                                       false 会越界>255 ，所有越界值全为255box = cv2.boxFilter(img,-1,(3,3),normalize =True)# 高斯滤波# 高斯模糊---正态分布，离中心值越远，值越小aussian = cv2.GaussianBlur(img,(5,5),1)     # (5,5)的盒# 中值滤波# 中间的值median = cv2.medianBlur(img,5)# 展示所有的# 三张图片拼接在一起res = np.hstack((blur,aussian,median))resv = np.vstack((blur,aussian,median))cv_show('res',res)</code></pre><h2 id="0-10-形态学-腐蚀操作-去掉毛刺"><a href="#0-10-形态学-腐蚀操作-去掉毛刺" class="headerlink" title="0.10 形态学-腐蚀操作-去掉毛刺"></a>0.10 形态学-腐蚀操作-去掉毛刺</h2><p>边界里的盒子如果有 0 有 255，则全变为 0</p><pre class=" language-py"><code class="language-py">import numpy as np# 去毛刺，r通道kernel = np.ones((5,5),np.uint8)    # （5，5）腐蚀大小erosion = cv2.erode(img,kernel,iterations = 2)  # iterations 做几次腐蚀</code></pre><h2 id="0-11-形态学-膨胀操作"><a href="#0-11-形态学-膨胀操作" class="headerlink" title="0.11 形态学-膨胀操作"></a>0.11 形态学-膨胀操作</h2><p><em>腐蚀后图像太细，使用膨胀</em><br>边界里的盒子如果有 0 有 255，则全变为 255 白</p><pre class=" language-py"><code class="language-py">kernel = np.ones((3,3),np.uint8)dilate = cv2.dilate(erosion,kernel,iterations=1)</code></pre><h2 id="0-12-开运算与闭运算"><a href="#0-12-开运算与闭运算" class="headerlink" title="0.12 开运算与闭运算"></a>0.12 开运算与闭运算</h2><pre class=" language-py"><code class="language-py"># 开运算--先腐蚀后膨胀kernel = np.ones((5,5),np.uint8)opening = cv2.morphologyEx(img,cv2.MORPH_OPEN,KERNEL)# 闭运算--先膨胀后腐蚀kernel = np.ones((5,5),np.uint8)closing = cv2.morphologyEx(img,cv2.MORPH_CLOSE,kernel)</code></pre><h2 id="0-13-梯度运算"><a href="#0-13-梯度运算" class="headerlink" title="0.13 梯度运算"></a>0.13 梯度运算</h2><pre class=" language-py"><code class="language-py"># 梯度运算 = 膨胀-腐蚀 = 轮廓kernel = np.ones((7,7),np.uint8)gradient = cv2.morphologyEx(img,cv2.MORPH_GRADIENT,kernel)  # 轮廓</code></pre><h2 id="0-14-礼帽-黑帽"><a href="#0-14-礼帽-黑帽" class="headerlink" title="0.14 礼帽 黑帽"></a>0.14 礼帽 黑帽</h2><pre class=" language-py"><code class="language-py"># 礼帽 = 原始输入 - 开运算 = 毛刺tophat = cv2.morphologyEx(img,cv2.MORPH_TOPHAT,kernel)# 黑帽 = 闭运算 - 原始输入 = 毛刺+更胖整体 - 毛刺blackhat = cv2.morphologyEx(img,cv2.MORPH_BLACKHAT,kernel)</code></pre><h2 id="0-15-图像梯度-Sobel-算子"><a href="#0-15-图像梯度-Sobel-算子" class="headerlink" title="0.15 图像梯度-Sobel 算子"></a>0.15 图像梯度-Sobel 算子</h2><p><img src="/img/opencv/1.jpg" alt="sobel"><br>梯度：边缘位置的像素数值不同，数值差越大，梯度越大<br>边缘检测，物体分辨<br>右减左，下减上   从右到左，从下至上</p><pre class=" language-py"><code class="language-py"># dst = cv2.Sobel(img,ddepth,dx,dy,ksize)# ddepth:图像深度 -1# dx dy：水平，竖直 1 0# ksize：盒的大小sobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize = 3)# cv2.CV_64F 负数形式# 白-黑是正数，黑-白是负数，所有负数会被截断为0，所以要取绝对值sobelx = cv2.convertScaleAbs(sobelx)# 取绝对值sobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize = 3)# y方向sobely = cv2.convertScaleAbs(sobely)# x,y分别求出，再求和sobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)# 不建议直接计算，及dx，dy都为 1# 轮廓会更加的虚</code></pre><h2 id="0-16-图像梯度-Scharr-amp-amp-Laplacian-算子"><a href="#0-16-图像梯度-Scharr-amp-amp-Laplacian-算子" class="headerlink" title="0.16 图像梯度 Scharr&amp;&amp;Laplacian 算子"></a>0.16 图像梯度 Scharr&amp;&amp;Laplacian 算子</h2><p>scharr – 更敏感 – 描绘轮廓更细致<br><img src="/img/opencv/2.jpg" alt="sobel"></p><p>laplacian – 二阶导 – 更更敏感，对噪音点敏感，很少单独使用<br><img src="/img/opencv/3.png" alt="sobel"></p><pre><code>scharrx = cv2.Scharr(img,cv2.CV_64F,1,0)scharry = cv2.Scharr(img,cv2.CV_64F,0,1)scharrx = cv2.convertScaleAbs(scharrx)scharry = cv2.convertScaleAbs(scharry)scharrxy = cv2.addWeighted(scharrx,0.5,scharry,0.5,0)laplacian = cv2.Laplacian(img,cv2.CV_64F)laplacian = cv2.convertScaleAbs(laplacian)res = np.hstack((scharrxy,laplacian))</code></pre><p>三种算子区别<br><img src="/img/opencv/123%E5%8C%BA%E5%88%AB.png" alt="三种算子区别"></p><h2 id="0-17-Canny-边缘检测–综合"><a href="#0-17-Canny-边缘检测–综合" class="headerlink" title="0.17 Canny 边缘检测–综合"></a>0.17 Canny 边缘检测–综合</h2><ul><li>高斯滤波器，平滑处理，滤除噪声</li><li>计算图像中每个像素点的梯度强度和方向</li><li>应用非极大值抑制，消除小的不明显的地方<br>a 检测出目标可能性 90%，b 是 80%，则会抑制掉 b，把 b 丢掉</li><li>应用双阈值，检测来确定真实的和潜在的边缘</li><li>通过抑制孤立的弱边缘最终完成边缘检测</li></ul><p>① 高斯滤波器<br>归一化平滑处理<br>② 梯度和方向，Sobel 算子<br>③ 非极大值抑制<br>a. 线性插值法<br>b. 简便算法;八个方向分别比较<br>④ 双阈值检测<br>maxVal|minVal<br>梯度值&gt;maxVal 边界<br>minVal &lt; 梯度 &lt; maxVal 连有边界，保留，否则舍弃<br>梯度 &lt; minVal 舍弃<br>⑤ 最终结果<br>canny 函数</p><pre class=" language-py"><code class="language-py">img = cv2.imread('1.jpg',cv2.IMREAD_GRAYSCALE)v1 = cv2.Canny(img,80,150)  # minVal,maxValv2 = cv2.Canny(img,50,150)</code></pre><h2 id="0-18-图像金字塔"><a href="#0-18-图像金字塔" class="headerlink" title="0.18 图像金字塔"></a>0.18 图像金字塔</h2><p>越往上走图像越小<br>图像 800*800 变为 400*400<br>各层分别提取</p><ul><li>高斯金字塔（高斯滤波）</li></ul><ol><li>向下采样，缩小，往金字塔顶走<br>将偶数行和列去掉，1234 去掉 24，行列变为原来的一半<br>4*4 — 2*2</li><li>向上采样，放大<br>将数据高斯分布给周边新加列行<br>2*2 — 4*4</li></ol><pre class=" language-py"><code class="language-py">img = cv2.imread('1.jpg')# 向上up = cv2.pyrUp(img)# 向下down = cv2.pyrDown(img)# 先上 再下，，会变模糊down_up = cv2.pyrDown(up)</code></pre><p><img src="/img/opencv/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF.png" alt="拉普拉斯金字塔"></p><ul><li>拉普拉斯金字塔<br>原始 - 先 down 再 up = result<br>result - down up = reslt1</li></ul><pre class=" language-py"><code class="language-py">down = cv2.pyrDown(img)down_up = cv2.pyrUp(down)result = img - down_up</code></pre><h2 id="0-19-图像轮廓"><a href="#0-19-图像轮廓" class="headerlink" title="0.19 图像轮廓"></a>0.19 图像轮廓</h2><p>图像边缘–零散<br>图像轮廓–完整<br>cv2.findContours(img,mode,method)</p><ul><li>mode:轮廓检测模式<br>RETR_EXTERNAL 只检测外轮廓<br>RETR_LIST 检索所有的轮廓，将其保存到一条链表中<br>RETR_CCOMP 检索所有轮廓，并将他们组织为两层，顶层是各部分的外部边界，第二层空洞边界<br>RETR_TREE（常用）检测所有轮廓，并重构嵌套轮廓的整个层次</li><li>method:轮廓逼近方法<br>CHAIN_APPROX_NONE：以 freeman 链码方式输出轮廓，其他方法输出多边形<br>CHAIN_APPROX_SIMPLE：压缩水平，垂直，斜的部分</li></ul><pre class=" language-py"><code class="language-py">img = cv2.imread('1.jpg')gray = cv2.cvColor(img,cv2.COLOR_BGR2GRAY)# 使用二值图像---更好的边缘检测ret, thresh = cv2.threshold(gray,122,255,cv2.THRESH_BINARY)# cv2.imshow('result',thresh)binary,contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)# binary 二值图像# contours 轮廓信息# hierarchy 层级# 绘制轮廓,必须先备份draw_img = img.copy()res = cv2.drawContours(draw_img,contours,-1,(0,0,255),2)# draw_img 原图像上绘制# contours 轮廓信息# -1 所有轮廓，（几个轮廓） 0 第一个轮廓外圈，1 轮廓里圈# (0,0,255) BGR 红色的线# 2 线条宽度--不能太大，能看出轮廓内外层差异# 轮廓得到以后,具体轮廓拿出来，contours为listcnt = contours[0]# 算面积cv2.contourArea(cnt)# 周长 true 闭合cu2.arcLength(cnt,True)</code></pre><p><strong>轮廓近似</strong></p><pre class=" language-py"><code class="language-py"># 轮廓近似，将轮廓变得规则起来# 用直线近似曲线,曲线上找一点，到直线的距离最大，# d<T 可以近似     d>T,不可以直接用一条直线近似，而是分割开来，继续判断img = cv2.imread('1.jpg')gray = cv2.cvColor(img,cv2.COLOR_BGR2GRAY)ret, thresh = cv2.threshold(gray,122,255,cv2.THRESH_BINARY)binary,contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)cnt = contours[0]draw_img = img.copy()res = cv2.drawContours(draw_img,[cnt],-1,(0,0,255),2)epsilon = 0.1*cv2.arcLength(cnt,True)   # 周长百分比做阈值# 0.1百分比，越大，轮廓变化越大approx = cv2.approxPolyDP(cnt,epsilon,True)draw_img = img.copy()res = cv2.drawContours(draw_img,[approx],-1,(0,0,255),2)</code></pre><p>边界矩形(外接矩形)</p><pre class=" language-py"><code class="language-py">cnt = contours[0]# 外接矩形x,y,w,h = cv2.boundingRect(cnt)img = cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),2)# 矩形面积area = cv2.contourArea(cnt)x,y,w,h = cv2.boundingRect(cnt)rect_area = w*hextent = float(area) / rect_areaprint(f'轮廓面积与边界矩形比:{extent}')</code></pre><p>外接圆</p><pre class=" language-py"><code class="language-py">(x,y).radius = cv2.minEnclosingCircle(cnt)center = (int(x),int(y))radius = int(radius)img = cv2.circle(img,center,radius,(0,255,0),2)</code></pre><h2 id="0-20-模板匹配—-匹配对象在另一个图像哪里"><a href="#0-20-模板匹配—-匹配对象在另一个图像哪里" class="headerlink" title="0.20 模板匹配—-匹配对象在另一个图像哪里"></a>0.20 模板匹配—-匹配对象在另一个图像哪里</h2><p>从左到右，从上到下，进行匹配<br>匹配计算方法</p><ul><li>TM_SQDIFF—-平方项匹配，值越小，越相关</li><li>TM_CCORR—–计算相关性，值越大，越相关</li><li>TM_CCOEFF—-计算相关系数，值越大，越相关</li><li>TM_SQDIFF_NORMED:计算归一化平方不同，越接近0，越相关</li><li>TM_CCORR_NORMED:计算归一化相关性，越接近1，越相关</li><li>TM_CCOEFF_NORMED:计算归一化的相关系数，越接近1，越相关</li><li>最好用归一化的方法<br>返回结果<br>匹配的地方大小：<br>原图结果A*B,模板大小a*b,返回结果矩阵：(A-a+1)*(B-b+1)</li></ul><pre class=" language-py"><code class="language-py">img = cv2.imread('1.jpg',0)# (263,263)template = cv2.imread('11.jpg',0)# (110,85)h,w = template.shape[:2]res = cv2.matchTemplate(img,template,cv2.TM_SQDIFE) # (154,179)min_val,max_val,min_loc,max_loc = cv2.minMaxLoc(res)# 最小值，最大值，最小值位置，最大值位置# 该方法关注最小值位置 框左上角的点，根据res.shape画出图像# top_left & res.shape得到最好匹配结果top_left = min_locbottom_right = (top_left[0] + w,top_left[1] + h)img2 = img.copy()cv2.rectangle(img2,top_left,bottom_right,255,2)# 展示出来cv_show('res',img2)</code></pre><p>匹配多个对象</p><pre class=" language-py"><code class="language-py"># 匹配多个对象img_rgb = cv2.imread('1.jpg')img_gray = cv2.cvtColor(img_rgb,cv2.COLOR_BGR2GRAY)template = cv2.imread('11.jpg',0)h,w = template.shape[:2]res = cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED)threshold = 0.8# 取匹配程度大于0.8的坐标loc = np.where(res>= threshold)for pt in zip(*loc[::1]):   # * 表示可选参数    bottom_right = (pt[0]+w,pt[1]+h)    cv2.rectangle(img_rgb,pt,bootom_right,(0,0,255),2)cv2.imshow('img',img_rgb)cv2.waitKey(0)</code></pre><h2 id="0-21-直方图"><a href="#0-21-直方图" class="headerlink" title="0.21 直方图"></a>0.21 直方图</h2><p>图片像素的统计直方图<br>cv2.calcHist(img,channels,mask,histSize,ranges)<br>img – 图片<br>channels–通道 0 – 自动灰度图  ‘b’ ‘g’ ‘r’<br>mask–淹模图像，掩码，统计某一部分<br>    创建掩码<br>    mask = np.zeros(img,shape[:2],np.uint8)<br>    选择掩码保存部分<br>    mask[100:300,100:400] = 255 白色保存部分<br>    # masked_img = cv2.bitwise_and(img,img,mask=mask)<br>hisSize – BIN的数目，直方图范围<br>ranges – 像素值取值反围</p><p><code>hist = cv2.calcHist([img],[0],None,[256],[0,256])</code></p><pre class=" language-py"><code class="language-py">img =cv2.imread('1.jpg')hist = cv2.calcHist([img],[0],None,[256],[0,256])# 画出直方图plt.hist(img,ravel(),256):plt.show</code></pre><p>直方图均衡化</p><pre class=" language-py"><code class="language-py"># 如果统计出来的直方图 不太平均# 平均化equ = cv2.equalizeHist(img)plt.hist(equ,ravel(),256)plt.show# 结果更加的明显    # 一个部分分给其他部分，进行均衡# 分模块进行均衡化# 但有的图会出现边界</code></pre><p>自适应直方图均衡化</p><pre class=" language-py"><code class="language-py">clahe = cv2.createCLAHE(clipLimit = 2.0,tileGridSize = (8，8))res_clahe = clahe.apply(img)cv2.imshow('result',res_clahe)</code></pre><h2 id="0-22傅里叶变换"><a href="#0-22傅里叶变换" class="headerlink" title="0.22傅里叶变换"></a>0.22傅里叶变换</h2><p>现实中的事物都是运动的<br>而傅里叶的频域中一切都是静止的，现实中的东西在频域中分为高频，低频</p><ul><li>高频：变化剧烈的灰度分量，eg：边界</li><li>低频：变化缓慢的灰度变量，eg：一片大海<br><img src="/img/opencv/%E5%82%85%E9%87%8C%E5%8F%B6.png" alt="傅里叶"><br>滤波<br>低通滤波器：只保留低频，图像变得模糊<br>高通滤波器：只保留高频，图像细节增强</li></ul><p>在 频域中处理，更加方便</p><pre class=" language-py"><code class="language-py">cv2.dft()# 逆变换cv2.idft()import numpy as npimport cv2from matplotlib import pyplot as pltimg = cv2.imread('1.jpg',0)# 输入图像必须先转换成float32格式img_float32 = np.float32(img)# 得到的结果中 频率为0的部分在左上角，通常要转换到中心位置，用shift变换dft = cv2.dft(img_float32,flags = cv2.DFT_COMPLEX_OUTPUT)dft_shift = np.fft.fftshift(dft)# cv2.dft()返回结果是双通道的，通常还要转换为图像格式magnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))</code></pre><p>低通：</p><pre class=" language-py"><code class="language-py">import numpy as npimport cv2from matplotlib import pyplot as pltdef cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyAllWindows()img = cv2.imread('./img/clock1.jpg',0)# 输入图像必须先转换成float32格式img_float32 = np.float32(img)# 得到的结果中 频率为0的部分在左上角，通常要转换到中心位置，用shift变换dft = cv2.dft(img_float32,flags = cv2.DFT_COMPLEX_OUTPUT)dft_shift = np.fft.fftshift(dft)# cv2.dft()返回结果是双通道的，通常还要转换为图像格式# magnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))rows,cols = img.shapecrow,ccol = int(rows/2) , int(cols/2)# 要magn里面# 创建一个掩码  zeros 全为0 全不要mask = np.zeros((rows,cols,2),np.uint8)mask[crow-30:crow+30,ccol-30:ccol+30] = 1   # 中间为低频，低频要 fshift = dft_shift*mask# shift 回去f_ishift = np.fft.ifftshift(fshift)img_back = cv2.idft(f_ishift)img_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])plt.subplot(121), plt.imshow(img,cmap = 'gray')plt.title('input image'), plt.xticks([]),plt.yticks([])plt.subplot(122), plt.imshow(img_back, cmap = 'gray')plt.title('magnitude spectrum'), plt.xticks([]),plt.yticks([])plt.show()图像模糊</code></pre><p>高通</p><pre class=" language-py"><code class="language-py">import numpy as npimport cv2from matplotlib import pyplot as pltdef cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyAllWindows()img = cv2.imread('./img/clock1.jpg',0)# 输入图像必须先转换成float32格式img_float32 = np.float32(img)# 得到的结果中 频率为0的部分在左上角，通常要转换到中心位置，用shift变换dft = cv2.dft(img_float32,flags = cv2.DFT_COMPLEX_OUTPUT)dft_shift = np.fft.fftshift(dft)# cv2.dft()返回结果是双通道的，通常还要转换为图像格式# magnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))rows,cols = img.shapecrow,ccol = int(rows/2) , int(cols/2)# 全为1 全要mask = np.ones((rows,cols,2),np.uint8)mask[crow-30:crow+30,ccol-30:ccol+30] = 0   # 中间为0，中间不要，即低频不要fshift = dft_shift*mask# shift 回去f_ishift = np.fft.ifftshift(fshift)img_back = cv2.idft(f_ishift)img_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])# 展示plt.subplot(121), plt.imshow(img,cmap = 'gray')plt.title('input image'), plt.xticks([]),plt.yticks([])plt.subplot(122), plt.imshow(img_back, cmap = 'gray')plt.title('magnitude spectrum'), plt.xticks([]),plt.yticks([])plt.show()</code></pre><h2 id="0-23-摄像头获取视频或图片获取感兴趣部分"><a href="#0-23-摄像头获取视频或图片获取感兴趣部分" class="headerlink" title="0.23 摄像头获取视频或图片获取感兴趣部分"></a>0.23 摄像头获取视频或图片获取感兴趣部分</h2><pre class=" language-py"><code class="language-py">import cv2def video_show():    choose_video = False    while True:        ret1,frame = video.read()        if not ret1:            print("视频获取失败！")            break        cv2.imshow("Video_show",frame)        if cv2.waitKey(1) & 0xff == ord("q"):            # rects = []            # fromCenter = False            # Select multiple rectangles            # select_data = cv2.selectROI("Image", frame, rects, fromCenter)            select_data = cv2.selectROI("Video_show",frame)            choose_video = True        if choose_video :            #获取选择框内的图像            choose_data = frame[select_data[1]:select_data[1]+select_data[3],select_data[0]:select_data[0]+select_data[2]]            cv2.imshow("choose_video",choose_data)        if cv2.waitKey(1) & 0xff == ord("p"):            break    video.release()    # cv2.destroyAllWindows()    return choose_dataif __name__ == "__main__":    video = cv2.VideoCapture(0)    video_show()</code></pre><h3 id="0-23-1-选取roi区域定义"><a href="#0-23-1-选取roi区域定义" class="headerlink" title="0.23.1 选取roi区域定义"></a>0.23.1 选取roi区域定义</h3><pre class=" language-py"><code class="language-py"># 方法1：使用表示矩形区域的Rect，参数有矩形左上角坐标、矩形的长和宽# Mat imageROI;imageROI = image(Rect(500,250,logo.cols,logo.rows));# 方法2：指定感兴趣的行或列的范围（Range），Range是指从起始索引到终止索引（不包括终止索引）的一段连续序列# Mat imageROI;imageROI = image(Range(250,250+logoImage.rows),Range(200,200+logoImage.cols));</code></pre><h1 id="1-图像识别相关"><a href="#1-图像识别相关" class="headerlink" title="1. 图像识别相关"></a>1. 图像识别相关</h1><h2 id="1-1-两张图片对比"><a href="#1-1-两张图片对比" class="headerlink" title="1.1 两张图片对比"></a>1.1 两张图片对比</h2><p><strong>返回一张对比后的图片</strong></p><p>轮子安装<br><code>pip install pillow</code><br><code>pip install PIL</code></p><pre class=" language-py"><code class="language-py">from PIL import Imagefrom PIL import ImageChopsdef compare_images(path_one, path_two, diff_save_location):    """    比较图片，如果有不同则生成展示不同的图片    @参数一: path_one: 第一张图片的路径    @参数二: path_two: 第二张图片的路径    @参数三: diff_save_location: 不同图的保存路径    """    image_one = Image.open(path_one)    image_two = Image.open(path_two)    try:        diff = ImageChops.difference(image_one, image_two)        if diff.getbbox() is None:            # 图片间没有任何不同则直接退出            print("【+】We are the same!")        else:            diff.save(diff_save_location)    except ValueError as e:        text = ("表示图片大小和box对应的宽度不一致，参考API说明：Pastes another image into this image."                "The box argument is either a 2-tuple giving the upper left corner, a 4-tuple defining the left, upper, "                "right, and lower pixel coordinate, or None (same as (0, 0)). If a 4-tuple is given, the size of the pasted "                "image must match the size of the region.使用2纬的box避免上述问题")        print("【{0}】{1}".format(e, text))if __name__ == '__main__':    name1 = './对比图片/' + input('输入要对比的图片名字---带后缀格式----：')    name2 = './对比图片/' + input('第二张图片的名字：')    name = '对比结果' + input('你的对比结果后缀是什么：')    compare_images(name1, name2, name)    print('-------已完成-------')</code></pre><blockquote><p><a href="https://www.cnblogs.com/botoo/p/8416315.html" target="_blank" rel="noopener">参考教程</a></p></blockquote><h1 id="2-根据数据生成表格，图线"><a href="#2-根据数据生成表格，图线" class="headerlink" title="2. 根据数据生成表格，图线"></a>2. 根据数据生成表格，图线</h1><h1 id="2-1-python-根据数据生图线"><a href="#2-1-python-根据数据生图线" class="headerlink" title="2.1 python 根据数据生图线"></a>2.1 python 根据数据生图线</h1><h1 id="3-慢慢学-opencv"><a href="#3-慢慢学-opencv" class="headerlink" title="3. 慢慢学 opencv"></a>3. 慢慢学 opencv</h1><p><a href="https://www.cnblogs.com/silence-cho/p/10926248.html" target="_blank" rel="noopener">先行教程</a></p><h2 id="3-1-在新窗口打开图片，保存图片，基操"><a href="#3-1-在新窗口打开图片，保存图片，基操" class="headerlink" title="3.1 在新窗口打开图片，保存图片，基操"></a>3.1 在新窗口打开图片，保存图片，基操</h2><pre class=" language-py"><code class="language-py">import cv2img_path = './img/' + input('输入图像路径：--带后缀--')# 读取图片h = cv2.imread(img_path,cv2.IMREAD_GRAYSCALE)# 创建一个窗口cv2.namedWindow('printwindow')cv2.namedWindow('window',0)    # 0 自由改变窗口大小# 改变图片颜色imgviewx = cv2.cvtColor(imgviewx,cv2.COLOR_BGR2GRAY)# 显示图片，（窗口名，读入的图像）cv2.imshow('printwindow',h)# 窗口等待任意键盘按键输入，0为一直等待cv2.waitKey(0)# 保存图片cv2.imwrite('./img/result.jpg',imgviewx)# 销毁窗口cv2.destroyAllWindows()</code></pre><h2 id="3-2-图像阈值化"><a href="#3-2-图像阈值化" class="headerlink" title="3.2 图像阈值化"></a>3.2 图像阈值化</h2><p><strong>参数说明：</strong></p><pre class=" language-py"><code class="language-py">cv2.threshold():参数：    img:图像对象，必须是灰度图    thresh:阈值    maxval：最大值    type:        cv2.THRESH_BINARY:     小于阈值的像素置为0，大于阈值的置为maxval        cv2.THRESH_BINARY_INV： 小于阈值的像素置为maxval，大于阈值的置为0        cv2.THRESH_TRUNC：      小于阈值的像素不变，大于阈值的置为thresh        cv2.THRESH_TOZERO       小于阈值的像素置0，大于阈值的不变        cv2.THRESH_TOZERO_INV   小于阈值的不变，大于阈值的像素置0返回两个值    ret:阈值    img：阈值化处理后的图像cv2.adaptiveThreshold() 自适应阈值处理，图像不同部位采用不同的阈值进行处理参数：    img: 图像对象，8-bit单通道图    maxValue:最大值    adaptiveMethod: 自适应方法        cv2.ADAPTIVE_THRESH_MEAN_C     ：阈值为周围像素的平均值        cv2.ADAPTIVE_THRESH_GAUSSIAN_C : 阈值为周围像素的高斯均值（按权重）    threshType:        cv2.THRESH_BINARY:     小于阈值的像素置为0，大于阈值的置为maxValuel        cv2.THRESH_BINARY_INV:  小于阈值的像素置为maxValue，大于阈值的置为0    blocksize: 计算阈值时，自适应的窗口大小,必须为奇数 （如3：表示附近3个像素范围内的像素点，进行计算阈值）    C： 常数值，通过自适应方法计算的值，减去该常数值(mean value of the blocksize*blocksize neighborhood of (x, y) minus C)</code></pre><p><strong>例子</strong></p><pre class=" language-py"><code class="language-py">import cv2imgpath = './img/' + input('输入图像路径')imgviewx = cv2.imread(imgpath)# 将图像转化为灰度imgviewx = cv2.cvtColor(imgviewx,cv2.COLOR_BGR2GRAY)# 边界设置imgresult = cv2.copyMakeBorder(imgviewx,20,20,20,20,cv2.BORDER_DEFAULT)ret,threl = cv2.threshold(imgviewx,127,255,cv2.THRESH_BINARY)cv2.namedWindow('window2',0)cv2.imshow('window2',threl)cv2.waitKey(0)cv2.destroyALLWindows()</code></pre><h2 id="3-3-图像形状变化"><a href="#3-3-图像形状变化" class="headerlink" title="3.3 图像形状变化"></a>3.3 图像形状变化</h2><h3 id="3-3-1-cv2-resize-图像缩放"><a href="#3-3-1-cv2-resize-图像缩放" class="headerlink" title="3.3.1 cv2.resize() 图像缩放"></a>3.3.1 cv2.resize() 图像缩放</h3><p>参数</p><pre class=" language-py"><code class="language-py">cv2.resize() 放大和缩小图像    参数：        src: 输入图像对象        dsize：输出矩阵/图像的大小，为0时计算方式如下：dsize = Size(round(fx*src.cols),round(fy*src.rows))        fx: 水平轴的缩放因子，为0时计算方式：  (double)dsize.width/src.cols        fy: 垂直轴的缩放因子，为0时计算方式：  (double)dsize.heigh/src.rows        interpolation：插值算法            cv2.INTER_NEAREST : 最近邻插值法            cv2.INTER_LINEAR   默认值，双线性插值法            cv2.INTER_AREA        基于局部像素的重采样（resampling using pixel area relation）。对于图像抽取（image decimation）来说，这可能是一个更好的方法。但如果是放大图像时，它和最近邻法的效果类似。            cv2.INTER_CUBIC        基于4x4像素邻域的3次插值法            cv2.INTER_LANCZOS4     基于8x8像素邻域的Lanczos插值    cv2.INTER_AREA 适合于图像缩小， cv2.INTER_CUBIC (slow) & cv2.INTER_LINEAR 适合于图像放大</code></pre><pre class=" language-py"><code class="language-py">import cv2import numpy as np# 缩小图像为原来的一半img = cv2.imread('messi5.jpg')res = cv2.resize(img,None,fx=2, fy=2, interpolation = cv2.INTER_CUBIC)# 或者height, width = img.shape[:2]res = cv2.resize(img,(2*width, 2*height), interpolation = cv2.INTER_CUBIC)</code></pre><h3 id="3-3-2-仿射变换"><a href="#3-3-2-仿射变换" class="headerlink" title="3.3.2 仿射变换"></a>3.3.2 仿射变换</h3><p>仿射变换（从二维坐标到二维坐标之间的线性变换，且保持二维图形的“平直性”和“平行性”。仿射变换可以通过一系列的原子变换的复合来实现，包括平移，缩放，翻转，旋转和剪切）<br><strong>参数</strong></p><pre class=" language-py"><code class="language-py">cv2.warpAffine()   仿射变换（从二维坐标到二维坐标之间的线性变换，且保持二维图形的“平直性”和“平行性”。仿射变换可以通过一系列的原子变换的复合来实现，包括平移，缩放，翻转，旋转和剪切）    参数：        img: 图像对象        M：2*3 transformation matrix (转变矩阵)        dsize：输出矩阵的大小,注意格式为（cols，rows）  即width对应cols，height对应rows        flags：可选，插值算法标识符，有默认值INTER_LINEAR，               如果插值算法为WARP_INVERSE_MAP, warpAffine函数使用如下矩阵进行图像转dst(x,y)=src(M11*x+M12*y+M13,M21*x+M22*y+M23)        borderMode：可选， 边界像素模式，有默认值BORDER_CONSTANT        borderValue:可选，边界取值，有默认值Scalar()即0</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 萌芽杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selector-jsoup &amp; Json Path厚墨书源制作</title>
      <link href="/2020/02/18/selector-jsoup/"/>
      <url>/2020/02/18/selector-jsoup/</url>
      
        <content type="html"><![CDATA[<p><strong>Jsoup 中 Selector 选择器用法</strong><br><strong>Json Path的用法</strong><br>暂时不学了先，事情太多了</p><a id="more"></a><blockquote><p><a href="https://blog.csdn.net/syt_boss/article/details/82863990" target="_blank" rel="noopener">Jsoup Selector</a><br><a href="https://jsoup.org/apidocs/org/jsoup/select/Selector.html" target="_blank" rel="noopener">官方文档</a><br><a href="">Json Path</a></p></blockquote><h1 id="1-Selector-选择器概述"><a href="#1-Selector-选择器概述" class="headerlink" title="1. Selector 选择器概述"></a>1. Selector 选择器概述</h1><ul><li>tagname: 通过标签查找元素，比如：a</li><li>ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 <a href="fb:name">fb:name</a> 元素</li><li>#id: 通过 ID 查找元素，比如：#logo</li><li>.class: 通过 class 名称查找元素，比如：.masthead</li><li>[attribute]: 利用属性查找元素，比如：[href]</li><li>[^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有 HTML5 Dataset 属性的元素</li><li>[attr=value]: 利用属性值来查找元素，比如：[width=500]</li><li>[attr^=value], [attr$=value], [attr<em>=value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href\</em>=/path/]</li><li>[attr~=regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~=(?i).(png|jpe?g)]</li><li>*: 这个符号将匹配所有元素</li></ul><h1 id="2-Selector选择器组合使用"><a href="#2-Selector选择器组合使用" class="headerlink" title="2. Selector选择器组合使用"></a>2. Selector选择器组合使用</h1><ul><li>el#id: 元素+ID，比如： div#logo</li><li>el.class: 元素+class，比如： div.masthead</li><li>el[attr]: 元素+class，比如： a[href]</li><li>任意组合，比如：a[href].highlight</li><li>ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在”body”元素下的所有 p元素</li><li>parent &gt; child: 查找某个父元素下的直接子元素，比如：可以用div.content &gt; p 查找 p 元素，也可以用body &gt; * 查找body标签下所有直接子元素</li><li>siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div</li><li>siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p</li><li>el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo</li></ul><h1 id="3-伪选择器selectors"><a href="#3-伪选择器selectors" class="headerlink" title="3. 伪选择器selectors"></a>3. 伪选择器selectors</h1><ul><li>:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素</li><li>:gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素</li><li>:eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素</li><li>:has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素</li><li>:not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class=logo 元素的所有 div 列表</li><li>:contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</li><li>:containsOwn(text): 查找直接包含给定文本的元素</li><li>:matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</li><li>:matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</li><li>注意：上述伪选择器索引是从0开始的，也就是说第一个元素索引值为0，第二个元素index为1等</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS/JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些奇怪的想象</title>
      <link href="/2020/02/18/yi-xie-qi-guai-de-xiang-xiang/"/>
      <url>/2020/02/18/yi-xie-qi-guai-de-xiang-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-一款可以根据自己想象力，而自动播放音乐的耳机"><a href="#1-一款可以根据自己想象力，而自动播放音乐的耳机" class="headerlink" title="1. 一款可以根据自己想象力，而自动播放音乐的耳机"></a>1. 一款可以根据自己想象力，而自动播放音乐的耳机</h2><p>人脑电波识别技术<br>人脑电波信号破译<del>人脑信号的研究，人脑的本质</del></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 想象力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脑洞（并不是） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_solve_problems</title>
      <link href="/2020/02/17/python-solve-pro/"/>
      <url>/2020/02/17/python-solve-pro/</url>
      
        <content type="html"><![CDATA[<p><strong>这篇主要是记录一些生活学习中遇到的一些难题,想不通,就用 python 模拟出来</strong><br><em>虽然模拟出来了，但不会有可能还是不会 hhh</em></p><a id="more"></a><h1 id="1-概率类问题"><a href="#1-概率类问题" class="headerlink" title="1. 概率类问题"></a>1. 概率类问题</h1><h2 id="1-1-一道小题，材料力学老师引出"><a href="#1-1-一道小题，材料力学老师引出" class="headerlink" title="1.1 一道小题，材料力学老师引出"></a>1.1 一道小题，材料力学老师引出</h2><p><em>24 个朋友生日问题</em></p><pre><code>一年中同一天收到2个或2个以上朋友生日聚会邀请的概率A 、小于10%  B、20%  C、40%  D、大于50%</code></pre><p><em>将其大致概括就是：身边有 24 个朋友，他们中有两个人或两个以上的人同一天生日的概率是多少</em><br><strong>为了简单，就只算两个人生日相同的概率</strong></p><pre class=" language-py"><code class="language-py">import randomdef get_same():    ris = []    for i in range(24):  # 24个人，生成24个随机数        ri = random.randint(1, 365)  # 随机数范围则是一年365天        ris.append(ri)    d = 0    for j in range(24):     # 循环来比较随机数        for k in range(j+1, 24):            if ris[j] == ris[k]:                d += 1                # print(ris[k])            else:                continue    return d        # 如果有相同，不管有几个，d都不是0    # 即如果d=0，说明这24个人里无同一天生日def get_gailv():    su = 0      # 总次数    suancal = 0  # 无相同，即d=0的次数    for h in range(0, 10000):   # 10000次        # print(h)        suan = get_same()        if suan == 0:   # 如果suan为0，说明生日都不同            suancal = suancal + 1        su += 1    return suancal/su    # 24 人生日都不同的概率gailvs = []for j in range(10):     # 重复10次获得概率    gailv = get_gailv()    gailvs.append(gailv)print(gailvs)</code></pre><p><strong>结果为</strong><br><strong>[0.4609, 0.4626, 0.4719, 0.4608, 0.4528, 0.4607, 0.467, 0.4575, 0.4549, 0.4577]</strong></p><p><em>可以发现没有超过 0.5 的概率，说明生日都不相同的概率是大于 0.5 的，也就是说这 24 个人有超过 50%的概率是有两个或两个以上生日是同一天的</em><br><strong>接下来分析原因：</strong><br>不难猜想出，如果只有两个人，这两个人生日同一天概率很小，随着人数的增多，出现生日相同的概率越来越大<br>可以反过来思考，计算每个人生日都不同的概率<br>两个人不同：364/365<br>三个人不同：364/365 _ 363/365<br>四个人不同：364/365 _ 363/365 * 362/365<br>以此类推：当 24 个人生日不同时的概率：</p><pre class=" language-py"><code class="language-py">total = 1j = 365ren = int(input('请输入人数：'))    # 24人for i in range(ren-1):    j = j - 1    total = j * totalfenmu = 365 ** (ren-1)print(total/fenmu) # 0.4616557420854712</code></pre><p>可以计算出概率为 0.46，即可以得出有两人或两人以上的概率为 0.54</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Questions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VB-Note</title>
      <link href="/2020/02/16/vb-note/"/>
      <url>/2020/02/16/vb-note/</url>
      
        <content type="html"><![CDATA[<p><strong>VB 语言学习笔记</strong></p><blockquote><p><a href="https://www.vbtutor.net/chinese/vbtutor_Chinese.html" target="_blank" rel="noopener">参考教程</a> _ Visual Basic 是一种相当容易学习的高阶程序语言，它可使你编写几乎任何的程序_</p></blockquote><a id="more"></a><h1 id="1-第一个-VB-程序Hello-World"><a href="#1-第一个-VB-程序Hello-World" class="headerlink" title="1. 第一个 VB 程序Hello World"></a>1. 第一个 VB 程序<code>Hello World</code></h1><pre class=" language-vb"><code class="language-vb">Private Sub Form_Load ( )Form1.showPrint "Hello World"End Sub</code></pre><h2 id="1-1-几个小例子"><a href="#1-1-几个小例子" class="headerlink" title="1.1 几个小例子"></a>1.1 几个小例子</h2><pre class=" language-vb"><code class="language-vb">Private Sub Form_Activate ( )Print 20 + 10Print 20 - 10Print 20 * 10Print 20 / 10End Sub# orPrivate Sub Form_Activate ( )Print 20 + 10, 20 ?10, 20 * 10, 20 / 10End Sub# orPrivate Sub Form_Activate ( )x = 20y = 10Print x + yPrint x - yPrint x * yPrint x / yEnd Sub</code></pre><h2 id="1-2-让程序窗口固定不变"><a href="#1-2-让程序窗口固定不变" class="headerlink" title="1.2 让程序窗口固定不变"></a>1.2 让程序窗口固定不变</h2><table><thead><tr><th align="center">属性窗口</th><th align="center">设置为</th></tr></thead><tbody><tr><td align="center">BorderStyle</td><td align="center">Fixed Single</td></tr><tr><td align="center">MaxButton</td><td align="center">False</td></tr><tr><td align="center">minButton</td><td align="center">True</td></tr></tbody></table><h1 id="2-控件-amp-控件的属性"><a href="#2-控件-amp-控件的属性" class="headerlink" title="2. 控件&amp;控件的属性"></a>2. 控件&amp;控件的属性</h1><h2 id="2-1-控件的属性"><a href="#2-1-控件的属性" class="headerlink" title="2.1 控件的属性"></a>2.1 控件的属性</h2><ul><li>可以在属性窗口里修改<br><img src="/img/VB/VB2_1.jpg" alt="属性窗口"></li><li>也可以在代码中实现修改</li></ul><pre class=" language-VB"><code class="language-VB">Private Sub Form_Load()Form1.ShowForm1.BackColor = &H000000FF&End Sub## 窗口背景颜色</code></pre><pre class=" language-vb"><code class="language-vb">Private Sub Form_Load()Shape1.Shape = 3End Sub## shape控件形状</code></pre><h2 id="2-2-常见控件"><a href="#2-2-常见控件" class="headerlink" title="2.2 常见控件"></a>2.2 常见控件</h2><p><img src="/img/VB/VB2_2.jpg" alt="控件介绍"></p><h3 id="2-2-1-文本框-TextBox"><a href="#2-2-1-文本框-TextBox" class="headerlink" title="2.2.1 文本框(TextBox)"></a>2.2.1 文本框(TextBox)</h3><p>文本框是是用来接收用户输入的控件，以及作为显示器输出。它可以处理字符串（纯文字）和数字数据，但不能处理图象或图片。一个文本框中的文字可以用 Val 函数来转换为数字和数据</p><pre class=" language-vb"><code class="language-vb">Private Sub Command1_Click()‘把文本框1和文本框2的值加起来Sum = Val(Text1.Text) + Val(Text2.Text)‘中标签上显示答案Label1.Caption = SumEnd Sub</code></pre><h3 id="2-2-2-标签-Label"><a href="#2-2-2-标签-Label" class="headerlink" title="2.2.2 标签(Label)"></a>2.2.2 标签(Label)</h3><ul><li>标签是一个非常有用处的控件，因为它不仅是用来提供指示和指导，它也可以被用来显示输出。它的一个最重要的特性是标题</li><li>利用语法 Label.Caption ，它可以显示文字和数字数据。你可以在属性窗口或在运行时改变它的标题</li></ul><h3 id="2-2-3-命令按钮-CommandButton"><a href="#2-2-3-命令按钮-CommandButton" class="headerlink" title="2.2.3 命令按钮(CommandButton)"></a>2.2.3 命令按钮(CommandButton)</h3><p>命令按钮是一个很重要的控件，因为它被户点击它时可以执行命令去运作一个程序</p><pre class=" language-vb"><code class="language-vb">Private Sub Command1_Click ()StatementsEnd Sub</code></pre><h3 id="2-2-4-图片框-PictureBox"><a href="#2-2-4-图片框-PictureBox" class="headerlink" title="2.2.4 图片框(PictureBox)"></a>2.2.4 图片框(PictureBox)</h3><p>图片框可用来处理图形。你可以下载一个图片，在设计阶段就在属性窗口从选定的文件夹选择图片。您也可以在程序运行时加载图片，其指令是 LoadPicture</p><pre class=" language-vb"><code class="language-vb">Picture1.Picture=LoadPicture ("C:\VB program\Images\grape.gif")</code></pre><h3 id="2-2-5-图像方框-Image"><a href="#2-2-5-图像方框-Image" class="headerlink" title="2.2.5 图像方框(Image)"></a>2.2.5 图像方框(Image)</h3><p>图像方框 是另一个处理图象和照片的控件。它和图片框的功能几乎是相同的。不过，其中有一个重大的区别，它可以调整大小,它也可以用 LoadPicture 方法来加载图片</p><h3 id="2-2-6-列表框-ListBox"><a href="#2-2-6-列表框-ListBox" class="headerlink" title="2.2.6 列表框(ListBox)"></a>2.2.6 列表框(ListBox)</h3><p>列表框的功能是陈列一个项目清单以便用户可以通过点击来选择项目。如果要增加项目，我们可以利用 additem 方法</p><pre class=" language-vb"><code class="language-vb">Private Sub Form_Load ( )List1.AddItem “第一课”List1.AddItem “第二课”List1.AddItem “第三课”List1.AddItem “第四课”End Sub</code></pre><h3 id="2-2-7-组合框-ComboBox"><a href="#2-2-7-组合框-ComboBox" class="headerlink" title="2.2.7 组合框(ComboBox)"></a>2.2.7 组合框(ComboBox)</h3><p>组合框展现一个下拉式项目清单。用户可以通过点击来选择项目，从名单上。为了增添项目名单，我们可以利用 AddItem `这方法</p><pre class=" language-vb"><code class="language-vb">Private Sub Form_Load ( )Combo1.AddItem “Item1”Combo1.AddItem “Item2”Combo1.AddItem “Item3”Combo1.AddItem “Item4”End Sub</code></pre><h3 id="2-2-8-复选框-CheckBox"><a href="#2-2-8-复选框-CheckBox" class="headerlink" title="2.2.8 复选框(CheckBox)"></a>2.2.8 复选框(CheckBox)</h3><ul><li>复选框让用户可以选择或取消选择一个选项。当复选框被选中时，其值是设定为 1。如不被选中，其值设定为 0_</li><li>你可以用程序来设定复选框的属性，如键入 check1.value = 1 ，就表示它被选中，check1.value = 0 就表示它不被选中，并用它来执行某些动作</li></ul><pre class=" language-vb"><code class="language-vb">Private Sub Check1_Click ()If Check1.Value = 0 ThenForm1.BackColor = vbRedElseIf Check1.Value = 1 ThenForm1.BackColor = vbBlueEnd IfEnd Sub</code></pre><h3 id="2-2-9-选项框-OptionButton"><a href="#2-2-9-选项框-OptionButton" class="headerlink" title="2.2.9 选项框(OptionButton)"></a>2.2.9 选项框(OptionButton)</h3><p>选项框也可以让用户自由选择一个项目。但是，在同一时间中只有一个选项框可被选择。当一个选项框被选定时，其价值被设定为”True”时，反之则其价值被设定为”False</p><pre class=" language-vb"><code class="language-vb">Private Sub Option1_Click ( )Shape1.Shape = 0End SubPrivate Sub Option2_Click()Shape1.Shape = 1End SubPrivate Sub Option3_Click()Shape1.Shape = 2End SubPrivate Sub Option4_Click()Shape1.Shape = 3End SubPrivate Sub Option5_Click()Shape1.Shape = 4End SubPrivate Sub Option6_Click()Shape1.Shape = 5End Sub</code></pre><h3 id="2-2-10-驱动器列表框-DriveListBox"><a href="#2-2-10-驱动器列表框-DriveListBox" class="headerlink" title="2.2.10 驱动器列表框(DriveListBox)"></a>2.2.10 驱动器列表框(DriveListBox)</h3><p>驱动器列表框，是用来显示在您的计算机上所有的驱动器。当你把这个控件纳入表格然后去运行程序，你将能够选择不同的驱动器</p><h3 id="2-2-11-目录列表框-DirListBox"><a href="#2-2-11-目录列表框-DirListBox" class="headerlink" title="2.2.11 目录列表框(DirListBox)"></a>2.2.11 目录列表框(DirListBox)</h3><p>目录列表框是用来显示清单目录或文件夹中选择一个驱动器。当你把这个控件纳入表格然后去运行程序，你将能够从所选驱动器中选择不同的目录</p><h3 id="2-2-12-文件列表框-FileListBox"><a href="#2-2-12-文件列表框-FileListBox" class="headerlink" title="2.2.12 文件列表框(FileListBox)"></a>2.2.12 文件列表框(FileListBox)</h3><p>文件列表框是用来显示文件列表在选定的目录或文件夹。当你把这个控件纳入表格然后去运行程序，你将能够从文件的列表中选择一个目录</p><h1 id="3-编写-VB-的程序代码"><a href="#3-编写-VB-的程序代码" class="headerlink" title="3. 编写 VB 的程序代码"></a>3. 编写 VB 的程序代码</h1><pre class=" language-vb"><code class="language-vb">Private Sub Command1_Click  程序代码End Sub</code></pre><p><em>Sub 实际上是整个程序的一部分, 也称为子程序</em><br>用来设定一个对象的属性或传递价值于它的语法是：<code>object.property</code> <em>对象和属性是以一个点来分开</em><br>举例</p><ul><li>form1.show 的意思是显示表 1</li><li>label1.visible =true 的意思是把 label1 设置为可被显示</li><li>Text1.text = “ VB6” ，目的就是要把 VB6 显示于 text1 的文本框中</li><li>Text2.text = 100 ，是把 100 的数目显示于 text2 文本框中</li><li>Timer1.enabled =false，是要禁用 Timer1 计时器</li></ul><p><strong>几个例子</strong></p><pre class=" language-vb"><code class="language-vb">Private Sub Command1_clickLabel1.Visible=falseLabel2.Visible=TrueText1.Text=”你是正确的!”End sub----Private Sub Command1_clickLabel1.Caption=” 欢迎”Image1.visible=trueEnd sub----Private Sub Command1_clickPictuire1.Show=trueTimer1.Enabled=TrueLable1.Caption=”开始计数“End sub</code></pre><p><strong>两个重要的 VB 函数：VAL 和 STR</strong><br><em>VAL 的作用把键入文本框的文字转换成数值， 而 STR 刚好相反，它是把数值转换成字串</em></p><pre class=" language-vb"><code class="language-vb">Private Sub Form_Activate()  Text3.text=text1.text+text2.textEnd Sub# 输入 12 ， 3# 得到 123</code></pre><pre class=" language-vb"><code class="language-vb">Private Sub Form_Activate()  Text3.text=val(text1.text)+val(text2.text)End Sub# 输入 12 ，3# 得到 15</code></pre><h1 id="4-VB-数据处理"><a href="#4-VB-数据处理" class="headerlink" title="4. VB 数据处理"></a>4. VB 数据处理</h1><h2 id="4-1-VB-基本数据"><a href="#4-1-VB-基本数据" class="headerlink" title="4.1 VB 基本数据"></a>4.1 VB 基本数据</h2><h3 id="4-1-1-数字数据"><a href="#4-1-1-数字数据" class="headerlink" title="4.1.1 数字数据"></a>4.1.1 数字数据</h3><p>数字数据是由数目构成的数据，可以进行数字运算，如加，减，乘，除等</p><table><thead><tr><th align="center">类型</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">Byte</td><td align="center">0 至 255</td></tr><tr><td align="center">Integer</td><td align="center">-32,768 至 32,767</td></tr><tr><td align="center">Long</td><td align="center">-2,147,483,648 至 2,147,483,648</td></tr><tr><td align="center">Single</td><td align="center">-3.402823E+38 至 -1.401298E-45 负 &amp;&amp;&amp;&amp; 1.401298E-45 至 3.402823E+38 正数.</td></tr><tr><td align="center">Double</td><td align="center">-1.79769313486232e+308 至 -4.94065645841247E-324 负数 &amp;&amp;&amp;&amp; 4.94065645841247E-324 至 1.79769313486232e+308 正数.</td></tr><tr><td align="center">Currency</td><td align="center">-922,337,203,685,477.5808 至 922,337,203,685,477.5807</td></tr><tr><td align="center">Decimal</td><td align="center">+/- 79,228,162,514,264,337,593,543,950,335 如果没有小数点 &amp;&amp;&amp;&amp; +/- 7.9228162514264337593543950335 (28 个小数点）.</td></tr></tbody></table><h3 id="4-1-2-非数据类型"><a href="#4-1-2-非数据类型" class="headerlink" title="4.1.2 非数据类型"></a>4.1.2 非数据类型</h3><table><thead><tr><th align="center">类型</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">String(fixed length)</td><td align="center">1 to 65,400 字符</td></tr><tr><td align="center">String(variable length)</td><td align="center">0 to 20 亿 字符</td></tr><tr><td align="center">Date</td><td align="center">公元 100 年正月一日至 9999 年十二月三十一日</td></tr><tr><td align="center">Boolean</td><td align="center">True 或 False（对或错）</td></tr><tr><td align="center">Object</td><td align="center">任何嵌入对象</td></tr><tr><td align="center">Variant(numeric)</td><td align="center">任何价值大如 Double</td></tr><tr><td align="center">Variant(text)</td><td align="center">与 variable-length string 相同</td></tr></tbody></table><h3 id="4-1-3-后缀文的符号"><a href="#4-1-3-后缀文的符号" class="headerlink" title="4.1.3 后缀文的符号"></a>4.1.3 后缀文的符号</h3><p>后缀文是让你把数字转让给一个数据. 在某些情况下，我们需要在一个字的后面增加一个后缀文，使 VB 可以计算得更准确</p><table><thead><tr><th align="center">后缀</th><th align="center">数据类型</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">Long</td></tr><tr><td align="center">!</td><td align="center">Single</td></tr><tr><td align="center">#</td><td align="center">Double</td></tr><tr><td align="center">@</td><td align="center">Currency</td></tr></tbody></table><p>此外，我们需要把字符串文字用开关引号 “ “ 围起来，日期和时间则用#标志围起来。字符串可以包含任何字符，包括数字</p><pre class=" language-vb"><code class="language-vb">memberName="Turban, John."TelNumber="1800-900-888-777"LastDay=#31-Dec-00#ExpTime=#12:00 am#</code></pre><h2 id="4-2-变数的管理-变量"><a href="#4-2-变数的管理-变量" class="headerlink" title="4.2 变数的管理(变量)"></a>4.2 变数的管理(变量)</h2><h3 id="4-2-1-变数名称"><a href="#4-2-1-变数名称" class="headerlink" title="4.2.1 变数名称"></a>4.2.1 变数名称</h3><p><strong>为变数命名时的规则</strong></p><ul><li>它必须小于 255 个字符</li><li>不得有间隔</li><li>不能以号码来开始</li><li>不能用点</li></ul><h3 id="4-2-2-变数的宣示"><a href="#4-2-2-变数的宣示" class="headerlink" title="4.2.2 变数的宣示"></a>4.2.2 变数的宣示</h3><p><code>Dim variableName as DataType</code></p><pre class=" language-vb"><code class="language-vb">Dim password As StringDim yourName As StringDim firstnum As IntegerDim secondnum As IntegerDim total As IntegerDim doDate As Date# orDim password As String,  yourName As String, firstnum As Integer,.............</code></pre><p>假如我们没有特别指明数据类型， VB 将自动宣告变数的类型<br>要宣示字符串，有两种可能的方式，一为可变长度的字符串，另一个为固定长度字符串。为可变长度的字符串，只是用同样的格式<br>对于固定长度字符串，你必须使用如下的格式:Dim VariableName as String _ n<br>如：<code>Dim yourName as String _ 10</code></p><h2 id="4-3-VB-的常数和变数"><a href="#4-3-VB-的常数和变数" class="headerlink" title="4.3 VB 的常数和变数"></a>4.3 VB 的常数和变数</h2><h3 id="4-3-1-常数"><a href="#4-3-1-常数" class="headerlink" title="4.3.1 常数"></a>4.3.1 常数</h3><p>常数代表固定不变的数据，它可能是数字或文字。在使用常数时，我们必须预先宣示它们<br>宣示常数的格式是：<code>Const constantname As datatype=initializer</code><br>constantname 是我们自己制定的名称，datatype 是资料类型而 initializer 则是初始设定值</p><p>如下例子</p><pre class=" language-vb"><code class="language-vb">Const  Num  As Integer = 9.8Const Pi As Single  = 3.142Const SchoolName As String  = "中华中学“</code></pre><h3 id="4-3-2-变数"><a href="#4-3-2-变数" class="headerlink" title="4.3.2 变数"></a>4.3.2 变数</h3><p>变数是在程序运送时会改变的数据，而常数在运算时是固定不变的。虽然我们在开始时可给于变数一个数值（初始值），但在程序运作时它的数值是可以改变的<br>变数的宣告格式如下：<code>Dim VariableName as Datatype[=initializer]</code></p><p>如下例字</p><pre class=" language-vb"><code class="language-vb">Dim Num As Single=1.234Dim Num1,Num2  As IntegerDim yourName As StringDim starName As String="刘翔”</code></pre><p>以 Dim 宣告各种变数 之后, 我们可以用以下的格式 赋值于这些变数 Variable=Expression</p><p>变数可以是一个已宣布的变数或控件的属性值. 它也可以是一个数学表达式, 一个字符串, 一个 布尔值 (对或错) 等等</p><h3 id="4-3-3-VB-运算符"><a href="#4-3-3-VB-运算符" class="headerlink" title="4.3.3 VB 运算符"></a>4.3.3 VB 运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">数学函数</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">指数</td></tr><tr><td align="center">*</td><td align="center">乘法</td></tr><tr><td align="center">/</td><td align="center">除法</td></tr><tr><td align="center">Mod</td><td align="center">整除后的余数</td></tr><tr><td align="center">\</td><td align="center">整数除法 19\4=4</td></tr><tr><td align="center">+or&amp;</td><td align="center">字串串连”v”&amp;”b”=”vb”</td></tr></tbody></table><p><strong>几个例子</strong></p><pre class=" language-vb"><code class="language-vb">Dim firstName As StringDim secondName As StringDim yourName As StringPrivate Sub Command1_Click()firstName = Text1.TextsecondName = Text2.TextyourName = secondName + "  " + firstNameLabel1.Caption = yourNameEnd Sub</code></pre><pre class=" language-vb"><code class="language-vb">Dim number1, number2, number3 as IntegerDim total, average as variantPrivate sub Form_Clicknumber1=val(Text1.Text)number2=val(Text2.Text)number3= val(Text3.Text)Total=number1+number2+number3Average=Total/5Label1.Caption=TotalLabel2.Caption=AverageEnd Sub</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> VB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Note</title>
      <link href="/2020/02/15/java-note/"/>
      <url>/2020/02/15/java-note/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.runoob.com/java/java-basic-syntax.html" target="_blank" rel="noopener">java 参考学习教程</a></p></blockquote><h2 id="1-java-基础语法"><a href="#1-java-基础语法" class="headerlink" title="1. java 基础语法"></a>1. java 基础语法</h2><ul><li>_对象_：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等</li><li><em>类</em>：类是一个模板，它描述一类对象的行为和状态</li><li>_方法_：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的</li><li>_实例变量_：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定</li></ul><h3 id="1-1-java-程序HelloWorld-java"><a href="#1-1-java-程序HelloWorld-java" class="headerlink" title="1.1 java 程序HelloWorld.java"></a>1.1 java 程序<code>HelloWorld.java</code></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 第一个Java程序     * 它将打印字符串 Hello World     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印 Hello World</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># Hello World</code></pre><p><strong>cmd 窗口</strong><br><code>javac HelloWorld.java --调试</code><br><code>java Helloworld --运行</code></p><h3 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h3><ul><li>大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的</li><li>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass</li><li>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写</li><li>源文件名.java：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）</li><li>主方法入口：所有的 Java 程序由 <code>public static void main(String []args)</code> 方法开始执行</li></ul><h3 id="1-3-java-标识符"><a href="#1-3-java-标识符" class="headerlink" title="1.3 java 标识符"></a>1.3 java 标识符</h3><p><em>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符</em></p><ul><li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ul><h3 id="1-4-java-修饰符"><a href="#1-4-java-修饰符" class="headerlink" title="1.4 java 修饰符"></a>1.4 java 修饰符</h3><p><em>像其他语言一样，Java 可以使用修饰符来修饰类中方法和属性。主要有两类修饰符</em></p><ul><li>访问控制修饰符 : default, public , protected, private</li><li>非访问控制修饰符 : final, abstract, static, synchronized</li></ul><h3 id="1-5-java-变量"><a href="#1-5-java-变量" class="headerlink" title="1.5 java 变量"></a>1.5 java 变量</h3><ul><li>局部变量</li><li>类变量–静态变量</li><li>成员变量–非静态变量</li></ul><h3 id="1-6-java-数组"><a href="#1-6-java-数组" class="headerlink" title="1.6 java 数组"></a>1.6 java 数组</h3><p><em>数组是储存在堆上的对象，可以保存多个同类型变量</em></p><h3 id="1-7-java-枚举"><a href="#1-7-java-枚举" class="headerlink" title="1.7 java 枚举"></a>1.7 java 枚举</h3><p><em>Java 5.0 引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug</em><br><em>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FreshJuice</span> <span class="token punctuation">{</span>   <span class="token keyword">enum</span> FreshJuiceSize<span class="token punctuation">{</span> SMALL<span class="token punctuation">,</span> MEDIUM <span class="token punctuation">,</span> LARGE <span class="token punctuation">}</span>   FreshJuiceSize size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreshJuiceTest</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>      FreshJuice juice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FreshJuice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      juice<span class="token punctuation">.</span>size <span class="token operator">=</span> FreshJuice<span class="token punctuation">.</span>FreshJuiceSize<span class="token punctuation">.</span>MEDIUM  <span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-7-1-java-关键字-不可以用于变量"><a href="#1-7-1-java-关键字-不可以用于变量" class="headerlink" title="1.7.1 java 关键字(不可以用于变量)"></a>1.7.1 java 关键字(不可以用于变量)</h3><table><thead><tr><th align="center">类别</th><th align="center">关键字</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">访问控制</td><td align="center">private</td><td align="center">私有的</td></tr><tr><td align="center"></td><td align="center">protected</td><td align="center">受保护的</td></tr><tr><td align="center"></td><td align="center">public</td><td align="center">公共的</td></tr><tr><td align="center">类、方法和变量修饰符</td><td align="center">abstract</td><td align="center">声明抽象</td></tr><tr><td align="center"></td><td align="center">class</td><td align="center">类</td></tr><tr><td align="center"></td><td align="center">extends</td><td align="center">扩充，继承</td></tr><tr><td align="center"></td><td align="center">final</td><td align="center">最终值，不可改变的</td></tr><tr><td align="center"></td><td align="center">implements</td><td align="center">实现（接口）</td></tr><tr><td align="center"></td><td align="center">interface</td><td align="center">接口</td></tr><tr><td align="center"></td><td align="center">native</td><td align="center">本地，原生方法</td></tr><tr><td align="center"></td><td align="center">new</td><td align="center">新，创建</td></tr><tr><td align="center"></td><td align="center">static</td><td align="center">静态</td></tr><tr><td align="center"></td><td align="center">strictfp</td><td align="center">严格，精准</td></tr><tr><td align="center"></td><td align="center">synchronized</td><td align="center">线程，同步</td></tr><tr><td align="center"></td><td align="center">transient</td><td align="center">短暂</td></tr><tr><td align="center"></td><td align="center">volatile</td><td align="center">易失的</td></tr><tr><td align="center">程序控制语句</td><td align="center">break</td><td align="center">跳出循环</td></tr><tr><td align="center"></td><td align="center">case</td><td align="center">定义一个值供 switch 选择</td></tr><tr><td align="center"></td><td align="center">continue</td><td align="center">继续</td></tr><tr><td align="center"></td><td align="center">default</td><td align="center">默认</td></tr><tr><td align="center"></td><td align="center">do</td><td align="center">运行</td></tr><tr><td align="center"></td><td align="center">else</td><td align="center">否则</td></tr><tr><td align="center"></td><td align="center">for</td><td align="center">循环</td></tr><tr><td align="center"></td><td align="center">if</td><td align="center">如果</td></tr><tr><td align="center"></td><td align="center">instanceof</td><td align="center">实例</td></tr><tr><td align="center"></td><td align="center">return</td><td align="center">返回</td></tr><tr><td align="center"></td><td align="center">switch</td><td align="center">根据值选择执行</td></tr><tr><td align="center"></td><td align="center">while</td><td align="center">循环</td></tr><tr><td align="center">错误处理</td><td align="center">assert</td><td align="center">断言表达式是否为真</td></tr><tr><td align="center"></td><td align="center">catch</td><td align="center">捕捉一场</td></tr><tr><td align="center"></td><td align="center">finally</td><td align="center">有没有异常都执行</td></tr><tr><td align="center"></td><td align="center">throw</td><td align="center">抛出一个异常对象</td></tr><tr><td align="center"></td><td align="center">throws</td><td align="center">声明一个异常可能被抛出</td></tr><tr><td align="center"></td><td align="center">try</td><td align="center">捕获异常</td></tr><tr><td align="center">包相关</td><td align="center">impot</td><td align="center">引入</td></tr><tr><td align="center"></td><td align="center">package</td><td align="center">包</td></tr><tr><td align="center">基本类型</td><td align="center">boolean</td><td align="center">布尔型</td></tr><tr><td align="center"></td><td align="center">byte</td><td align="center">字节型</td></tr><tr><td align="center"></td><td align="center">char</td><td align="center">字符型</td></tr><tr><td align="center"></td><td align="center">double</td><td align="center">双精度浮点</td></tr><tr><td align="center"></td><td align="center">float</td><td align="center">单精度浮点</td></tr><tr><td align="center"></td><td align="center">int</td><td align="center">整型</td></tr><tr><td align="center"></td><td align="center">long</td><td align="center">长整型</td></tr><tr><td align="center"></td><td align="center">short</td><td align="center">短整型</td></tr><tr><td align="center">变量引用</td><td align="center">super</td><td align="center">父类。超类</td></tr><tr><td align="center"></td><td align="center">this</td><td align="center">本类</td></tr><tr><td align="center"></td><td align="center">void</td><td align="center">无返回值</td></tr><tr><td align="center">保留关键字</td><td align="center">goto</td><td align="center">是关键字，但不能使用</td></tr><tr><td align="center"></td><td align="center">const</td><td align="center">是关键字，但不能使用</td></tr><tr><td align="center"></td><td align="center">null</td><td align="center">空</td></tr></tbody></table><h3 id="1-8-java-注释"><a href="#1-8-java-注释" class="headerlink" title="1.8 java 注释"></a>1.8 java 注释</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*多行*注释*/</span><span class="token comment" spellcheck="true">// 单行注释</span><span class="token comment" spellcheck="true">/*单行注释*/</span></code></pre><h3 id="1-9-java-空行—-忽略"><a href="#1-9-java-空行—-忽略" class="headerlink" title="1.9 java 空行—-忽略"></a>1.9 java 空行—-忽略</h3><h3 id="1-10-继承"><a href="#1-10-继承" class="headerlink" title="1.10 继承"></a>1.10 继承</h3><ul><li>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类</li><li>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）</li></ul><h3 id="1-11-接口"><a href="#1-11-接口" class="headerlink" title="1.11 接口"></a>1.11 接口</h3><ul><li>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色</li><li>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类</li></ul><h3 id="1-12-java-源程序与编译型运行区别"><a href="#1-12-java-源程序与编译型运行区别" class="headerlink" title="1.12 java 源程序与编译型运行区别"></a>1.12 java 源程序与编译型运行区别</h3><p><img src="/img/java/java.png" alt="java_pic"></p><h2 id="2-对象和类"><a href="#2-对象和类" class="headerlink" title="2. 对象和类"></a>2. 对象和类</h2><p><em>一个群体中有很多 boy 和 girl</em><br><em>其中 boy 和 girl 为类 class，而具体的每个人为该类的对象</em></p><h3 id="2-1-java-中的类"><a href="#2-1-java-中的类" class="headerlink" title="2.1 java 中的类"></a>2.1 java 中的类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>  String breed<span class="token punctuation">;</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  String color<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">barking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一个类中可以包含一下类型的变量：</p><ul><li>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁</li><li>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问</li><li>类变量：类变量也声明在类中，方法体之外，但必须声明为 static 类型<br>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和 sleeping()都是 Dog 类的方法</li></ul><h3 id="2-2-构造方法"><a href="#2-2-构造方法" class="headerlink" title="2.2 构造方法"></a>2.2 构造方法</h3><ul><li>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。</li><li>在创建一个对象的时候，至少要调用一个构造方法</li><li>构造方法的名称必须与类同名，一个类可以有多个构造方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Puppy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Puppy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Puppy</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个构造器仅有一个参数：name</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-创建对象"><a href="#2-3-创建对象" class="headerlink" title="2.3 创建对象"></a>2.3 创建对象</h3><p><em>对象是根据类创建的。在 Java 中，使用关键字 new 来创建一个新的对象</em></p><ul><li>声明：声明一个对象，包括对象名称和对象类型</li><li>实例化：使用关键字 new 来创建一个对象</li><li>初始化：使用 new 创建对象时，会调用构造方法初始化对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Puppy</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">Puppy</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//这个构造器仅有一个参数：name</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗的名字是 : "</span> <span class="token operator">+</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 下面的语句将创建一个Puppy对象</span>      Puppy myPuppy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Puppy</span><span class="token punctuation">(</span> <span class="token string">"tommy"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bilibili_Api</title>
      <link href="/2020/02/15/bilibili-api/"/>
      <url>/2020/02/15/bilibili-api/</url>
      
        <content type="html"><![CDATA[<h2 id="1-up-信息，名字，等级，视频总播放量，文章总浏览数"><a href="#1-up-信息，名字，等级，视频总播放量，文章总浏览数" class="headerlink" title="1. up 信息，名字，等级，视频总播放量，文章总浏览数"></a>1. <em>up 信息，名字，等级，视频总播放量，文章总浏览数</em></h2><p><strong><a href="https://api.bilibili.com/x/space/upstat?mid=uid&amp;jsonp=jsonp" target="_blank" rel="noopener">https://api.bilibili.com/x/space/upstat?mid=uid&amp;jsonp=jsonp</a></strong></p><h2 id="2-up-信息，关注数，黑名单，粉丝数"><a href="#2-up-信息，关注数，黑名单，粉丝数" class="headerlink" title="2. up 信息，关注数，黑名单，粉丝数"></a>2. <em>up 信息，关注数，黑名单，粉丝数</em></h2><p><strong><a href="https://api.bilibili.com/x/relation/stat?vmid=UID&amp;jsonp=jsonp" target="_blank" rel="noopener">https://api.bilibili.com/x/relation/stat?vmid=UID&amp;jsonp=jsonp</a></strong></p><h2 id="3-bilibili-某视频评论区的信息"><a href="#3-bilibili-某视频评论区的信息" class="headerlink" title="3. bilibili 某视频评论区的信息"></a>3. bilibili 某视频评论区的信息</h2><p><strong><a href="http://api.bilibili.com/x/v2/reply?jsonp=jsonp&amp;;pn=页数&amp;type=1&amp;oid=av号" target="_blank" rel="noopener">http://api.bilibili.com/x/v2/reply?jsonp=jsonp&amp;;pn=页数&amp;type=1&amp;oid=av号</a></strong></p><h2 id="4-bilibili-主页各个分区信息（信息量巨大）"><a href="#4-bilibili-主页各个分区信息（信息量巨大）" class="headerlink" title="4. bilibili 主页各个分区信息（信息量巨大）"></a>4. bilibili 主页各个分区信息（信息量巨大）</h2><p><strong><a href="https://www.bilibili.com/index/ding.json" target="_blank" rel="noopener">https://www.bilibili.com/index/ding.json</a></strong></p><h2 id="5-bilibili-视频-av-号，弹幕，评论，收藏，硬币，分享，喜欢等基本信息"><a href="#5-bilibili-视频-av-号，弹幕，评论，收藏，硬币，分享，喜欢等基本信息" class="headerlink" title="5. bilibili 视频 av 号，弹幕，评论，收藏，硬币，分享，喜欢等基本信息"></a>5. bilibili 视频 av 号，弹幕，评论，收藏，硬币，分享，喜欢等基本信息</h2><p><strong><a href="http://api.bilibili.com/archive_stat/stat?aid=av号&amp;type=jsonp" target="_blank" rel="noopener">http://api.bilibili.com/archive_stat/stat?aid=av号&amp;type=jsonp</a></strong></p><h2 id="6-bilibili-主站"><a href="#6-bilibili-主站" class="headerlink" title="6. bilibili 主站"></a>6. bilibili 主站</h2><p><strong><a href="https://api.bilibili.com/x/web-interface/online?&amp;;jsonp=jsonp" target="_blank" rel="noopener">https://api.bilibili.com/x/web-interface/online?&amp;;jsonp=jsonp</a></strong></p><h2 id="7-up的粉丝数量，但有限制，最对250个"><a href="#7-up的粉丝数量，但有限制，最对250个" class="headerlink" title="7. up的粉丝数量，但有限制，最对250个"></a>7. up的粉丝数量，但有限制，最对250个</h2><p><strong><a href="https://api.bilibili.com/x/relation/followers?vmid=uid&amp;pn=5&amp;ps=0&amp;order=desc&amp;jsonp=jsonp" target="_blank" rel="noopener">https://api.bilibili.com/x/relation/followers?vmid=uid&amp;pn=5&amp;ps=0&amp;order=desc&amp;jsonp=jsonp</a></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bilibili </tag>
            
            <tag> Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bilibili_Api_Python</title>
      <link href="/2020/02/14/python-bili-exam/"/>
      <url>/2020/02/14/python-bili-exam/</url>
      
        <content type="html"><![CDATA[<p><strong>bilibili 提供的 api 接口(一串 json 字符)</strong><br><em>让基于 bilibili 的开发更简单</em><br><strong>我基于 python 写的几个使用 api 获取信息的例子</strong></p><a id="more"></a><h1 id="1-bilibili-用户基本信息-name，level，关注，粉丝-获取"><a href="#1-bilibili-用户基本信息-name，level，关注，粉丝-获取" class="headerlink" title="1. bilibili 用户基本信息(name，level，关注，粉丝)获取"></a>1. bilibili 用户基本信息(name，level，关注，粉丝)获取</h1><p><code>https://api.bilibili.com/x/space/upstat?mid=UUID&amp;jsonp=jsonp</code><em>up 信息，名字，等级，视频总播放量，文章总浏览数</em><br><code>https://api.bilibili.com/x/relation/stat?vmid=UUID&amp;jsonp=jsonp</code><em>up 信息，关注数，黑名单，粉丝数</em></p><p><strong>简单的代码获取 up 信息</strong></p><pre class=" language-py"><code class="language-py">import jsonimport requestsmid = input('输入要查询的up的uid：')url_space = 'https://api.bilibili.com/x/space/acc/info?mid=' + midurl_relation = 'https://api.bilibili.com/x/relation/stat?vmid='+midspace = requests.get(url_space).content.decode()relation =requests.get(url_relation).content.decode()# print(type(html))dict_space = json.loads(space)dict_rela = json.loads(relation)# print(dict)up_name = dict_space["data"]["name"]up_level = dict_space['data']['level']up_following_num = dict_rela['data']['following']up_follower_num = dict_rela['data']['follower']print(f'up名字是:{up_name}')print(f'up等级达到:{up_level}级')if int(up_level)>=5:    print('----哇是个大佬！！！----')print(f'up关注了{up_following_num}个人')if int(up_following_num)>=700:    print('----铁定是个dd！！！----')print(f'up有{up_follower_num}个粉丝')</code></pre><p><strong>示例：</strong></p><pre class=" language-py"><code class="language-py">输入要查询的up的uid：2up名字是:碧诗up等级达到:6级----哇是个大佬！！！----up关注了191个人up有804598个粉丝</code></pre><h1 id="2-bilibili-统计某视频评论区，并生成词云"><a href="#2-bilibili-统计某视频评论区，并生成词云" class="headerlink" title="2. bilibili 统计某视频评论区，并生成词云"></a>2. bilibili 统计某视频评论区，并生成词云</h1><ul><li><strong>获取某视频评论区评论</strong></li></ul><pre class=" language-py"><code class="language-py">import jsonimport requestsfrom multiprocessing.dummy import Poolimport reimport osav = input('请输入视频的av号:')p_total = input('请输入评论要几页:')def get_urls():    urls = []    p = 1    while p <= int(p_total):        url = 'http://api.bilibili.com/x/v2/reply?jsonp=jsonp&;pn=' + str(p) + '&type=1&oid=' + av        urls.append(url)        p += 1    return urlsdef get_name_con(url):    html = requests.get(url).content.decode()    yh_names = re.findall(r'"uname":"(.*?)","sex":',html,re.S)    yh_contents = re.findall(r'"message":"(.*?)","plat"',html,re.S)    del yh_contents[0]    yh_contents2 = []    for yh_content in yh_contents:        yh_contents2.append(yh_content.replace('\\n',' '))    # print(yh_contents2)    # exit()    return yh_names,yh_contents2def get_names_cons():    pool = Pool(5)    urls = get_urls()    namecons = pool.map(get_name_con,urls)    names = []    cons = []    for namecon in namecons:        name = namecon[0]        for n in name :            names.append(n)        con = namecon[1]        for c in con:            cons.append(c)    return names,consdef save():    tumple = get_names_cons()    namelst = tumple[0]    conlst = tumple[1]    # print(len(conlst))    # # print(type(namelst))    # print(len(namelst))    # exit()    if len(namelst) != len(conlst):        tot = len(conlst)    g = 0    main_path = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\txt' #修改路径-自定义    if not os.path.exists(main_path):        os.makedirs(main_path)    dir1 = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\txt\\' + 'comment'  + '.txt'  # 自定义文件名    with open(dir1,'w',encoding='utf-8') as fb:        for g in range(tot):            # fb.write(namelst[g])            # fb.write('\t\t\t')            fb.write(conlst[g])            # fb.write('\n')            g += 1if __name__ == '__main__':    save()    print('----已完成----',end='\t')    print(f'此视频已获得 {p_total} 页的评论')</code></pre><ul><li><strong>将生成的评论 txt 文件统计为词云</strong></li></ul><pre class=" language-py"><code class="language-py">from wordcloud import WordCloudimport PIL .Image as imageimport jiebadef trans_cn(text):    word_list = jieba.cut(text)    result = ' '.join(word_list)    return resultdef wc():    dir1 = './txt/comment.txt'    with open(dir1,encoding='utf-8') as f:        text = f.read()        text = trans_cn(text)        WordCloud2 = WordCloud(            font_path = 'C:\\windows\\Fonts\\simfang.ttf'        ).generate(text)        image_produce = WordCloud2.to_image()        image_produce.show()        WordCloud2.to_file('./txt/comment.png')wc()</code></pre><p><strong>示例：av2</strong><br><img src="/img/bilibili/comment.png" alt="图片示例"></p><h1 id="3-获取-bilibili-主页各个分区的视频封面和-av-号"><a href="#3-获取-bilibili-主页各个分区的视频封面和-av-号" class="headerlink" title="3. 获取 bilibili 主页各个分区的视频封面和 av 号"></a>3. 获取 bilibili 主页各个分区的视频封面和 av 号</h1><p><code>https://www.bilibili.com/index/ding.json</code><em>首页 api，每刷新一次，信息就会改变一次</em><br><em>获取的视频信息也就不同，所以可以一直获取信息(理论上来说)</em><br><em>缺点是每次只能获取十张图片信息</em><br><em>用的是 wb 写入文件，所以即使文件有一样的也会被覆盖…</em></p><pre class=" language-py"><code class="language-py">import requestsimport reimport osimport jsonprint('-douga-teleplay-kichiku-dance-bangumi-fashion-life-ad-guochuang-movie-music-technology-game-ent--')fenqu = input('请输入爬取分区:')if fenqu == '':    fenqu1 = 'shuma'else :    fenqu1 = fenquhtml = requests.get(    'https://www.bilibili.com/index/ding.json').content.decode()dict_html = json.loads(html)i = 0aids = []pics = []for i in range(10):    aid = dict_html[fenqu][str(i)]['aid']    pic = dict_html[fenqu][str(i)]['pic']    aids.append(aid)    pics.append(pic)j = 1h = j-1for h in range(10):    main_path = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\pic\\'+fenqu1    if not os.path.exists(main_path):        os.makedirs(main_path)    try:        piccc = requests.get(pics[h])    except requests.exceptions.ConnectionError:        print('图片无法下载')        continue    except requests.exceptions.ReadTimeout:        print('requests.exceptions.ReadTimeout')        continue    dir = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\pic\\' + \         fenqu1 + '\\'  +'av' + str(aids[h]) + '.jpg'    with open(dir, 'wb') as f:        print(f'正在爬取第{j}张图')        f.write(piccc.content)    j += 1    h += 1print('----完成图片爬取----')</code></pre><p><em>略微修改后</em><br><em>可能就是因为有重复的，会覆盖前面已下载的</em><br><em>爬个 5 次本该有 50 张，但才有 20 几张(dance 区)</em><br><em>可能 dance 区首页视频比较少吧，游戏区很多</em><br><strong>不管了反正这个爬虫也没什么用 hhh</strong></p><pre class=" language-py"><code class="language-py">import requestsimport reimport osimport jsondef get_pic():    if fenqu == '':        fenqu1 = 'shuma'    else :        fenqu1 = fenqu    html = requests.get(        'https://www.bilibili.com/index/ding.json').content.decode()    dict_html = json.loads(html)    i = 0    aids = []    pics = []    for i in range(10):        aid = dict_html[fenqu][str(i)]['aid']        pic = dict_html[fenqu][str(i)]['pic']        aids.append(aid)        pics.append(pic)    j = 1    h = j-1    for h in range(10):        main_path = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\pic\\'+fenqu1        if not os.path.exists(main_path):            os.makedirs(main_path)        try:            piccc = requests.get(pics[h])        except requests.exceptions.ConnectionError:            print('图片无法下载')            continue        except requests.exceptions.ReadTimeout:            print('requests.exceptions.ReadTimeout')            continue        dir = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\pic\\' + \            fenqu1 + '\\'  +'av' + str(aids[h]) + '.jpg'        with open(dir, 'wb') as f:            print(f'正在爬取第{j}张图')            f.write(piccc.content)        j += 1        h += 1to = int(input('请输入你要爬多少次---一次最多十张：'))print('-douga-teleplay-kichiku-dance-bangumi-fashion-life-ad-guochuang-movie-music-technology-game-ent--')fenqu = input('请输入爬取分区:')for i in range(to):    get_pic()    print(f'----完成第{i}次图片爬取----')</code></pre><blockquote><p><a href="https://github.com/yq010105/spider_learn/tree/master/bilibili/bilibili_api" target="_blank" rel="noopener">Github 源码链接</a></p></blockquote><h1 id="4-主站上的实时人数"><a href="#4-主站上的实时人数" class="headerlink" title="4. 主站上的实时人数"></a>4. 主站上的实时人数</h1><p>_所用 api 接口_<code>https://api.bilibili.com/x/web-interface/online?&amp;;jsonp=jsonp</code></p><pre class=" language-py"><code class="language-py">import requestsimport jsonimport timedef print_num():    index = requests.get(    'https://api.bilibili.com/x/web-interface/online?&;jsonp=jsonp').content.decode()    dict_index = json.loads(index)    all_count = dict_index['data']['all_count']    web_online = dict_index['data']['web_online']    play_online = dict_index['data']['play_online']# 应该是人数和实时在线人数    print(f'all_count:{all_count}')    print(f'web_online:{web_online}')    print(f'play_online:{play_online}')for i in range(100):    print(f'第{i+1}次计数')    print_num()    time.sleep(2)</code></pre><h1 id="5-用户的粉丝数"><a href="#5-用户的粉丝数" class="headerlink" title="5. 用户的粉丝数"></a>5. 用户的粉丝数</h1><p><em>只能获取一页，b 站最多是五页，多了就会有限制</em></p><pre class=" language-py"><code class="language-py">import requestsimport jsonimport csvimport osimport timeuid = input('请输入查找的up主的uid:')url = 'https://api.bilibili.com/x/relation/followers?vmid=' + \    uid + '&ps=0&order=desc&jsonp=jsonp'html = requests.get(url).content.decode()dic_html = json.loads(html)index_order = dic_html['data']['list']mids, mtimes, unames, signs = [], [], [], []for i in index_order:    mid = i['mid']    mids.append(mid)    mtime = i['mtime']    mmtime = time.asctime(time.localtime(mtime))    mtimes.append(mmtime)    uname = i['uname']    unames.append(uname)    sign = i['sign']    signs.append(sign)# print(index_order)# print(mids)headers = ['uid', '注册时间', 'up姓名', '个性签名']rows = []j = 0for j in range(len(mids)):    rows.append([mids[j], mtimes[j], unames[j], signs[j]])main_path = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\csv'if not os.path.exists(main_path):    os.makedirs(main_path)dir = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\csv\\' + \    'follers' + '.csv'with open(dir, 'w', encoding='utf-8') as f:    fb = csv.writer(f)    fb.writerow(headers)    fb.writerows(rows)print('----最多只显示一页的粉丝数，也就是50个----')print(f'共有{len(mids)}个粉丝')</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bilibili </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_WordCloud</title>
      <link href="/2020/02/13/python-wordcloud/"/>
      <url>/2020/02/13/python-wordcloud/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>wordcloud 一个可以生成词云的 python 包</strong><a id="more"></a></li></ul><h1 id="1-wordcloud-代码-英文"><a href="#1-wordcloud-代码-英文" class="headerlink" title="1. wordcloud 代码(英文)"></a>1. wordcloud 代码(英文)</h1><pre class=" language-py"><code class="language-py">from wordcloud import WordCloudimport PIL .Image as imageimport numpy as np # 自定义图片dir = './bi.txt'with open(dir) as fp:    text = fp.read()    # print(text)    # exit()    mask = np.array(image.open('F:\download\\1.png'))   #自定义词云形状    WordCloud = WordCloud(        mask = mask,    ).generate(text)    image_produce = WordCloud.to_image()    image_produce.show()        #  生成的文件在：C:\Users\20180\AppData\Local\Temp\jieba.cache中</code></pre><h1 id="2-wordcloud-代码实现-中文"><a href="#2-wordcloud-代码实现-中文" class="headerlink" title="2. wordcloud 代码实现(中文)"></a>2. wordcloud 代码实现(中文)</h1><ul><li><strong>jieba 库</strong></li></ul><pre class=" language-py"><code class="language-py">from wordcloud import WordCloudimport PIL .Image as imageimport numpy as np # 自定义图片import jieba # 中文def trans_cn(text):    word_list = jieba.cut(text)    result = ' '.join(word_list)    return resultdir = './bi.txt'with open(dir) as fp:    text = fp.read()    # print(text)    # exit()    text = trans_cn(text)    mask = np.array(image.open('F:\download\\1.png'))    WordCloud = WordCloud(        mask = mask,        font_path ='C:\\windows\\Fonts\\msyh.ttc'    ).generate(text)    image_produce = WordCloud.to_image()    image_produce.show()</code></pre><blockquote><p>参考<a href="https://www.jianshu.com/p/c986f5017ca7" target="_blank" rel="noopener">简书网站</a></p></blockquote><h1 id="3-将-python-词云生成的图片保存下来"><a href="#3-将-python-词云生成的图片保存下来" class="headerlink" title="3. 将 python 词云生成的图片保存下来"></a>3. 将 python 词云生成的图片保存下来</h1><pre class=" language-py"><code class="language-py">import jiebafrom wordcloud import WordCloudwith open("./bi.txt") as fp:    txt = fp.read()  # 读取文本words = jieba.lcut(txt)  # 精确分词nextword = ' '.join(words)    #空格连接字符wordshow = WordCloud(background_color='white',                     width=800,                     height=800,                     max_words=800,                     max_font_size=100,                     font_path="msyh.ttc",    #用微软雅黑作为字体显示效果                     ).generate(nextword)wordshow.to_file('bilibili_rank.png')  #转换成图片</code></pre><blockquote><p><a href="https://blog.csdn.net/qq_41709494/article/details/89213176" target="_blank" rel="noopener">参考网站</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_Pyinstaller</title>
      <link href="/2020/02/13/py-pyinstaller/"/>
      <url>/2020/02/13/py-pyinstaller/</url>
      
        <content type="html"><![CDATA[<p><strong>将 python 文件打包成 exe 可执行文件</strong><br><strong><code>pip3 install pyinstaller</code></strong></p><a id="more"></a><h1 id="1-Pyinstaller-的使用"><a href="#1-Pyinstaller-的使用" class="headerlink" title="1. Pyinstaller 的使用"></a>1. Pyinstaller 的使用</h1><h2 id="1-1-打开-PowerShell-窗口"><a href="#1-1-打开-PowerShell-窗口" class="headerlink" title="1.1 打开 PowerShell 窗口"></a>1.1 打开 PowerShell 窗口</h2><ul><li>在你的 Python 程序文件夹上（不点进去）按住 shift 并且右键，在弹出的选项中点击”在此处打开命令行窗口”</li><li>或者先进入命令行窗口，然后使用 cd 指令进入程序文件夹，示例：<br><code>cd G:\工程储存\Python工程\love</code></li></ul><h2 id="1-2-输入以下指令，开始打包"><a href="#1-2-输入以下指令，开始打包" class="headerlink" title="1.2 输入以下指令，开始打包"></a>1.2 输入以下指令，开始打包</h2><p><code>pyinstaller -F -w (-i icofile) filename</code></p><ul><li>filename 表示你的 Python 程序文件名</li><li>-w 表示隐藏程序运行时的命令行窗口(不加-w 会有黑色窗口)</li><li>括号内的为可选参数，-i icofile 表示给程序加上图标，图标必须为.ico 格式<br><em>icofile 表示图标的位置，建议直接放在程序文件夹里面，这样子打包的时候直接写文件名就好</em></li><li>输入示例：<br><code>pyinstaller -F -w -i favicon love.py</code></li><li>然后我们进入到程序目录里面会再看到一个名称为 dist 目录，打包好的 exe 程序就在里面</li></ul><h2 id="1-3-pyinstaller-相关参数"><a href="#1-3-pyinstaller-相关参数" class="headerlink" title="1.3 pyinstaller 相关参数"></a>1.3 pyinstaller 相关参数</h2><ul><li><p>-F, –onefile 打包一个单个文件，如果你的代码都写在一个.py 文件的话，可以用这个，如果是多个.py 文件就别用</p></li><li><p>-D, –onedir 打包多个文件，在 dist 中生成很多依赖文件，适合以框架形式编写工具代码，我个人比较推荐这样，代码易于维护</p></li><li><p>-K, –tk 在部署时包含 TCL/TK</p></li><li><p>-a, –ascii 不包含编码.在支持 Unicode 的 python 版本上默认包含所有的编码.</p></li><li><p>-d, –debug 产生 debug 版本的可执行文件</p></li><li><p>-w,–windowed,–noconsole 使用 Windows 子系统执行.当程序启动的时候不会打开命令行(只对 Windows 有效)</p></li><li><p>-c,–nowindowed,–console 使用控制台子系统执行(默认)(只对 Windows 有效)</p></li><li><p>-s,–strip 可执行文件和共享库将 run through strip.注意 Cygwin 的 strip 往往使普通的 win32 Dll 无法使用.</p></li><li><p>-X, –upx 如果有 UPX 安装(执行 Configure.py 时检测),会压缩执行文件(Windows 系统中的 DLL 也会)(参见 note)</p></li><li><p>-o DIR, –out=DIR 指定 spec 文件的生成目录,如果没有指定,而且当前目录是 PyInstaller 的根目录,会自动创建一个用于输出(spec 和生成的可执行文件)的目录.如果没有指定,而当前目录不是 PyInstaller 的根目录,则会输出到当前的目录下.</p></li><li><p>-p DIR, –path=DIR 设置导入路径(和使用 PYTHONPATH 效果相似).可以用路径分割符(Windows 使用分号,Linux 使用冒号)分割,指定多个目录.也可以使用多个-p 参数来设置多个导入路径，让 pyinstaller 自己去找程序需要的资源</p></li><li><p>–icon=&lt;FILE.ICO&gt;<br>将 file.ico 添加为可执行文件的资源(只对 Windows 系统有效)，改变程序的图标 pyinstaller -i ico 路径 xxxxx.py</p></li><li><p>–icon=&lt;FILE.EXE,N&gt; 将 file.exe 的第 n 个图标添加为可执行文件的资源(只对 Windows 系统有效)</p></li><li><p>-v FILE, –version=FILE 将 verfile 作为可执行文件的版本资源(只对 Windows 系统有效)</p></li><li><p>-n NAME, –name=NAME 可选的项目(产生的 spec 的)名字.如果省略,第一个脚本的主文件名将作为 spec 的名字</p></li></ul><blockquote><p><a href="https://blog.csdn.net/qq_33462307/article/details/90479045" target="_blank" rel="noopener">参考 CSDN</a></p></blockquote><h1 id="2-Pyinstaller-的问题"><a href="#2-Pyinstaller-的问题" class="headerlink" title="2. Pyinstaller 的问题"></a>2. Pyinstaller 的问题</h1><h2 id="2-1-Fail-to-execute-scrip-XXX"><a href="#2-1-Fail-to-execute-scrip-XXX" class="headerlink" title="2.1 Fail to execute scrip XXX"></a>2.1 Fail to execute scrip XXX</h2><p><strong>使用了<code>pyinstaller -F -w code.py</code>打包以后，发现打不开</strong></p><p><em>解决不了啊啊啊啊</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/2020/02/13/http/"/>
      <url>/2020/02/13/http/</url>
      
        <content type="html"><![CDATA[<h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h2><ul><li>HTTP 基于 TCP/IP 协议：http 协议是基于 TCP/IP 协议之上的应用层协议</li><li>HTTP 是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间</li><li>HTTP 是基于请求－响应模式：HTTP 协议规定,请求从客户端发出,最后服务器端响应该请求并 返回</li><li>HTTP 是无状态保存：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</li></ul><h2 id="2-URL"><a href="#2-URL" class="headerlink" title="2. URL"></a>2. URL</h2><p>HTTP 使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL 是一种特殊类型的 URI，包含了用于查找某个资源的足够的信息</p><p><strong>例子解析</strong>：<em><a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="noopener">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></em></p><ul><li>协议部分：该 URL 的协议部分为“http：”</li><li>域名部分：该 URL 的域名部分为“<a href="http://www.aspxfans.com”" target="_blank" rel="noopener">www.aspxfans.com”</a></li><li>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符</li><li>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个 URL 必须的部分。本例中的虚拟目录是“/news/”</li><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个 URL 必须的部分，如果省略该部分，则使用默认的文件名</li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个 URL 必须的部分</li><li>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符</li></ul><h2 id="3-Request"><a href="#3-Request" class="headerlink" title="3. Request"></a>3. Request</h2><p><img src="/img/http/http_request.png" alt="request解析图"></p><hr><p><strong>常见请求头</strong></p><ul><li>accept:浏览器通过这个头告诉服务器，他支持的数据类</li><li>Accept-Charset:浏览器通过这个告诉服务器，他锁支持的字符集</li><li>Accept-Encoding:浏览器通过这个告诉服务器，他支持的压缩格式</li><li>Accept-Language:浏览器通过这个告诉服务器，他的语言环境</li><li>Host：浏览器通过这个告诉服务器，像访问那台主机</li><li>If-Modified-Since:浏览器通过这个头告诉服务器，缓存数据的时间</li><li>Referer：浏览器通过这个头告诉服务器，客户机是从哪个页面来的（防盗链）</li><li>Connection:浏览器通过这个头告诉服务器，请求完后是断开连接还是维持连接</li><li>X-Requested-With:XMLHttpResquest 代表通过 ajax 方式进行访问的</li><li>User-Agent:请求载体的身份标识</li></ul><h2 id="4-Response"><a href="#4-Response" class="headerlink" title="4. Response"></a>4. Response</h2><p><img src="/img/http/http_response.png" alt="response解析图"></p><hr><p><strong>常见的响应头信息</strong></p><ul><li>Location：服务器通过这个头，来告诉浏览器跳转到哪里</li><li>Server:服务器通过这个头，告诉路浏览器服务器的型号</li><li>Content-Encoding:服务器通过这个头，告诉浏览器数据压缩的格式</li><li>Content-Length:服务器通过这个头，告诉浏览器会送数据的长度</li><li>Content-Language:服务器通过这个头，告诉浏览器语言环境</li><li>Content-Type:服务器通过这个头，告诉浏览器回送数据的类型</li><li>Refresh:服务器通过这个头，告诉浏览器定时刷新</li><li>Content-Disposition:服务器通过这个头，告诉浏览器以下载方式打开数据</li><li>Transfer-Encoding:服务器通过这个头，告诉浏览器数据是以块方式回送的</li><li>Expires:-1 控制浏览器不要缓存</li><li>Cache-Control:no-cache</li><li>Pragma: no-cache</li></ul><p><strong>响应状态码</strong></p><table><thead><tr><th align="center"></th><th align="center">类别</th><th align="center">原因短语</th></tr></thead><tbody><tr><td align="center">1xx</td><td align="center">Informational(信息性状态码)</td><td align="center">接受的请求正在处理</td></tr><tr><td align="center">2xx</td><td align="center">Success(成功状态码)</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">3xx</td><td align="center">Redirection(重定向状态码)</td><td align="center">需要进行附加操作以完成请求</td></tr><tr><td align="center">4xx</td><td align="center">Client Error(客户端错误状态码)</td><td align="center">服务器无法处理请求</td></tr><tr><td align="center">5xx</td><td align="center">Server Error(服务器错误状态码)</td><td align="center">服务器处理请求出错</td></tr></tbody></table><blockquote><p><a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin" target="_blank" rel="noopener">百度百科详细对比表</a></p></blockquote><h2 id="5-HTTPS-协议"><a href="#5-HTTPS-协议" class="headerlink" title="5. HTTPS 协议"></a>5. HTTPS 协议</h2><p>HTTPS (Secure Hypertext Transfer Protocol)安全超文本传输协议，HTTPS 是在 HTTP 上建立 SSL 加密层，并对传输数据进行加密，是 HTTP 协议的安全版<br><img src="/img/http/https.png" alt="https"></p><blockquote><p><a href="https://www.cnblogs.com/angle6-liu/p/10459132.html" target="_blank" rel="noopener">参考教程</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_format</title>
      <link href="/2020/02/11/python-format/"/>
      <url>/2020/02/11/python-format/</url>
      
        <content type="html"><![CDATA[<p><strong>Python_format   一种格式化字符串函数<code>str.format()</code></strong></p><blockquote><p>参考教程<a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">网站</a>和<a href="https://blog.csdn.net/qq_19691995/article/details/84197252" target="_blank" rel="noopener">CSDN</a></p></blockquote><a id="more"></a><h1 id="python-format"><a href="#python-format" class="headerlink" title="python_format"></a>python_format</h1><p>   <strong><code>str.format()</code>，它增强了字符串格式化的功能</strong><br>   <strong>基本语法是通过 {} 和 : 来代替以前的 %</strong></p><h2 id="1-format-函数可以接受不限个参数，位置可以不按顺序"><a href="#1-format-函数可以接受不限个参数，位置可以不按顺序" class="headerlink" title="1. format 函数可以接受不限个参数，位置可以不按顺序"></a>1. format 函数可以接受不限个参数，位置可以不按顺序</h2><pre class=" language-py"><code class="language-py">>>>"{} {}".format("hello", "world")    # 不设置指定位置，按默认顺序'hello world'>>> "{0} {1}".format("hello", "world")  # 设置指定位置'hello world'>>> "{1} {0} {1}".format("hello", "world")  # 设置指定位置'world hello world'</code></pre><h2 id="2-设置参数"><a href="#2-设置参数" class="headerlink" title="2. 设置参数"></a>2. 设置参数</h2><pre class=" language-py"><code class="language-py">print("网站名：{name}, 地址 {url}".format(name="菜鸟教程", url="www.runoob.com"))# 通过字典设置参数site = {"name": "菜鸟教程", "url": "www.runoob.com"}print("网站名：{name}, 地址 {url}".format(**site))# 通过列表索引设置参数my_list = ['菜鸟教程', 'www.runoob.com']print("网站名：{0[0]}, 地址 {0[1]}".format(my_list))  # "0" 是必须的'''网站名：菜鸟教程, 地址 www.runoob.com网站名：菜鸟教程, 地址 www.runoob.com网站名：菜鸟教程, 地址 www.runoob.com'''</code></pre><p>通过字典和列表的另一种写法</p><pre class=" language-py"><code class="language-py">>>> hash = {'name':'hoho','age':18}>>> 'my name is {name},age is {age}'.format(**hash)        #**dict'my name is hoho,age is 18'>>> li = ['hoho',18]>>> 'my name is {} ,age {}'.format(*li)               #*[]迭代列表'my name is hoho ,age 18'</code></pre><h2 id="3-向str-format传入对象"><a href="#3-向str-format传入对象" class="headerlink" title="3. 向str.format传入对象"></a>3. 向<code>str.format</code>传入对象</h2><pre class=" language-py"><code class="language-py">class AssignValue(object):    def __init__(self, value):        self.value = valuemy_value = AssignValue(6)print('value 为: {0.value}'.format(my_value))  # "0" 是可选的# value 为: 6</code></pre><h2 id="4-数字格式化"><a href="#4-数字格式化" class="headerlink" title="4. 数字格式化"></a>4. 数字格式化</h2><pre class=" language-py"><code class="language-py">>>> print("{:.2f}".format(3.1415926));3.14</code></pre><table><thead><tr><th align="center">数字</th><th align="center">格式</th><th align="center">输出</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">3.1415926</td><td align="center">{:.2f}</td><td align="center">3.14</td><td align="center">保留小数点后两位</td></tr><tr><td align="center">3.1415926</td><td align="center">{:+.2f}</td><td align="center">+3.14</td><td align="center">带符号保留小数点后两位</td></tr><tr><td align="center">-1</td><td align="center">{:+.2f}</td><td align="center">-1.00</td><td align="center">带符号保留小数点后两位</td></tr><tr><td align="center">2.71828</td><td align="center">{:.0f}</td><td align="center">3</td><td align="center">不带小数</td></tr><tr><td align="center">5</td><td align="center">{:0&gt;2d}</td><td align="center">05</td><td align="center">数字补零</td></tr><tr><td align="center">5</td><td align="center">{:x&lt;4d}</td><td align="center">5xxx</td><td align="center">数字补 x (填充右边, 宽度为 4)</td></tr><tr><td align="center">10</td><td align="center">{:x&lt;4d}</td><td align="center">10xx</td><td align="center">数字补 x (填充右边, 宽度为 4)</td></tr><tr><td align="center">1000000</td><td align="center">{:,}</td><td align="center">1,000,000</td><td align="center">以逗号分隔的数字格式</td></tr><tr><td align="center">0.25</td><td align="center">{:.2%}</td><td align="center">25.00%</td><td align="center">百分比格式</td></tr><tr><td align="center">1000000000</td><td align="center">{:.2e}</td><td align="center">1.00e+09</td><td align="center">指数记法</td></tr><tr><td align="center">13</td><td align="center">{:&gt;10d}</td><td align="center">13</td><td align="center">右对齐 (默认, 宽度为 10)</td></tr><tr><td align="center">13</td><td align="center">{:&lt;10d}</td><td align="center">13</td><td align="center">左对齐 (宽度为 10)</td></tr><tr><td align="center">13</td><td align="center">{:^10d}</td><td align="center">13</td><td align="center">中间对齐 (宽度为 10)</td></tr><tr><td align="center">11</td><td align="center">‘{:b}’.format(11)</td><td align="center">1011</td><td align="center">进制</td></tr><tr><td align="center"></td><td align="center">‘{:d}’.format(11)</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">‘{:o}’.format(11)</td><td align="center">13</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">‘{:x}’.format(11)</td><td align="center">b</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">‘{:#x}’.format(11)</td><td align="center">0xb</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">‘{:#X}’.format(11)</td><td align="center">0XB</td><td align="center"></td></tr></tbody></table><ul><li><strong>^, &lt;, &gt; 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充</strong></li><li><strong>+ 表示在正数前显示 +，负数前显示 -； （空格）表示在正数前加空格</strong></li><li><strong>b、d、o、x 分别是二进制、十进制、八进制、十六进制</strong></li></ul><h2 id="5-此外还可以用大括号-来转义大括号"><a href="#5-此外还可以用大括号-来转义大括号" class="headerlink" title="5. 此外还可以用大括号 {} 来转义大括号"></a>5. 此外还可以用大括号 {} 来转义大括号</h2><pre class=" language-py"><code class="language-py">print ("{} 对应的位置是 {{0}}".format("runoob"))</code></pre><p>_结果为_：<strong>runoob 对应的位置是 {0}</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spider_example</title>
      <link href="/2020/02/10/spider-example/"/>
      <url>/2020/02/10/spider-example/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>自己动手做的 python 爬虫</strong>   <a href="https://github.com/yq010105/spider_learn" target="_blank" rel="noopener" title="github">GitHub 链接</a><br>WARNING :逻辑混乱，语法不顺！！！</p></blockquote><a id="more"></a><h1 id="1-爬取-bilibili-每日排行榜数据"><a href="#1-爬取-bilibili-每日排行榜数据" class="headerlink" title="1. 爬取 bilibili 每日排行榜数据"></a>1. 爬取 bilibili 每日排行榜数据</h1><ul><li><strong>使用 XPath 爬取,并将数据保存到 csv 文件中</strong></li><li><strong>文件名使用该排行榜所在时间段</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> csv<span class="token keyword">import</span> lxml<span class="token punctuation">.</span>htmlurl <span class="token operator">=</span> <span class="token string">'https://www.bilibili.com/ranking/'</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(html)</span>selector <span class="token operator">=</span> lxml<span class="token punctuation">.</span>html<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>html<span class="token punctuation">)</span>title <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[2]/a/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(len(title))</span>link <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[1]/a/@href'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(link[0])</span><span class="token comment" spellcheck="true"># cover = selector.xpath('//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[1]/a/div/img/@src')</span><span class="token comment" spellcheck="true"># print(cover[0])</span>up_name <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[2]/div[1]/a/span/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(up_name[5])</span>up_videoplay <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[2]/div[1]/span[1]/text()'</span><span class="token punctuation">)</span>time <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[2]/div/span/text()'</span><span class="token punctuation">)</span>time_num <span class="token operator">=</span> time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>str1 <span class="token operator">=</span> time_num<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' 的数据综合得分，每日更新一次'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'统计所有投稿在 '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>time_num2 <span class="token operator">=</span> str2headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'up_name'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'link'</span><span class="token punctuation">]</span>rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>up_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>title<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>link<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>f<span class="token string">'{time_num2}.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f_csv <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    f_csv<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>headers<span class="token punctuation">)</span>    f_csv<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>rows<span class="token punctuation">)</span></code></pre><ul><li><strong>csv 部分展示</strong><br><code>2020年02月07日 - 2020年02月10日</code><br><img src="/img/bilibili_csv.png" alt="bilibili_csv"></li></ul><h1 id="2-爬取-baidu-上搜到的图片-初级"><a href="#2-爬取-baidu-上搜到的图片-初级" class="headerlink" title="2. 爬取 baidu 上搜到的图片(初级)"></a>2. 爬取 baidu 上搜到的图片(初级)</h1><h2 id="2-1-thumbURL"><a href="#2-1-thumbURL" class="headerlink" title="2.1 thumbURL"></a>2.1 thumbURL</h2><ul><li><em>分辨率极低</em></li></ul><pre class=" language-py"><code class="language-py">import reimport requestsimport osdef download(html):    #通过正则匹配    pic_url = re.findall('"thumbURL":"(.*?)",',html, re.S)    i = 1    for key in pic_url:        print("开始下载图片："+key +"\r\n")        try:            pic = requests.get(key, timeout=10)        except requests.exceptions.ConnectionError:            print('图片无法下载')            continue        #保存图片路径        main_path="E:/baidu/" #文件保存路径，如果不存在就会被重建        if  not os.path.exists(main_path):#如果路径不存在            os.makedirs(main_path)        dir = "E:/baidu/" + str(i) + '.jpg'        fp = open(dir, 'wb')        fp.write(pic.content)        fp.close()        i += 1def main():        url = 'https://image.baidu.com/search/index?tn=baiduimage&ipn=r&ct=201326592&cl=2&lm=-1&st=-1&sf=1&fmq=&pv=&ic=0&nc=1&z=&se=1&showtab=0&fb=0&width=&height=&face=0&istype=2&ie=utf-8&fm=result&pos=history&word=siyueshinide'        result = requests.get(url)        download(result.text)if __name__ == '__main__':        main()</code></pre><h2 id="2-2-objURL"><a href="#2-2-objURL" class="headerlink" title="2.2 objURL"></a>2.2 objURL</h2><p><em>分辨率较高，但有的图爬不了</em></p><pre class=" language-py"><code class="language-py">import reimport requestsimport osimport jsondef download(html):    #通过正则匹配    pic_url = re.findall('"objURL":"(.*?)",',html, re.S)    # for pic_url_li in pic_url:        # pic_url_js = '{'+'"link"'+':' +pic_url_li+'}'        # pic_url_py = json.loads(pic_url_li)    # print(pic_url)    # exit()    i = 1    for key in pic_url:        print("开始下载图片："+key +"\r\n")        try:            pic = requests.get(key, timeout=10)        except requests.exceptions.ConnectionError:            print('图片无法下载')            continue        except requests.exceptions.ReadTimeout:            print('requests.exceptions.ReadTimeout')            continue        #保存图片路径        main_path="E:/baidu/" #文件保存路径，如果不存在就会被重建        if  not os.path.exists(main_path):#如果路径不存在            os.makedirs(main_path)        dir = "E:/baidu/" + str(i) + '.jpg'        fp = open(dir, 'wb')        fp.write(pic.content)        fp.close()        i += 1def main():        url = 'https://image.baidu.com/search/index?tn=baiduimage&ipn=r&ct=201326592&cl=2&lm=-1&st=-1&sf=1&fmq=&pv=&ic=0&nc=1&z=&se=1&showtab=0&fb=0&width=&height=&face=0&istype=2&ie=utf-8&fm=result&pos=history&word=siyueshinide'        result = requests.get(url)        download(result.text)if __name__ == '__main__':        main()</code></pre><h2 id="2-3-baidu-面向对象"><a href="#2-3-baidu-面向对象" class="headerlink" title="2.3 baidu 面向对象"></a>2.3 baidu 面向对象</h2><ul><li>输入想爬取的关键词，自动爬取(只能下 30 张)</li></ul><pre class=" language-py"><code class="language-py">import requestsimport reimport osdef get_id(search_id):    url = 'http://image.baidu.com/search/index?tn=baiduimage&ps=1&ct=201326592&lm=-1&cl=2&nc=1&ie=utf-8&word=' + search_id    return urldef get_obj():    url = get_id(search_id)    html = requests.get(url).content.decode()    obj_URL = re.findall('"objURL":"(.*?)",',html,re.S)    return obj_URLdef save_pic():    obj_url = get_obj()    i = 1    for objurl in obj_url:        print('开始下载图片'+'\t'+'第'+str(i)+'张')        try :            pic = requests.get(objurl,timeout = 10)        except requests.exceptions.ConnectionError:            print('图片无法下载')            continue        except requests.exceptions.ReadTimeout:            print('requests.exceptions.ReadTimeout')            continue        global search_id        main_path = r'E:\learn\py\git\spider\spider_learn\baidu\pic\\' + search_id +'\\'        if not os.path.exists(main_path):            os.makedirs(main_path)        dir = "E:\learn\py\git\spider\spider_learn\\baidu\pic\\" +search_id +'\\'+ search_id+ str(i) + '.jpg'        with open(dir,'wb') as f:            f.write(pic.content)        i += 1if __name__ =='__main__':    search_id = input('请输入要下载的内容:')    save_pic()</code></pre><h2 id="2-4-baidu-more"><a href="#2-4-baidu-more" class="headerlink" title="2.4 baidu_more"></a>2.4 baidu_more</h2><ul><li><strong>进一步升级，可以爬任意数量图片</strong></li></ul><pre class=" language-py"><code class="language-py">import requestsimport reimport osfrom multiprocessing.dummy import Pooldef get_urls(search_id):    total = (input('请输入要几页----30张一页----：'))    url = 'http://image.baidu.com/search/index?tn=baiduimage&ps=1&ct=201326592&lm=-1&cl=2&nc=1&ie=utf-8&word=' + search_id+ '&pn='    t = 0    URLS = []    while t < int(total)*30:        URL = url + str(t)        t = t + 30        URLS.append(URL)    return URLSdef get_obj(url):    html = requests.get(url).content.decode()    obj_URL = re.findall('"objURL":"(.*?)",',html,re.S)    return obj_URLdef save_pic():    pool=Pool(5)    objurls = pool.map(get_obj,URLS)    i = 1    for objurl in objurls:        for obj in objurl:            print('开始下载图片'+'\t'+'第'+str(i)+'张')            try :                pic = requests.get(obj,timeout = 10)            except requests.exceptions.ConnectionError:                print('图片无法下载')                continue            except requests.exceptions.ReadTimeout:                print('requests.exceptions.ReadTimeout')                continue            global search_id            main_path = patha +'\\' + search_id +'\\'            if not os.path.exists(main_path):                os.makedirs(main_path)            dir = main_path + search_id+ str(i) + '.jpg'            with open(dir,'wb') as f:                f.write(pic.content)            i += 1if __name__ =='__main__':    search_id = input('请输入要下载的内容:')    URLS = get_urls(search_id)    patha = input('输入文件保存路径----示例:E:\\baidu----:')    save_pic()</code></pre><h1 id="3-爬取-ins-上的图片-初级版"><a href="#3-爬取-ins-上的图片-初级版" class="headerlink" title="3. 爬取 ins 上的图片(初级版)"></a>3. 爬取 ins 上的图片(初级版)</h1><ul><li><em>分辨率低</em></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> lxml<span class="token punctuation">.</span>html<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 获取src</span><span class="token keyword">def</span> <span class="token function">get_src</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://www.instagram.com/baaaakuuuu'</span>    html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    selector <span class="token operator">=</span> lxml<span class="token punctuation">.</span>html<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    script <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/script[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(script)</span>    <span class="token comment" spellcheck="true"># print(type(script))       #str</span>    <span class="token comment" spellcheck="true"># exit()</span>    <span class="token comment" spellcheck="true"># for script_in in script :</span>        <span class="token comment" spellcheck="true"># try:</span>        <span class="token comment" spellcheck="true">#     script_dic = json.loads(script_in)</span>        <span class="token comment" spellcheck="true"># print(script_dic)</span>    src <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'"thumbnail_resources":\[(.*?)\]'</span><span class="token punctuation">,</span>script<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(src[0]) #str</span>    <span class="token comment" spellcheck="true"># print(type(src[0]))</span>    <span class="token comment" spellcheck="true"># exit()</span>    <span class="token keyword">return</span> src<span class="token comment" spellcheck="true"># 获取图片链接</span><span class="token keyword">def</span> <span class="token function">get_picurl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    src <span class="token operator">=</span> get_src<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(src)</span>    <span class="token comment" spellcheck="true"># exit()</span>    pic_url_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> src_ls <span class="token keyword">in</span> src <span class="token punctuation">:</span>         <span class="token comment" spellcheck="true">#"config_height":480},{ ... ,"config_width":640,"config_height":640}</span>        thumb <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'"config_height":480},{(.*?),"config_width":640,"config_height":640}'</span><span class="token punctuation">,</span>src_ls<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        thumb_json <span class="token operator">=</span> <span class="token string">'{'</span> <span class="token operator">+</span> thumb <span class="token operator">+</span> <span class="token string">'}'</span>        <span class="token comment" spellcheck="true"># print(thumb_json)</span>        <span class="token comment" spellcheck="true"># exit()</span>        thumb_py <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>thumb_json<span class="token punctuation">)</span>        pic_url <span class="token operator">=</span> thumb_py<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(pic_url)</span>        <span class="token comment" spellcheck="true"># exit()</span>        pic_url_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pic_url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(pic_url_lst)</span>    <span class="token comment" spellcheck="true"># exit()</span>    <span class="token keyword">return</span> pic_url_lst<span class="token comment" spellcheck="true"># 将图片链接保存</span><span class="token keyword">def</span> <span class="token function">save_pic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pic_url_lst <span class="token operator">=</span> get_picurl<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># print(pic_url_lst)</span>    <span class="token comment" spellcheck="true"># exit()</span>    <span class="token keyword">for</span> pic_con <span class="token keyword">in</span> pic_url_lst<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print(pic_con)</span>        <span class="token comment" spellcheck="true"># exit()</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pic_con<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>            main_path <span class="token operator">=</span> <span class="token string">'E:/ins/'</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token string">'E:/ins/'</span> <span class="token operator">+</span> <span class="token string">'baku'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第{i}张已下载'</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#requests.exceptions.ConnectionError</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片无法下载'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span>save_pic<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>学习如何爬取高分辨率图片 ing</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spider </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Note</title>
      <link href="/2020/02/09/python-note/"/>
      <url>/2020/02/09/python-note/</url>
      
        <content type="html"><![CDATA[<p><strong>Python 语言学习笔记</strong><br><strong>python，边学爬虫，边把不会的 python 知识不全</strong></p><a id="more"></a><h1 id="1-文件管理（txt）"><a href="#1-文件管理（txt）" class="headerlink" title="1. 文件管理（txt）"></a>1. 文件管理（txt）</h1><pre class=" language-py"><code class="language-py">fd = open('file.txt','w',encoding='utf-8')      #utf-8 or GBKfd.write(content)fd.close()</code></pre><p>其中 content 可以是字符串，变量，\t ……</p><hr><table><thead><tr><th align="center">r</th><th align="center">w</th><th align="center">a</th></tr></thead><tbody><tr><td align="center">只读</td><td align="center">覆盖写</td><td align="center">添加写</td></tr></tbody></table><h1 id="2-csv-文件"><a href="#2-csv-文件" class="headerlink" title="2. csv 文件"></a>2. csv 文件</h1><h2 id="2-1-列表序列数据"><a href="#2-1-列表序列数据" class="headerlink" title="2.1 列表序列数据"></a>2.1 列表序列数据</h2><ul><li>headers :表头</li><li>rows :内容</li><li>f<em>csv = csv.writer(f)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_f 为 open(‘file.txt’,’w’,encoding=’utf-8’)</em></li><li>f_csv.writerow(headers)</li><li>f_csv.writerows(rows)</li></ul><pre class=" language-py"><code class="language-py">import csvheaders = ['class','name','sex','height','year']rows = [        [1,'xiaoming','male',168,23],        [1,'xiaohong','female',162,22],        [2,'xiaozhang','female',163,21],        [2,'xiaoli','male',158,21]    ]with open('test.csv','w',newline='')as f:    f_csv = csv.writer(f)    f_csv.writerow(headers)    f_csv.writerows(rows)</code></pre><p><em>注意：如果打开 csv 文件出现空行的情况，那么需要添加一个参数 newline=”</em><br><code>with open('test.csv','w',newline='')as f:</code></p><table><thead><tr><th align="center">class</th><th align="center">name</th><th align="center">sex</th><th align="center">height</th><th align="center">year</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">male</td><td align="center">168</td><td align="center">23</td></tr><tr><td align="center">1</td><td align="center">xiaohong</td><td align="center">female</td><td align="center">162</td><td align="center">22</td></tr><tr><td align="center">2</td><td align="center">xiaozhang</td><td align="center">female</td><td align="center">163</td><td align="center">21</td></tr><tr><td align="center">2</td><td align="center">xiaoli</td><td align="center">male</td><td align="center">158</td><td align="center">21</td></tr></tbody></table><h2 id="2-2-字典序列数据"><a href="#2-2-字典序列数据" class="headerlink" title="2.2 字典序列数据"></a>2.2 字典序列数据</h2><ul><li>headers :表头</li><li>rows :内容</li><li>f_csv = DictWriter(f,headers)</li><li>f_csv.writeheader()</li><li>f_csv.writerows(rows)</li></ul><pre class=" language-py"><code class="language-py">import csvheaders = ['class','name','sex','height','year']rows = [        {'class':1,'name':'xiaoming','sex':'male','height':168,'year':23},        {'class':1,'name':'xiaohong','sex':'female','height':162,'year':22},        {'class':2,'name':'xiaozhang','sex':'female','height':163,'year':21},        {'class':2,'name':'xiaoli','sex':'male','height':158,'year':21},    ]with open('test2.csv','w',newline='')as f:    f_csv = csv.DictWriter(f,headers)    f_csv.writeheader()    f_csv.writerows(rows)</code></pre><table><thead><tr><th align="center">class</th><th align="center">name</th><th align="center">sex</th><th align="center">height</th><th align="center">year</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">male</td><td align="center">168</td><td align="center">23</td></tr><tr><td align="center">1</td><td align="center">xiaohong</td><td align="center">female</td><td align="center">162</td><td align="center">22</td></tr><tr><td align="center">2</td><td align="center">xiaozhang</td><td align="center">female</td><td align="center">163</td><td align="center">21</td></tr><tr><td align="center">2</td><td align="center">xiaoli</td><td align="center">male</td><td align="center">158</td><td align="center">21</td></tr></tbody></table><h2 id="2-3-csv-文件的读"><a href="#2-3-csv-文件的读" class="headerlink" title="2.3 csv 文件的读"></a>2.3 csv 文件的读</h2><pre class=" language-py"><code class="language-py">import csvwith open('test.csv')as f:    f_csv = csv.reader(f)    for row in f_csv:        print(row)'''result['class', 'name', 'sex', 'height', 'year']['1', 'xiaoming', 'male', '168', '23']['1', 'xiaohong', 'female', '162', '22']['2', 'xiaozhang', 'female', '163', '21']['2', 'xiaoli', 'male', '158', '21']'''with open('test.csv')as f:    f_csv = csv.reader(f)    for row in f_csv:        print(row[0])'''resultclass1122'''</code></pre><blockquote><p>参考<a href="https://blog.csdn.net/katyusha1/article/details/81606175" target="_blank" rel="noopener" title="CSDN">网站</a></p></blockquote><h1 id="3-with-open-as-读写文件"><a href="#3-with-open-as-读写文件" class="headerlink" title="3. with open () as 读写文件"></a>3. with open () as 读写文件</h1><pre class=" language-py"><code class="language-py"># 读文件with open('file.txt','r',) as f:    print(f.read())# 不需调用f.close()# 如果文件过大则用read(size)比较保险# 如果文件是配置文件readlines()较为方便# 写文件with open('file.txt','w',encoding='utf-8') as f:    f.write('Hello World !')# 文本文件    encoding 字符编码：gbk，utf-8# 二进制文件  rb模式读取:图片,视频</code></pre><blockquote><p>参考<a href="https://blog.csdn.net/xrinosvip/article/details/82019844" target="_blank" rel="noopener" title="CSDN">网站</a></p></blockquote><h1 id="4-os-中创建文件夹"><a href="#4-os-中创建文件夹" class="headerlink" title="4. os 中创建文件夹"></a>4. os 中创建文件夹</h1><pre class=" language-py"><code class="language-py">import osmain_path = 'E:/os/'    #创建一个路径if not os.path.exists(main_path):   #如果该路径不存在    os.makedirs(main_path)  #则新建一个路径</code></pre><h1 id="5-将图片保存在文件夹中"><a href="#5-将图片保存在文件夹中" class="headerlink" title="5. 将图片保存在文件夹中"></a>5. 将图片保存在文件夹中</h1><pre class=" language-py"><code class="language-py">dir = '文件路径' + name +'.jpg'     #文件名url_get = requests.get(url)         #从url中获取图片信息with open(dir,'wb') as f:           #打开图片文件，保存图片信息    f.writer(url_get.content)</code></pre><h1 id="6-try…except-语句"><a href="#6-try…except-语句" class="headerlink" title="6. try…except 语句"></a>6. try…except 语句</h1><h2 id="6-1-语法"><a href="#6-1-语法" class="headerlink" title="6.1 语法"></a>6.1 <strong>语法</strong></h2><pre class=" language-py"><code class="language-py">#python 异常处理try:<语句>        #运行别的代码except <名字>：<语句>        #如果在try部份引发了'name'异常except <名字>，<数据>:<语句>        #如果引发了'name'异常，获得附加的数据else:<语句>        #如果没有异常发生</code></pre><h2 id="6-2-使用-except-而不带任何异常类型"><a href="#6-2-使用-except-而不带任何异常类型" class="headerlink" title="6.2 使用 except 而不带任何异常类型"></a>6.2 <strong>使用 except 而不带任何异常类型</strong></h2><pre class=" language-py"><code class="language-py">try:    正常的操作   ......................except:    发生异常，执行这块代码   ......................else:    如果没有异常执行这块代码</code></pre><p><strong>以上方式 try-except 语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常</strong></p><h2 id="6-3-使用-except-而带多种异常类型"><a href="#6-3-使用-except-而带多种异常类型" class="headerlink" title="6.3 使用 except 而带多种异常类型"></a>6.3 <strong>使用 except 而带多种异常类型</strong></h2><pre class=" language-py"><code class="language-py">try:    正常的操作   ......................except(Exception1[, Exception2[,...ExceptionN]]]):   发生以上多个异常中的一个，执行这块代码   ......................else:    如果没有异常执行这块代码</code></pre><h2 id="6-4-try-finally-语句"><a href="#6-4-try-finally-语句" class="headerlink" title="6.4 try-finally 语句"></a>6.4 <strong>try-finally 语句</strong></h2><pre class=" language-py"><code class="language-py">try:<语句>finally:<语句>    #退出try时总会执行raise</code></pre><h2 id="6-5-异常的参数"><a href="#6-5-异常的参数" class="headerlink" title="6.5 异常的参数"></a>6.5 <strong>异常的参数</strong></h2><pre class=" language-py"><code class="language-py">try:    正常的操作   ......................except ExceptionType, Argument:    你可以在这输出 Argument 的值...</code></pre><h2 id="6-6-用户自定义异常"><a href="#6-6-用户自定义异常" class="headerlink" title="6.6 用户自定义异常"></a>6.6 <strong>用户自定义异常</strong></h2><ul><li>通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自 Exception 类，通过直接或间接的方式</li><li>以下为与 RuntimeError 相关的实例,实例中创建了一个类，基类为 RuntimeError，用于在异常触发时输出更多的信息</li><li>在 try 语句块中，用户自定义的异常后执行 except 块语句，变量 e 是用于创建 Networkerror 类的实例</li></ul><pre class=" language-py"><code class="language-py">class Networkerror(RuntimeError):    def __init__(self, arg):        self.args = arg</code></pre><ul><li><strong>在你定义以上类后，你可以触发该异常，如下所示：</strong></li></ul><pre class=" language-py"><code class="language-py">try:    raise Networkerror("Bad hostname")except Networkerror,e:    print e.args</code></pre><table><thead><tr><th align="center">异常名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">BaseException</td><td align="center">所有异常的基类</td></tr><tr><td align="center">SystemExit</td><td align="center">解释器请求退出</td></tr><tr><td align="center">KeyboardInterrupt</td><td align="center">用户中断执行(通常是输入^C)</td></tr><tr><td align="center">Exception</td><td align="center">常规错误的基类</td></tr><tr><td align="center">StopIteration</td><td align="center">迭代器没有更多的值</td></tr><tr><td align="center">GeneratorExit</td><td align="center">生成器(generator)发生异常来通知退出</td></tr><tr><td align="center">StandardError</td><td align="center">所有的内建标准异常的基类</td></tr><tr><td align="center">ArithmeticError</td><td align="center">所有数值计算错误的基类</td></tr><tr><td align="center">FloatingPointError</td><td align="center">浮点计算错误</td></tr><tr><td align="center">OverflowError</td><td align="center">数值运算超出最大限制</td></tr><tr><td align="center">ZeroDivisionError</td><td align="center">除(或取模)零 (所有数据类型)</td></tr><tr><td align="center">AssertionError</td><td align="center">断言语句失败</td></tr><tr><td align="center">AttributeError</td><td align="center">对象没有这个属性</td></tr><tr><td align="center">EOFError</td><td align="center">没有内建输入,到达 EOF 标记</td></tr><tr><td align="center">EnvironmentError</td><td align="center">操作系统错误的基类</td></tr><tr><td align="center">IOError</td><td align="center">输入/输出操作失败</td></tr><tr><td align="center">OSError</td><td align="center">操作系统错误</td></tr><tr><td align="center">WindowsError</td><td align="center">系统调用失败</td></tr><tr><td align="center">ImportError</td><td align="center">导入模块/对象失败</td></tr><tr><td align="center">LookupError</td><td align="center">无效数据查询的基类</td></tr><tr><td align="center">IndexError</td><td align="center">序列中没有此索引(index)</td></tr><tr><td align="center">KeyError</td><td align="center">映射中没有这个键</td></tr><tr><td align="center">MemoryError</td><td align="center">内存溢出错误(对于 Python 解释器不是致命的)</td></tr><tr><td align="center">NameError</td><td align="center">未声明/初始化对象 (没有属性)</td></tr><tr><td align="center">UnboundLocalError</td><td align="center">访问未初始化的本地变量</td></tr><tr><td align="center">ReferenceError</td><td align="center">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td align="center">RuntimeError</td><td align="center">一般的运行时错误</td></tr><tr><td align="center">NotImplementedError</td><td align="center">尚未实现的方法</td></tr><tr><td align="center">SyntaxError Python</td><td align="center">语法错误</td></tr><tr><td align="center">IndentationError</td><td align="center">缩进错误</td></tr><tr><td align="center">TabError Tab</td><td align="center">和空格混用</td></tr><tr><td align="center">SystemError</td><td align="center">一般的解释器系统错误</td></tr><tr><td align="center">TypeError</td><td align="center">对类型无效的操作</td></tr><tr><td align="center">ValueError</td><td align="center">传入无效的参数</td></tr><tr><td align="center">UnicodeError Unicode</td><td align="center">相关的错误</td></tr><tr><td align="center">UnicodeDecodeError Unicode</td><td align="center">解码时的错误</td></tr><tr><td align="center">UnicodeEncodeError Unicode</td><td align="center">编码时错误</td></tr><tr><td align="center">UnicodeTranslateError Unicode</td><td align="center">转换时错误</td></tr><tr><td align="center">Warning</td><td align="center">警告的基类</td></tr><tr><td align="center">DeprecationWarning</td><td align="center">关于被弃用的特征的警告</td></tr><tr><td align="center">FutureWarning</td><td align="center">关于构造将来语义会有改变的警告</td></tr><tr><td align="center">OverflowWarning</td><td align="center">旧的关于自动提升为长整型(long)的警告</td></tr><tr><td align="center">PendingDeprecationWarning</td><td align="center">关于特性将会被废弃的警告</td></tr><tr><td align="center">RuntimeWarning</td><td align="center">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td align="center">SyntaxWarning</td><td align="center">可疑的语法的警告</td></tr><tr><td align="center">UserWarning</td><td align="center">用户代码生成的警告</td></tr></tbody></table><blockquote><p>参考<a href="https://www.runoob.com/python/python-exceptions.html" target="_blank" rel="noopener">教程</a></p></blockquote><h1 id="7-python-小知识点"><a href="#7-python-小知识点" class="headerlink" title="7. python 小知识点"></a>7. python 小知识点</h1><h2 id="7-1-换行符-‘-n’-和-回车符-‘-r’-的区别？"><a href="#7-1-换行符-‘-n’-和-回车符-‘-r’-的区别？" class="headerlink" title="7.1 换行符 ‘\n’ 和 回车符 ‘\r’ 的区别？"></a>7.1 换行符 ‘\n’ 和 回车符 ‘\r’ 的区别？</h2><pre><code>换行符就是另起一新行，光标在新行的开头；\n回车符就是光标回到一旧行的开头；(即光标目前所在的行为旧行)\r在解析文本或其他格式的文件内容时，常常要碰到判定回车式换行的地方这个时候就要注意既要判定"\r\n"又要判定"\n"。</code></pre><h2 id="7-2-Python-中-import-from…import-import…as-的区别"><a href="#7-2-Python-中-import-from…import-import…as-的区别" class="headerlink" title="7.2 Python 中 import, from…import,import…as 的区别"></a>7.2 Python 中 import, from…import,import…as 的区别</h2><pre class=" language-py"><code class="language-py">import datetimeprint(datetime.datetime.now())</code></pre><p>以上代码实现输出系统当前时间，是引入整个 datetime 包，然后再调用 datetime 这个类中的 now()方法</p><pre class=" language-py"><code class="language-py">from datetime import datetimeprint(datetime.now())</code></pre><p>这里是从 datetime 包中只导入 datetime 这个类，让后再调用 datetime 这个类中的 now()方法实现同样的目的</p><pre class=" language-py"><code class="language-py">import datetime as dtprint(dt.datetime.now())</code></pre><p>假如你嫌 datetime 这个包名称太长，想要给它取个别名，以后每次用到它的时候都用它的别名代替它，这时就需要用到 import…as</p><h2 id="7-3-Python中-n-、-m-、-1-、-1-、-1-、-2-1-和-1-的含义"><a href="#7-3-Python中-n-、-m-、-1-、-1-、-1-、-2-1-和-1-的含义" class="headerlink" title="7.3 Python中[ : n]、[m : ]、[-1]、[:-1]、[::-1]、[2::-1]和[1:]的含义"></a>7.3 Python中[ : n]、[m : ]、[-1]、[:-1]、[::-1]、[2::-1]和[1:]的含义</h2><pre class=" language-py"><code class="language-py">[m : ] 代表列表中的第m+1项到最后一项[ : n] 代表列表中的第一项到第n项import numpy as npa=[1,2,3.4,5]print(a)[ 1 2 3 4 5 ]print(a[-1])     取最后一个元素结果：[5]print(a[:-1])     除了最后一个取全部结果：[ 1 2 3 4 ]print(a[::-1])     取从后向前（相反）的元素结果：[ 5 4 3 2 1 ]print(a[2::-1])     取从下标为2的元素翻转读取结果：[ 3 2 1 ]print(a[1:])     取第二个到最后一个元素结果：[2 3 4 5]</code></pre><h2 id="7-4-python-浮点数保留几位小数"><a href="#7-4-python-浮点数保留几位小数" class="headerlink" title="7.4 python 浮点数保留几位小数"></a>7.4 python 浮点数保留几位小数</h2><pre class=" language-py"><code class="language-py">a = 5.026b = 5.000round(a,2)# 5.03round(b,2)# 5.0'%.2f' % a# '5.03''%.2f' % b# '5.00'float('%.2f' % a)# 5.03float('%.2f' % b)# 5.0</code></pre><h1 id="8-python-中陌生的函数"><a href="#8-python-中陌生的函数" class="headerlink" title="8. python 中陌生的函数"></a>8. python 中陌生的函数</h1><p><em>自己还不太熟悉的</em></p><h2 id="8-1-str-split-对字符串进行切片–返回一个列表"><a href="#8-1-str-split-对字符串进行切片–返回一个列表" class="headerlink" title="8.1 str.split() 对字符串进行切片–返回一个列表"></a>8.1 <code>str.split()</code> <strong>对字符串进行切片–返回一个列表</strong></h2><ul><li>语法<code>str.split(str="", num=string.count(str)).</code></li></ul><ul><li>str：分隔符，默认为所有的空字符，包括空格、换行、指标</li><li>num：分割次数，默认为-1，即分割所有</li></ul><pre class=" language-py"><code class="language-py"># exampletxt = "Google#Runoob#Taobao#Facebook"# 第二个参数为 1，返回两个参数列表x = txt.split("#", 1)print(x)         #['Google', 'Runoob#Taobao#Facebook']</code></pre><blockquote><p>参考教程：<a href="https://www.runoob.com/python/att-string-split.html" target="_blank" rel="noopener" title="runoob.com">RUNOOB</a></p></blockquote><h2 id="8-2-str-find-检测字符串中是否包含子字符串-str"><a href="#8-2-str-find-检测字符串中是否包含子字符串-str" class="headerlink" title="8.2 str.find() 检测字符串中是否包含子字符串 str"></a>8.2 <code>str.find()</code> <strong>检测字符串中是否包含子字符串 str</strong></h2><ul><li><em>如果包含子字符串返回开始的索引值，否则返回-1</em></li></ul><ul><li>语法<code>str.find(str, beg=0, end=len(string))</code></li><li>str – 指定检索的字符串</li><li>beg – 开始索引，默认为 0</li><li>end – 结束索引，默认为字符串的长度</li></ul><pre class=" language-py"><code class="language-py"># examplestr1 = "this is string example....wow!!!";str2 = "exam";print str1.find(str2);          #15print str1.find(str2, 10);      #15print str1.find(str2, 40);      #-1,查不到返回-1</code></pre><h2 id="8-3-string-join"><a href="#8-3-string-join" class="headerlink" title="8.3 string.join()"></a>8.3 <code>string.join()</code></h2><ul><li>语法 <code>'sep'.join(seq)</code><em>以 sep 作为分隔符，将 seq 所有的元素合并成一个新的字符串</em> <em>返回值：返回一个以分隔符 sep 连接各个元素后生成的字符串</em></li><li>sep：分隔符。可以为空</li><li>seq：要连接的元素序列、字符串、元组、字典</li></ul><pre class=" language-py"><code class="language-py">>>> seq1 = ['hello','good','boy','doiido'] #对序列操作>>> print ' '.join(seq1)hello good boy doiido>>> print ':'.join(seq1)hello:good:boy:doiido# 对字符串操作>>> seq2 = "hello good boy doiido">>> print ':'.join(seq2)h:e:l:l:o: :g:o:o:d: :b:o:y: :d:o:i:i:d:o# 对元组操作>>> seq3 = ('hello','good','boy','doiido')>>> print ':'.join(seq3)hello:good:boy:doiido# 对字典操作>>> seq4 = {'hello':1,'good':2,'boy':3,'doiido':4}>>> print ':'.join(seq4)boy:good:doiido:hello</code></pre><ul><li><strong>另一个 <code>os.path.join()</code></strong></li></ul><ul><li>语法 <code>os.path.join(path1[,path2[,......]])</code></li></ul><pre class=" language-py"><code class="language-py"> # 合并目录>>> import os>>> os.path.join('/hello/','good/boy/','doiido')'/hello/good/boy/doiido'</code></pre><blockquote><p>参考<a href="https://www.cnblogs.com/sui776265233/p/10755525.html" target="_blank" rel="noopener">博客网站</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github</title>
      <link href="/2020/02/09/github/"/>
      <url>/2020/02/09/github/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Github"><a href="#1-Github" class="headerlink" title="1. Github"></a>1. Github</h2><h3 id="1-1-搜索技巧"><a href="#1-1-搜索技巧" class="headerlink" title="1.1 搜索技巧"></a>1.1 搜索技巧</h3><h4 id="①-in-name-spring-boot"><a href="#①-in-name-spring-boot" class="headerlink" title="① in:name spring boot"></a>① in:name spring boot</h4><p>名字里带spring boot，在name中搜</p><h4 id="②-in-readme-spring-boot"><a href="#②-in-readme-spring-boot" class="headerlink" title="② in:readme spring boot"></a>② in:readme spring boot</h4><p>readme中带spring boot，在readme中搜</p><h4 id="③-in-description"><a href="#③-in-description" class="headerlink" title="③ in:description"></a>③ in:description</h4><p>在描述中搜</p><h4 id="④-stars-gt-3000"><a href="#④-stars-gt-3000" class="headerlink" title="④ stars:>3000"></a>④ stars:&gt;3000</h4><p>stars 多于3000的数据库</p><h4 id="⑤-forks-gt-3000"><a href="#⑤-forks-gt-3000" class="headerlink" title="⑤ forks:>3000"></a>⑤ forks:&gt;3000</h4><p>forks 多于3000的数据库</p><h4 id="⑥-language-java"><a href="#⑥-language-java" class="headerlink" title="⑥ language:java"></a>⑥ language:java</h4><p>java 语言的数据库</p><h4 id="⑦-push-gt-2019-02-01"><a href="#⑦-push-gt-2019-02-01" class="headerlink" title="⑦ push:>2019-02-01"></a>⑦ push:&gt;2019-02-01</h4><p>在2019.02.01以后有过更新的数据库</p><blockquote><p>在<a href="https://www.bilibili.com/video/av75587104" target="_blank" rel="noopener">大佬b站视频</a>中学习</p></blockquote><h2 id="2-Git"><a href="#2-Git" class="headerlink" title="2. Git"></a>2. Git</h2><h3 id="2-1-git使用"><a href="#2-1-git使用" class="headerlink" title="2.1 git使用"></a>2.1 git使用</h3><ul><li>git add .</li><li>git commit -m ‘title’</li><li>git push </li><li>git pull</li><li>git clone https://……..</li></ul><h3 id="2-2-gitignore文件"><a href="#2-2-gitignore文件" class="headerlink" title="2.2 .gitignore文件"></a>2.2 .gitignore文件</h3><table><thead><tr><th align="center">例子</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">/mtk</td><td align="center">过滤整个文件夹</td></tr><tr><td align="center">*.zip</td><td align="center">过滤所有.zip文件</td></tr><tr><td align="center">/mtk/do.c</td><td align="center">过滤某个具体文件</td></tr><tr><td align="center">!/mtk/one.txt</td><td align="center">追踪（不过滤）某个具体文件</td></tr></tbody></table><pre><code>配置语法以斜杠“/”开头表示目录；以星号“*”通配多个字符；以问号“?”通配单个字符以方括号“[]”包含单个字符的匹配列表；以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。注意： git 对于 .gitignore配置文件是按行从上到下进行规则匹配的</code></pre><ul><li><p><em>如果你创建.gitignore文件之前就push了某一文件，那么即使你在.gitignore文件中写入过滤该文件的规则，该规则也不会起作用，git仍然会对该文件进行版本管理</em></p></li><li><p><strong>.gitignore规则不生效</strong></p></li><li><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的*</p></li><li><p><strong>解决方法</strong></p></li><li><p><em>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交*</em></p><pre><code>git rm -r --cached .git add .git commit -m 'update .gitignore'</code></pre></li><li><p><strong>Git 忽略文件提交的三种方法</strong></p></li><li><p><strong>1、在Git项目中定义 .gitignore 文件</strong><br>这种方式通过在项目的某个文件夹下定义 .gitignore 文件，在该文件中定义相应的忽略规则，来管理当前文件夹下的文件的Git提交行为<br>在 .gitingore 文件中，遵循相应的语法，在每一行指定一个忽略规则</p></li><li><p><strong>2、在Git项目的设置中指定排除文件</strong><br>这种方式只是临时指定该项目的行为，需要编辑当前项目下的 .git/info/exclude 文件，然后将需要忽略提交的文件写入其中<br><em>这种方式指定的忽略文件的根目录是项目根目录</em></p></li><li><p><strong>3、定义Git全局的 .gitignore 文件</strong><br>除了可以在项目中定义 .gitignore 文件外，还可以设置全局的 git .gitignore 文件来管理所有Git项目的行为。这种方式在不同的项目开发者之间是不共享的，是属于项目之上Git应用级别的行为</p></li></ul><pre><code>Git 忽略规则匹配语法在 .gitignore 文件中，每一行的忽略规则的语法如下：空格不匹配任意文件，可作为分隔符，可用反斜杠转义# 开头的模式标识注释，可以使用反斜杠进行转义! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义/ 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件/ 开始的模式匹配项目跟目录如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录**匹配多级目录，可在开始，中间，结束?通用匹配单个字符[]通用匹配单个字符列表</code></pre><blockquote><p>作者：王伟desire<br>    链接：<a href="https://www.jianshu.com/p/74bd0ceb6182" target="_blank" rel="noopener">https://www.jianshu.com/p/74bd0ceb6182</a><br>    来源：简书<br>    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2020/02/08/markdown/"/>
      <url>/2020/02/08/markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="1-空格"><a href="#1-空格" class="headerlink" title="1. 空格"></a>1. 空格</h2><table><thead><tr><th align="center">语法</th><th align="center">example</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>ok&amp;nbsp;ok</code>&nbsp;</td><td align="center">ok&nbsp;ok</td><td align="center">它是按下 space 键产生的空格,叫不换行空格，全称是 No-Break Space</td></tr><tr><td align="center"><code>ok&amp;ensp;ok</code> </td><td align="center">ok ok</td><td align="center">等同于字体度的一半,叫“半角空格”，全称是 En Space</td></tr><tr><td align="center"><code>ok&amp;emsp;ok</code> </td><td align="center">ok ok</td><td align="center">1 em 在 16px 的字体中就是 16px,它叫“全角空格”，全称是 Em Space</td></tr><tr><td align="center"><code>ok&amp;thinsp;ok</code> </td><td align="center">ok ok</td><td align="center">“窄空格”，全称是 Thin Space。占据的宽度比较小。它是 em 之六分之一宽</td></tr><tr><td align="center"><code>ok&amp;zwj;ok</code>‍</td><td align="center">ok‍ok</td><td align="center">它叫零宽连字，全称是 Zero Width Joiner，简称“ZWJ”，是一个不打印字符</td></tr></tbody></table><blockquote><p>参考<a href="https://www.jianshu.com/p/31eade263e7a" target="_blank" rel="noopener" title="简书">网站</a></p></blockquote><h2 id="2-链接"><a href="#2-链接" class="headerlink" title="2. 链接"></a>2. 链接</h2><h3 id="2-1-行内式-方便简洁"><a href="#2-1-行内式-方便简洁" class="headerlink" title="2.1 行内式(方便简洁)"></a>2.1 行内式(方便简洁)</h3><p><code>[链接文字](链接网址 "标题")</code><br><code>This is an [example link](https://www.jianshu.com/p/31eade263e7a)</code><br>会显示为:&nbsp;This is an <a href="https://www.jianshu.com/p/31eade263e7a" target="_blank" rel="noopener">example link</a></p><h3 id="2-2-锚点"><a href="#2-2-锚点" class="headerlink" title="2.2 锚点"></a>2.2 锚点</h3><ul><li>第一种</li></ul><pre><code>- [测试](#测试)### &lt;a id="测试"&gt;测试&lt;/a&gt;</code></pre><ul><li><a href="#测试">测试</a></li></ul><ul><li>第二种</li></ul><pre><code>### &lt;a href="#测试2"&gt;测试2&lt;/a&gt;html&lt;a id="测试2"&gt;测试2&lt;/a&gt;</code></pre><ul><li><a href="#测试2">测试 2</a></li></ul><blockquote><p>参考<a href="https://blog.csdn.net/wangzhibo666/article/details/88731227" target="_blank" rel="noopener" title="CSDN">link</a></p></blockquote><h2 id="3-图片"><a href="#3-图片" class="headerlink" title="3. 图片"></a>3. 图片</h2><h3 id="3-1-网络图片的添加"><a href="#3-1-网络图片的添加" class="headerlink" title="3.1 网络图片的添加"></a>3.1 网络图片的添加</h3><pre><code>![alt 属性文本](图片地址)![alt 属性文本](图片地址 "可选标题")</code></pre><pre><code>![四月是你的谎言](https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=905665511,4125694826&amp;fm=26&amp;gp=0.jpg "四谎")</code></pre><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=905665511,4125694826&amp;fm=26&amp;gp=0.jpg" alt="四月是你的谎言" title="四谎"></p><h3 id="3-2-本地图片的添加"><a href="#3-2-本地图片的添加" class="headerlink" title="3.2 本地图片的添加"></a>3.2 本地图片的添加</h3><pre><code>![avatar](/img/picture_exam.jpeg "example")--or--&lt;img src="/img/picture_exam.jpeg " width = 10% height = 10% div align=right /&gt;# 或者是#&lt;img src="url" width = "100" height = "100" div align=left /&gt;</code></pre><p><img src="/img/picture_exam.jpeg" alt="avatar" title="example"><br><img src="/img/picture_exam.jpeg " width="10%" height="10%" div="" align="right"></p><h2 id="4-表格"><a href="#4-表格" class="headerlink" title="4. 表格"></a>4. 表格</h2><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><blockquote><p>参考教程:<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">markdown</a></p></blockquote><h2 id="5-设置字体大小颜色"><a href="#5-设置字体大小颜色" class="headerlink" title="5. 设置字体大小颜色"></a>5. 设置字体大小颜色</h2><pre><code>&lt;font face="黑体"&gt;我是黑体字&lt;/font&gt;&lt;font face="微软雅黑"&gt;我是微软雅黑&lt;/font&gt;&lt;font face="STCAIYUN"&gt;我是华文彩云&lt;/font&gt;&lt;font color=#0099ff size=7 face="黑体"&gt;color=#0099ff size=72 face="黑体"&lt;/font&gt;&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;&lt;font color=gray size=72&gt;color=gray&lt;/font&gt;</code></pre><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="7" face="黑体">color=#0099ff size=72 face=”黑体”</font><br><font color="#00ffff" size="72">color=#00ffff</font><br><font color="gray" size="72">color=gray</font></p><ul><li><a id="测试">锚点测试</a></li><li><a id="测试2">锚点测试 2</a><blockquote><p>参考网站:<a href="https://blog.csdn.net/weixin_37998647/article/details/79428290" target="_blank" rel="noopener" title="CSDN">CSDN</a></p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spider_note</title>
      <link href="/2020/02/08/spider/"/>
      <url>/2020/02/08/spider/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考 Github 上的<a href="https://github.com/kingname/SourceCodeOfBook" target="_blank" rel="noopener" title="Github">教程</a>学习<br>一个连 python 都没有完全学会的菜鸡来学爬虫</p></blockquote><a id="more"></a><h1 id="1-线程"><a href="#1-线程" class="headerlink" title="1. 线程"></a>1. 线程</h1><h2 id="1-1-线程-Pool"><a href="#1-1-线程-Pool" class="headerlink" title="1.1 线程 Pool"></a>1.1 线程 Pool</h2><pre class=" language-py"><code class="language-py">from multiprocessing.dummy import Pooldef calc_power2(num):return num*numpool = Pool(5)origin_num = [x for x in range(10)]result = pool.map(calc_power2,origin_num)print(f'0~9的平方分别为：{result}')</code></pre><p><code>Pool(5)</code>  五个线程</p><hr><h2 id="1-2-所用函数"><a href="#1-2-所用函数" class="headerlink" title="1.2 所用函数"></a>1.2 所用函数</h2><p><code>time.time()</code> &nbsp; 程序当前时间<br>eg：用来对比单线程和多线程访问 baidu 的速度</p><h1 id="2-request-库"><a href="#2-request-库" class="headerlink" title="2. request 库"></a>2. request 库</h1><h2 id="2-1-基础用法"><a href="#2-1-基础用法" class="headerlink" title="2.1 基础用法"></a>2.1 基础用法</h2><pre class=" language-py"><code class="language-py">url = ''headers = {    "UserAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like\ Gecko) Chrome/80.0.3987.87 Safari/537.36 Edg/80.0.361.48"}response = requests.get(url,headers=headers)response.encoding = 'utf-8'  #或者GBKhtml = response.text</code></pre><h2 id="2-2-进阶用法"><a href="#2-2-进阶用法" class="headerlink" title="2.2 进阶用法"></a>2.2 进阶用法</h2><ul><li><strong>使用 requests 模拟发送 get 请求</strong></li></ul><pre class=" language-py"><code class="language-py">import requestsurl = 'http://exercise.kingname.info/ajax_1_backend'html = requests.get(url).content.decode()print(html)# 如果你看到这一段文字，说明你已经成功访问了这个页面,并获取了GET方式的异步加载数据。</code></pre><ul><li><strong>使用 requests 模拟发送 post 请求</strong></li></ul><pre class=" language-py"><code class="language-py">import requestsurl = 'http://exercise.kingname.info/ajax_1_postbackend'html = requests.post(url,json={'name':'yunq','age':24}).content.decode()print(html)# 如果你看到这一段文字，说明你已经成功访问了这个页面，并获取了POST方式的异步加载数据。你向服务器提交的两个参数，分别为name： yunq, age：24</code></pre><blockquote><p>参考<a href="http://exercise.kingname.info/exercise_ajax_1.html" target="_blank" rel="noopener">学习网站</a>，(<a href="#异步GET与POST请求">异步 GET 与 POST 请求</a>)</p></blockquote><h1 id="3-re-库"><a href="#3-re-库" class="headerlink" title="3. re 库"></a>3. re 库</h1><h2 id="3-1-基础用法"><a href="#3-1-基础用法" class="headerlink" title="3.1 基础用法"></a>3.1 基础用法</h2><pre class=" language-py"><code class="language-py">re.findall(r'',html,re.S)   #返回一个列表，这是一个列表所以可以取第一个数据                            #re.findall(r'',html,re.S)[0]re.search(r'',html,re.S)    #返回一个re.Match类型数据                            #<re.Match object; span=(214, 297), match='secret = \'{"code": "\\u884c\\u52a8\\u4ee3\\u53f7>re.search(r'href="sf">(.*?)<').group()                            #返回一个字符串             #.*?是匹配到的内容                            #group()返回的是''内的字符串内容:href="sf">(.*?)<                            #group(1)返回的是()中的字符串内容:.*?                            #如果(.*?)有多个，则使用group(1),group(2)........</code></pre><h1 id="4-正则表达式"><a href="#4-正则表达式" class="headerlink" title="4. 正则表达式"></a>4. 正则表达式</h1><p><code>.*?</code></p><h1 id="5-Xpath–lxml-库"><a href="#5-Xpath–lxml-库" class="headerlink" title="5. Xpath–lxml 库"></a>5. Xpath–lxml 库</h1><ul><li>XPath 是一种查询语言，能从 XML\HTML 的树状结构中寻找节点</li></ul><h2 id="5-1-XPath-语法"><a href="#5-1-XPath-语法" class="headerlink" title="5.1 XPath 语法"></a>5.1 XPath 语法</h2><h3 id="5-1-1-XPath-语法解析"><a href="#5-1-1-XPath-语法解析" class="headerlink" title="5.1.1 XPath 语法解析"></a>5.1.1 XPath 语法解析</h3><pre class=" language-html"><code class="language-html">example_html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useful<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我需要的信息1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我需要的信息2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我需要的信息3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useless<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>垃圾1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>垃圾2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><code>info = selector.xpath('//div[@class="useful"]/ul/li/text()')</code><br>就可以提取出 class=”userful”中的三句话，返回一个列表</p><h3 id="5-1-2-基本框架"><a href="#5-1-2-基本框架" class="headerlink" title="5.1.2 基本框架"></a>5.1.2 基本框架</h3><pre class=" language-py"><code class="language-py">import lxml.htmlselector = lxml.html.fromstring('网页源代码')    #网页源代码可用requests来获取info = selector.xpath('一段XPath语句')</code></pre><h3 id="5-1-3-example"><a href="#5-1-3-example" class="headerlink" title="5.1.3 example"></a>5.1.3 example</h3><pre class=" language-py"><code class="language-py">import lxml.htmlsource = '''<html>    <head>         <title>测试</title>    </head>    <body>         <div class="useful"> <ul>                   <li class="info">我需要的信息1</li>                   <li class="info">我需要的信息2</li>                   <li class="info">我需要的信息3</li> </ul>         </div>         <div class="useless">              <ul>                   <li class="info">垃圾1</li>                   <li class="info">垃圾2</li>              </ul>         </div>     </body></html>'''selector = lxml.html.fromstring(source)info = selector.xpath('//div[@class="useful"]/ul/li/text()')print(info)         #['我需要的信息1', '我需要的信息2', '我需要的信息3']</code></pre><hr><ul><li>a.<strong>XPath 语句格式</strong><br><code>info = selector.xpath('一段XPath语句')</code>中’一段 XPath 语句’的格式<br>核心思想：XPath 就是写地址<br>获取文本：<code>//标签1[@属性1="属性值1"]/标签2[@属性2="属性值2"]/..../text()</code><br>获取属性值：<code>//标签1[@属性1="属性值1"]/标签2[@属性2="属性值2"]/..../@属性n</code><br>其中的<code>[@属性="属性值"]</code>不是必需的，其作用是帮助过滤相同的标签，无相同标签可省略</li><li>b.<strong>标签 1 的选取</strong><br>标签 1 可以直接从 html 这个最外层的标签开始，一层一层往下找，这个时候，XPath 语句是这样的：<br><code>/html/body/div[@class="useful"]/ul/li/text()</code><br>但是由于前面的’/html/body’是所有 HTML 通用的，而且没有属性，所以可不写，即带属性标签前的标签都可以省略</li><li>c.<strong>可以省略的属性</strong><br>1、本身标签没有属性<br>2、这个标签所有的属性值相同</li><li>d.<strong>XPath 的特殊情况</strong><br>1、以相同字符串开头<code>标签[starts-with(@属性,"开头字符串")]</code></li></ul><pre class=" language-py"><code class="language-py">    <div id="test-1">需要的内容1</div>    <div id="test-2">需要的内容2</div>    <div id="testfault">需要的内容3</div>    <div id="useless">这是我不需要的内容</div>    content = selector.xpath('//div[starts-with(@id,"test")]/text()')    print(content)      #['需要的内容1','需要的内容3','需要的内容2']</code></pre><p>2、属性值包含相同字符串<code>标签[contains(@属性,"相同字符串")]</code><br>3、对 XPath 返回的对象执行 XPath</p><pre class=" language-py"><code class="language-py">useful = selector.xpath('//div[@class="useful"]')   #这里返回一个列表info_list = useful[0].xpath('ul/li/text()')         #useful[0]即为列表中第一个数据print(info_list)</code></pre><p>4、不同标签下的文字</p><pre class=" language-py"><code class="language-py">import lxml.htmlhtml = '''<!DOCTYPE html><html><head lang="en">    <meta charset="UTF-8">    <title></title></head><body><div id="test3">        我左青龙，        <span id="tiger">        右白虎，            <ul>上朱雀，                <li>下玄武。</li>            </ul>        老牛在当中，        </span>        龙头在胸口。    </div></body></html>'''#如果直接提取id="test3"selector = lxml.html.fromstring(html)content_1 = selector.xpath('//div[@id="test3"]/text()')print(content_1)   #['\n        我左青龙，\n        ', '\n        龙头在胸口。\n    ']#只会提取到div标签中的文字信息，而不会自动提取子标签中的信息#这时就需要用string(.)关键字了selector = lxml.html.fromstring(html)data = selector.xpath('//div[@id="test3"]')[0]info = data.xpath('string(.)')print(info)     #就可以提取出所有的文本信息了</code></pre><h2 id="5-2-XPath-通过-chrome-辅助构造"><a href="#5-2-XPath-通过-chrome-辅助构造" class="headerlink" title="5.2 XPath 通过 chrome 辅助构造"></a>5.2 XPath 通过 chrome 辅助构造</h2><p>在一行源码单击右键，选择“Copy”→“Copy XPath”命令<br>把结果粘贴下来，可以看到如下的 XPath 语句：<br><code>//*[@id="thread_list"]/li[2]/div/div[2]/div[1]/div[1]/a</code><br><em>其中方括号中的数字，表示这是第几个该标签，但需要注意，这里的数字是从 1 开始</em></p><h1 id="6-Beautiful-Soup4-库-BS4"><a href="#6-Beautiful-Soup4-库-BS4" class="headerlink" title="6. Beautiful Soup4 库(BS4)"></a>6. Beautiful Soup4 库(BS4)</h1><p><em>BS4 在某些方面比 XPath 易懂，但是不如 XPath 简洁，而且由于它是使用 Python 开发的，因此速度比 XPath 慢。</em><br>使用 Beautiful Soup4 提取 HTML 内容，一般要经过以下两步。</p><h2 id="6-1-bs4-处理步骤"><a href="#6-1-bs4-处理步骤" class="headerlink" title="6.1 bs4 处理步骤"></a>6.1 bs4 处理步骤</h2><ul><li>1)处理源代码生成 BeautifulSoup 对象。<br>解析源代码生成 BeautifulSoup 对象，使用以下代码：<br><code>soup = BeautifulSoup(网页源代码, '解析器')</code><br>解析器：<br>这里的“解析器”，可以使用 html.parser：<br><code>soup = BeautifulSoup(source, 'html.parser')</code><br>如果安装了 lxml，还可以使用 lxml：<br><code>soup = BeautifulSoup(source, 'lxml')</code></li><li>2)使用 find<em>all()或者 find()来查找内容。<br>`soup.find(class</em>=’属性值’)`<br><em>由于 HTML 中的 class 属性与 Python 的 class 关键字相同，因此为了不产生冲突，BS4 规定，如果遇到要查询 class 的情况，使用“class_”来代替</em></li></ul><h2 id="6-2-example"><a href="#6-2-example" class="headerlink" title="6.2 example"></a>6.2 <a href="http://exercise.kingname.info/exercise_bs_1.html" target="_blank" rel="noopener">example</a></h2><pre class=" language-py"><code class="language-py">import requestfrom bs4 import BeautifulSouphtml = requests.get('http://exercise.kingname.info/exercise_bs_1.html').content.decode()# 1、解析源代码soup = BeautifulSoup(html,'lxml')# 2、查找内容info = soup.find(class_= 'test')print(info.string)      #我需要的信息2# 先抓大，再抓小useful = soup.find(class_='useful')all_content = useful.find_all('li')for li in all_content:    print(li.string)        #我需要的信息1                            #我需要的信息2                            #我需要的信息3    print(li)               #<li class="info">我需要的信息1</li>                            #<li class="test">我需要的信息2</li>                            #<li class="iamstrange">我需要的信息3</li>    print(li['class'])      #['info']                            #['test']                            #['iamstrange']</code></pre><ul><li>其他查找方法<br><strong>以‘我需要’为开头的信息</strong><br><code>content = soup.find_all(text = re.compile('我需要'))</code><br><strong>对属性值搜素使用正则,即对 iamstrang 属性值搜索</strong></li></ul><pre class=" language-py"><code class="language-py">content = soup.find_all(class_=re.compile('iam'))[0]print(content.string)       #我需要的信息3</code></pre><h1 id="7-异步加载与请求头"><a href="#7-异步加载与请求头" class="headerlink" title="7. 异步加载与请求头"></a>7. 异步加载与请求头</h1><h2 id="7-1-异步加载"><a href="#7-1-异步加载" class="headerlink" title="7.1 异步加载"></a>7.1 异步加载</h2><p><em>异步加载：一个页面，点击后网址不变，页面改变</em></p><h3 id="7-1-1-AJAX-技术"><a href="#7-1-1-AJAX-技术" class="headerlink" title="7.1.1 AJAX 技术"></a>7.1.1 AJAX 技术</h3><ul><li>AJAX 是 Asynchronous JavaScript And XML 的首字母缩写，意为异步 JavaScript 与 XML</li><li>使用 AJAX 技术，可以在不刷新网页的情况下更新网页数据。使用 AJAX 技术的网页，一般会使用 HTML 编写网页的框架。</li><li>在打开网页的时候，首先加载的是这个框架。剩下的部分将会在框架加载完成以后再通过 JavaScript 从后台加载。</li></ul><h3 id="7-1-2-JSON"><a href="#7-1-2-JSON" class="headerlink" title="7.1.2 JSON"></a>7.1.2 JSON</h3><ul><li>JSON 的全称是 JavaScript Object Notation，是一种轻量级的数据交换格式。网络之间使用 HTTP 方式传递数据的时候，绝大多数情况下传递的都是字符串。</li><li>因此，当需要把 Python 里面的数据发送给网页或者其他编程语言的时候，可以先将 Python 的数据转化为 JSON 格式的字符串，然后将字符串传递给其他语言，其他语言再将 JSON 格式的字符串转换为它自己的数据格式</li><li><strong>列表\字典与字符串相互转化</strong></li><li><em>python 中字典 or 列表 与 json 格式字符串的相互转化</em></li></ul><pre class=" language-py"><code class="language-py">import jsondata = {    'name' : 'Connor',    'sex' : 'boy',    'age' : 26}print(data)     #dict   #{'name': 'Connor', 'sex': 'boy', 'age': 26}data1=json.dumps(data)print(data1)    #str    #{"name": "Connor", "sex": "boy", "age": 26}data2=json.loads(data1)print(data2)    #dict   #{'name': 'Connor', 'sex': 'boy', 'age': 26}# 如果加上indent=4参数data3 = json.dumps(data,indent=4)print(data3)    #str#结果更加的美观易读'''{    "name": "Connor",    "sex": "boy",    "age": 26}'''</code></pre><ul><li><strong>str=json.dumps(dict)</strong></li><li><strong>dict=json.loads(str)</strong></li></ul><h3 id="7-1-3-异步-GET-与-POST-请求"><a href="#7-1-3-异步-GET-与-POST-请求" class="headerlink" title="7.1.3 异步 GET 与 POST 请求"></a>7.1.3 异步 GET 与 POST 请求</h3><ul><li>使用异步加载技术的网站，被加载的内容是不能在源代码中找到的。</li><li>为了解决这个问题，就需要使用 Google Chrome 浏览器的开发者模式。在网页上单击右键，选择“检查”命令，然后定位到“Network”选项卡</li><li>接下来需要刷新网页。在 Windows 下，按 F5 键或者单击地址栏左边的“刷新”按钮</li><li>单击“Network”选项卡下面出现的“ajax_1_backend”和“ajax_1_postbackend”，并定位到“Response”选项卡，可以看到这里出现了网页上面的内容</li><li>再选择“Headers”选项卡，可以看到这个请求使用 GET 方式，发送到<a href="http://exercise.kingname.info/ajax_1_backend" target="_blank" rel="noopener">http://exercise.kingname.info/ajax_1_backend</a></li><li>对于网页中的第 2 条内容，查看“Headers”选项卡，可以看到，这是使用 POST 方式向<a href="http://exercise.kingname.info/ajax_1_postbackend" target="_blank" rel="noopener">http://exercise.kingname.info/ajax_1_postbackend</a> 发送请求，并以 JSON 格式提交数据<blockquote><p>具体代码实现看<em>request</em>&nbsp;&nbsp;的<strong><a href="#进阶用法">进阶用法</a></strong></p></blockquote></li></ul><h3 id="7-1-4-特殊的异步加载"><a href="#7-1-4-特殊的异步加载" class="headerlink" title="7.1.4 特殊的异步加载"></a>7.1.4 特殊的异步加载</h3><ul><li><strong><a href="http://exercise.kingname.info/exercise_ajax_2.html" target="_blank" rel="noopener">练习页面</a></strong></li></ul><ul><li>伪装成异步加载的后端渲染,数据就在源代码里，但却不直接显示出来</li><li>源代码最下面的 JavaScript 代码，其中有一段：<br><code>{"code": "\u884c\u52a8\u4ee3\u53f7\uff1a\u5929\u738b\u76d6\u5730\u864e"}</code></li><li>使用 Python 去解析，发现可以得到网页上面的内容</li></ul><pre class=" language-py"><code class="language-py">import jsonhtml_json = '{"code": "\u884c\u52a8\u4ee3\u53f7\uff1a\u5929\u738b\u76d6\u5730\u864e"}'html_dic = json.loads(html_json)print(html_dic)      #{'code': '行动代号：天王盖地虎'}</code></pre><ul><li><strong>这种假的异步加载页面，其处理思路一般是使用正则表达式从页面中把数据提取出来，然后直接解析</strong></li></ul><pre class=" language-py"><code class="language-py">import jsonimport requestsimport reurl = 'http://exercise.kingname.info/exercise_ajax_2.html'html = requests.get(url).content.decode()code_json = re.search("secret = '(.*?)'", html, re.S).group(1)code_dict = json.loads(code_json)print(code_dict['code'])#行动代号：天王盖地虎</code></pre><h3 id="7-1-5-多次请求的异步加载"><a href="#7-1-5-多次请求的异步加载" class="headerlink" title="7.1.5 多次请求的异步加载"></a>7.1.5 多次请求的异步加载</h3><ul><li><strong><a href="http://exercise.kingname.info/exercise_ajax_3.html" target="_blank" rel="noopener">练习页面</a></strong></li></ul><ul><li>还有一些网页，显示在页面上的内容要经过多次异步请求才能得到。</li><li>第 1 个 AJAX 请求返回的是第 2 个请求的参数，第 2 个请求的返回内容又是第 3 个请求的参数，只有得到了上一个请求里面的有用信息，才能发起下一个请求</li><li>在“Headers”选项卡查看这个 POST 请求的具体参数，在 body 里面发现两个奇怪的参数 secret1 和 secret2</li><li>尝试修改 secret1 和 secret2，发现 POST 请求无法得到想要的结果<br><strong>奇怪的参数</strong></li></ul><pre><code>name: "xx"age: 24secret1: "kingname is genius."secret2: "kingname"</code></pre><p><strong>如果修改这两个参数</strong></p><pre class=" language-py"><code class="language-py">import jsonimport requestsurl = 'http://exercise.kingname.info/ajax_3_postbackend'return_json_1 = requests.post(url,json={"name":"xx","age":"24","secret1":"123","secret2":"456"})return_json_2 = requests.post(url,json={"name" :"xx","age":23})print(json.loads(return_json_1.content.decode()))   #{'success': False, 'reason': '参数错误'}print(json.loads(return_json_2.content.decode()))   #{'success': False, 'reason': '参数不全'}</code></pre><ul><li>打开这个练习页的源代码，在源代码中可以找到 secret_2</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>exercise ajax load<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> secret_2 <span class="token operator">=</span> <span class="token string">"kingname"</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static/js/jquery-3.2.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static/js/loaddata_3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>虽然在 POST 参数中，名字是 secret2，而源代码中的名字是 secret_2，不过从值可以看出这就是同一个参数</li><li>源代码里面没有 secret1，因此就要考虑这个参数是不是来自于另一个异步请求</li><li>继续在开发者工具中查看其他请求，可以成功找到 secret1,注意，它的名字变为了“code”，但是从值可以看出这就是 secret1</li></ul><ul><li><strong>不少网站也会使用这种改名字的方式来迷惑爬虫开发者</strong></li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>code<span class="token punctuation">:</span> <span class="token string">"kingname is genius."</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>code<span class="token punctuation">:</span> <span class="token string">"kingname is genius."</span>success<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre><ul><li>这一条请求就是一个不带任何参数的 GET 请求</li><li><em>对于这种多次请求才能得到数据的情况，解决办法就是逐一请求，得到返回结果以后再发起下一个请求。具体到这个例子中，那就是先从源代码里面获得 secret2，再通过 GET 请求得到 secret1，最后使用 secret1 和 secret2 来获取页面上显示的内容</em></li></ul><ul><li><strong>[爬取网站]<a href="http://exercise.kingname.info/exercise_ajax_3.html" target="_blank" rel="noopener">http://exercise.kingname.info/exercise_ajax_3.html</a>)</strong></li></ul><pre class=" language-py"><code class="language-py">import jsonimport requestsimport reurl = 'http://exercise.kingname.info/exercise_ajax_3.html'first_ajax_url = 'http://exercise.kingname.info/ajax_3_backend'second_ajax_url = 'http://exercise.kingname.info/ajax_3_postbackend'page_html = requests.get(url).content.decode()secret_2 = re.search("secret_2 = '(.*?)';",page_html,re.S).group(1)print(secret_2)           #kingnameajax_1_json = requests.get(first_ajax_url).content.decode()print(ajax_1_json)        #{"code": "kingname is genius.", "success": true}ajax_1_dict = json.loads(ajax_1_json)secret_1 = ajax_1_dict['code']print(secret_1)           #kingname is genius.# 获取了secret_1和secret_2后post请求second_ajax_urlajax_2_json = requests.post(second_ajax_url,json={    'name':'yq','age':24,'secret1':secret_1,'secret2':secret_2}).content.decode()print(ajax_2_json)          #{"code": "\u884c\u52a8\u4ee3\u53f7\uff1a\u54ce\u54df\u4e0d\u9519\u54e6", "success": true}ajax_2_dict = json.loads(ajax_2_json)print(ajax_2_dict)          #{'code': '行动代号：哎哟不错哦', 'success': True}code = ajax_2_dict['code']print(code)                 #行动代号：哎哟不错哦</code></pre><h3 id="7-1-6-基于异步加载的简单登录"><a href="#7-1-6-基于异步加载的简单登录" class="headerlink" title="7.1.6 基于异步加载的简单登录"></a>7.1.6 基于异步加载的简单登录</h3><ul><li><strong><a href="http://exercise.kingname.info/exercise_ajax_4.html" target="_blank" rel="noopener">练习页面</a></strong></li></ul><ul><li>网站的登录方式有很多种，其中有一种比较简单的方式，就是使用 AJAX 发送请求来进行登录</li><li>在<a href="http://exercise.kingname.info/exercise_ajax_4.html" target="_blank" rel="noopener">练习页面</a>中根据输入框中的提示，使用用户名“kingname”和密码“genius”进行登录,登录成功以后弹出提示框</li><li><strong>对于这种简单的登录功能，可以使用抓取异步加载网页的方式来进行处理</strong></li><li>在 Chrome 开发者工具中可以发现，当单击“登录”按钮时，网页向后台发送了一条请求<br><strong><code>{"code": "kingname is genius", "success": true}</code></strong></li></ul><pre class=" language-py"><code class="language-py">import requestsimport jsonurl = 'http://exercise.kingname.info/ajax_4_backend'code_json = requests.post(url,json={    'username':'kingname','password':'genius'}).content.decode()code__dict = json.loads(code_json)print(code__dict['code'])# kingname is genius</code></pre><ul><li>这就是使用 POST 方式的最简单的 AJAX 请求。使用获取 POST 方式的 AJAX 请求的代码，就能成功获取到登录以后返回的内容</li></ul><h2 id="7-2-请求头"><a href="#7-2-请求头" class="headerlink" title="7.2 请求头"></a>7.2 请求头</h2><h3 id="7-2-1-请求头的作用"><a href="#7-2-1-请求头的作用" class="headerlink" title="7.2.1 请求头的作用"></a>7.2.1 请求头的作用</h3><ul><li>使用计算机网页版外卖网站的读者应该会发现这样一个现象：第一次登录外卖网页的时候会让你选择当前所在的商业圈，一旦选定好之后关闭浏览器再打开，网页就会自动定位到先前选择的商业圈</li><li>又比如，例如携程的网站，使用计算机浏览器打开的时候，页面看起来非常复杂多样</li><li>同一个网址，使用手机浏览器打开时，网址会自动发生改变，而且得到的页面竟然完全不同<br><strong>同一个网址，PC 端和手机端页面不同</strong></li></ul><ul><li>Headers 称为请求头，浏览器可以将一些信息通过 Headers 传递给服务器，服务器也可以将一些信息通过 Headers 传递给浏览器，电商网站常常应用的 Cookies 就是 Headers 里面的一个部分</li></ul><h3 id="7-2-2-伪造请求头"><a href="#7-2-2-伪造请求头" class="headerlink" title="7.2.2 伪造请求头"></a>7.2.2 伪造请求头</h3><ul><li>打开<a href="http://exercise.kingname.info/exercise_headers.html" target="_blank" rel="noopener">练习页</a>，使用 Chrome 的开发者工具监控这个页面的网页请求</li><li>页面看起来像是发起了一个普通的 GET 方式的异步请求给<a href="http://exercise.kingname.info/exercise_headers_backend" target="_blank" rel="noopener">http://exercise.kingname.info/exercise_headers_backend</a></li><li>使用 requests 尝试获取这个网址的返回信息,结果发现失败</li><li>使用浏览器访问网站的时候，网站可以看到一个名称为 Headers（请求头）的东西</li></ul><pre class=" language-js"><code class="language-js">headers <span class="token operator">=</span> <span class="token punctuation">{</span>            Accept<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span>            Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflate            Accept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>en<span class="token operator">-</span>US<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>en<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.7</span>            anhao<span class="token punctuation">:</span> kingname            Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json<span class="token punctuation">;</span> charset<span class="token operator">=</span>utf<span class="token number">-8</span>            Cookie<span class="token punctuation">:</span> __cfduid<span class="token operator">=</span>d513aff6c34f63c4c2971cdf1e19780051581303763            Host<span class="token punctuation">:</span> exercise<span class="token punctuation">.</span>kingname<span class="token punctuation">.</span>info            Proxy<span class="token operator">-</span>Connection<span class="token punctuation">:</span> keep<span class="token operator">-</span>alive            Referer<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>exercise<span class="token punctuation">.</span>kingname<span class="token punctuation">.</span>info<span class="token operator">/</span>exercise_headers<span class="token punctuation">.</span>html            User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> WOW64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">79.0</span><span class="token punctuation">.</span><span class="token number">3945.79</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>            X<span class="token operator">-</span>Requested<span class="token operator">-</span>With<span class="token punctuation">:</span> XMLHttpRequest            <span class="token punctuation">}</span></code></pre><ul><li>为了解决这个问题，就需要给爬虫“换头”。把浏览器的头安装到爬虫的身上，这样网站就不知道谁是谁了</li><li>要换头，首先就需要知道浏览器的头是什么样的。因此需要在 Chrome 浏览器开发者工具的“Network”选项卡的 Request Headers 里面观察这一次请求的请求头</li><li>在 requests 里面，设置请求头的参数名称为“headers”，它的值是一个字典<br><strong>带有请求头的请求，使用 requests 的发送格式为：</strong></li></ul><pre class=" language-py"><code class="language-py">html = requests.get(url, headers=字典).content.decode()html = requests.post(url, json=xxx, headers=字典).content.decode()</code></pre><ul><li>代码中的字典就对应了浏览器中的请求头</li><li>在爬虫里面创建一个字典，将 Chrome 的请求头的内容复制进去，并调整好格式，发起一个带有 Chrome 请求头的爬虫请求，可以发现请求获得成功</li><li>虽然对于某些网站，在请求头里面只需要设置 User-Agent 就可以正常访问了，但是为了保险起见，还是建议把所有项目都带上，这样可以让爬虫更“像”浏览器</li></ul><h2 id="7-3-模拟浏览器"><a href="#7-3-模拟浏览器" class="headerlink" title="7.3 模拟浏览器"></a>7.3 模拟浏览器</h2><ul><li><strong><a href="http://exercise.kingname.info/exercise_advanced_ajax.html" target="_blank" rel="noopener">练习页面</a></strong></li><li><em>问题：</em></li><li>有一些网站在发起 AJAX 请求的时候，会带上特殊的字符串用于身份验证。这种字符串称为 Token</li><li>打开练习页面，这个页面在发起 AJAX 请求的时候会在 Headers 中带上一个参数 ReqTime；在 POST 发送的数据中会有一个参数 sum</li><li>多次刷新页面，可以发现 ReqTime 和 sum 一直在变化</li><li>不难看出 ReqTime 是精确到毫秒的时间戳，即使使用 Python 生成了一个时间戳，也不能得到网页上面的内容</li></ul><h3 id="7-3-1-Selenium-介绍"><a href="#7-3-1-Selenium-介绍" class="headerlink" title="7.3.1 Selenium 介绍"></a>7.3.1 Selenium 介绍</h3><ul><li>虽然在网页的源代码中无法看到被异步加载的内容，但是在 Chrome 的开发者工具的“Elements”选项卡下却可以看到网页上的内容</li></ul><h3 id="7-3-2-selenium-安装"><a href="#7-3-2-selenium-安装" class="headerlink" title="7.3.2 selenium 安装"></a>7.3.2 selenium 安装</h3><ul><li>安装 selenium <code>pip install selenium</code></li><li>下载 ChromeDriver</li></ul><h3 id="7-3-3-selenium-的使用"><a href="#7-3-3-selenium-的使用" class="headerlink" title="7.3.3 selenium 的使用"></a>7.3.3 selenium 的使用</h3><h4 id="7-3-3-1-获取源代码"><a href="#7-3-3-1-获取源代码" class="headerlink" title="7.3.3.1 获取源代码"></a>7.3.3.1 获取源代码</h4><ul><li><strong>将 chromedriver 与代码放在同一个文件夹中以方便代码直接调用</strong></li></ul><pre class=" language-py"><code class="language-py"># 初始化seleniumfrom selenium import webdriverdriver = webdriver.Chrome('./chromedriver')</code></pre><ul><li>指定了 Selenium 使用 ChromeDriver 来操作 Chrome 解析网页，括号里的参数就是 ChromeDriver 可执行文件的地址</li></ul><ul><li>如果要使用 PhantomJS，只需要修改第 3 行代码即可：driver = webdriver.PhantomJS(‘./phantomjs’)，需要将 PhantomJS 的可执行文件与代码放在一起</li><li>需要特别提醒的是，如果 chromedriver 与代码不在一起，可以通过绝对路径来指定，例如：driver = webdriver.Chrome(‘/usr/bin/chromedriver’)</li><li>使用 Windows 的读者可在路径字符串左引号的左边加一个“r”符号，将代码写为：driver = webdriver.Chrome(r’C:\server\chromedriver.exe’)</li><li>初始化完成以后，就可以使用 Selenium 打开网页了。要打开一个网页只需要一行代码：<br><code>driver.get('http://exercise.kingname.info/exercise_advanced_ajax.html')</code></li><li>代码运行以后会自动打开一个 Chrome 窗口，并在窗口里面自动进入这个网址对应的页面。一旦被异步加载的内容已经出现在了这个自动打开的 Chrome 窗口中，那么此时使用下列代码：<br><code>html = driver.page_source</code></li><li>就能得到在 Chrome 开发者工具中出现的 HTML 代码<br><strong>综合：</strong></li></ul><pre class=" language-py"><code class="language-py">from selenium import webdriverimport timedriver = webdriver.Chrome(r'C:\Program Files (x86)\Google\Chrome\Application\chromedriver')driver.get('http://exercise.kingname.info/exercise_advanced_ajax.html')time.sleep(5)html = driver.page_sourceprint(html)input('按任意键结束：')</code></pre><p><strong>运行程序会出现以下界面</strong><br><img src="/img/selenium.png" alt="selenium" title="selenium"></p><h4 id="7-3-3-2-等待信息出现"><a href="#7-3-3-2-等待信息出现" class="headerlink" title="7.3.3.2 等待信息出现"></a>7.3.3.2 等待信息出现</h4><ul><li>设置了一个 5s 的延迟，这是由于 Selenium 并不会等待网页加载完成再执行后面的代码。它只是向 ChromeDriver 发送了一个命令，让 ChromeDriver 打开某个网页</li><li>至于网页要开多久，Selenium 并不关心。由于被异步加载的内容会延迟出现，因此需要等待它出现以后再开始抓取</li></ul><h4 id="7-3-3-3-在网页中获取元素"><a href="#7-3-3-3-在网页中获取元素" class="headerlink" title="7.3.3.3 在网页中获取元素"></a>7.3.3.3 在网页中获取元素</h4><p><em>在网页中寻找需要的内容，可以使用类似于 Beautiful Soup4 的语法：</em></p><pre class=" language-py"><code class="language-py">element = driver.find_element_by_id("passwd-id") #如果有多个符合条件的，返回第1个element = driver.find_element_by_name("passwd") #如果有多个符合条件的，返回第1个element_list = driver.find_elements_by_id("passwd-id") #以列表形式返回所有的符合条件的elementelement_list = driver.find_elements_by_name("passwd") #以列表形式返回所有的符合条件的element</code></pre><p><strong>也可以使用 XPath</strong></p><pre class=" language-py"><code class="language-py">element = driver.find_element_by_xpath("//input[@id='passwd-id']")#如果有多个符合条件的，返回第1个element = driver.find_elements_by_xpath("//div[@id='passwd-id']")#以列表形式返回所有的符合条件的element</code></pre><p><a href="http://exercise.kingname.info/exercise_advanced_ajax.html" target="_blank" rel="noopener">练习网站</a></p><pre class=" language-py"><code class="language-py">from selenium import webdriverfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support import expected_conditions as ECimport timedriver = webdriver.Chrome(r'C:\Program Files (x86)\Google\Chrome\Application\chromedriver')driver.get('http://exercise.kingname.info/exercise_advanced_ajax.html')time.sleep(5)try :    WebDriverWait(driver,30).until(EC.text_to_be_present_in_element(By.CLASS_NAME,"content"),'通关')except Exception as _:    print('网页加载太慢，爬')# 但是也可能会爬，不知到原因element = driver.find_element_by_xpath('//div[@class="content"]')print(f'异步加载的内容是：{element.text}')# 异步加载的内容是：通关成功，通关口令：这是最终数据。driver.quit()</code></pre><h2 id="7-4-实例：乐视爬取视频评论"><a href="#7-4-实例：乐视爬取视频评论" class="headerlink" title="7.4 实例：乐视爬取视频评论"></a>7.4 实例：<a href="http://www.le.com" target="_blank" rel="noopener">乐视</a>爬取视频评论</h2><ul><li><p><em>1&gt;分析网站的异步加载请求</em></p></li><li><p><em>2&gt;使用 requests 发送请求</em></p><hr><p></p></li><li><p>通过使用 Chrome 的开发者工具分析页面的异步加载请求，可以发现评论所在的请求</p></li><li><p>可以使用 Python 来模拟这个请求，从而获取视频的评论信息</p></li><li><p>在请求的 URL 里面有两个参数：vid 和 pid,这两个参数在网页的源代码里面都可以找到</p><hr></li><li><p>爬虫首先访问视频页面，通过正则表达式获取 vid 和 pid，并将结果保存到“necessary_info”这个类属性对应的字典中</p></li></ul><pre class=" language-py"><code class="language-py"># 核心代码def get_necessary_id(self):  source = self.get_source(self.url, self.HEADERS)  vid = re.search('vid: (\d+)', source).group(1)  pid = re.search('pid: (\d+)', source).group(1)  self.necessary_info['xid'] = vid  self.necessary_info['pid'] = pid</code></pre><ul><li>访问评论的接口，用 Python 发起请求，获得评论数据</li></ul><pre class=" language-py"><code class="language-py">def get_comment(self):    url = self.COMMENT_URL.format(xid=self.necessary_info['xid'],                             pid=self.necessary_info['pid'])    source = self.get_source(url, self.HEADERS)    source_json = source[source.find('{"'): -1]    comment_dict = json.loads(source_json)    comments = comment_dict['data']    for comment in comments:        print(f'发帖人： {comment["user"]["username"]}, 评论内容：{comment["content"]}')</code></pre><ul><li>代码中，提前定义的 self.COMMENT_URL 和 self.HEADERS</li></ul><pre class=" language-py"><code class="language-py"># 综合import reimport jsonimport requestsclass LetvSpider(object):    COMMENT_URL = 'http://api-my.le.com/vcm/api/list?jsonp=jQuery19100358 \    8935956887496_1581419682085&type=video&rows=20&page=1&sort=&cid=2&sourc\    e=1&xid=27576461&pid=10022394&ctype=cmt%2Cimg%2Cvote&listType=1&_=1581419682087'    HEADERS = {'Accept': '*/*',            'Accept-Encoding': 'gzip, deflate',            'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',            'Cookie': 'tj_lc=d551d3996ae75055e97c1f22ac9aa002; tj_uuid=-_15814196222976075472; tj_env=1; ssoCookieSynced=1; language=zh-cn; sso_curr_country=CN; vjuids=-75eba524.17033f49d1f.0.d645e0a5d3aa1; vjlast=1581419634.1581419634.30; tj_v2c=-27576461_2',            'Host': 'api-my.le.com',            'Proxy-Connection': 'keep-alive',            'Referer':'http://www.le.com/ptv/vplay/27576461.html',            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36'             }    def __init__(self,url):        self.necessary_info = {}        self.url = url        self.get_necessary_id()        self.get_comment()    # 得到request返回的html--str    def get_source(self,url,headers):        return requests.get(url,headers).content.decode()    def get_necessary_id(self):        source = self.get_source(self.url,self.HEADERS) # 得到html        vid = re.search('vid: (\d+)',source).group(1)   #re到vid、pid        pid = re.search('pid: (\d+)',source).group(1)        self.necessary_info['xid'] = vid        #传入vid、pid到字典        self.necessary_info['pid'] = pid    def get_comment(self):        url = self.COMMENT_URL.format(xid=self.necessary_info['xid'],        pid=self.necessary_info['pid'])     # format格式化  url 评论list的request_url        source = self.get_source(url,self.HEADERS)  # 调用get_source()        source_json = source[source.find('{"'): -1] # str切片        comment_dict = json.loads(source_json)  #一个字典        comments = comment_dict['data']        for comment in comments:            print(f'发帖人：{comment["user"]["username"]},评论内容:{comment["content"]}')if __name__ == '__main__':    spider = LetvSpider('http://www.le.com/ptv/vplay/27576461.html')'''发帖人：福建乐迷,评论内容:好喜欢东华帝君发帖人：河北乐迷,评论内容:十发帖人：河北乐迷,评论内容:瑶光上神好漂亮。发帖人：河北乐迷,评论内容:太好看了。发帖人：河北乐迷,评论内容:真水无香。发帖人：河北乐迷,评论内容:喜欢白浅发帖人：天莫邪,评论内容:杨幂真不好看发帖人：呆萌小甜心,评论内容:爱幂幂发帖人：G_,评论内容:有谁是看了枕上书又来看十里桃花我浅浅的发帖人：黑名单,评论内容:我来啦发帖人：凉辰梦瑾空人心_702_210,评论内容:为啥只能隔乐视看了 好伤心�😭发帖人：上海乐迷,评论内容:产科医生发帖人：红_,评论内容:这个很好看发帖人：子璇,评论内容:墨渊霸气，白浅跟她在一起才不会受伤害发帖人：聂芳英,评论内容:为什么其他的APP上看不到发帖人：月色不错,评论内容:这个是玉帝还是王母发帖人：Myth橙子,评论内容:每个平台看一遍我是有多闲发帖人：上海乐迷,评论内容:怎么这么难找〈产科医生）的电视剧发帖人：上海乐迷,评论内容:我想看产科医生的电视剧发帖人：上海乐迷,评论内容:产科医生'''</code></pre><pre class=" language-py"><code class="language-py">print("网站名：{name}, 地址 {url}".format(name="菜鸟教程", url="www.runoob.com"))# 通过字典设置参数site = {"name": "菜鸟教程", "url": "www.runoob.com"}print("网站名：{name}, 地址 {url}".format(**site))# 通过列表索引设置参数my_list = ['菜鸟教程', 'www.runoob.com']print("网站名：{0[0]}, 地址 {0[1]}".format(my_list))  # "0" 是必须的# 网站名：菜鸟教程, 地址 www.runoob.com</code></pre><pre class=" language-py"><code class="language-py">class AssignValue(object):    def __init__(self, value):        self.value = valuemy_value = AssignValue(6)print('value 为: {0.value}'.format(my_value))  # "0" 是可选的# value 为: 6</code></pre><h1 id="8-模拟登录与验证码"><a href="#8-模拟登录与验证码" class="headerlink" title="8. 模拟登录与验证码"></a>8. 模拟登录与验证码</h1><ul><li>对于一个需要登录才能访问的网站，它的页面在登录前和登录后可能是不一样的</li><li>如果直接使用 requests 去获取源代码，只能得到登录以前的页面源代码</li></ul><h2 id="8-1-模拟登录"><a href="#8-1-模拟登录" class="headerlink" title="8.1 模拟登录"></a>8.1 模拟登录</h2><ul><li>1.使用 Selenium 操作浏览器登录和使用 Cookies 登录虽然简单粗暴，但是有效</li><li>2.使用模拟提交表单登录虽然较为麻烦，但可以实现自动化</li></ul><h3 id="8-1-1-使用-Selenium-模拟登录"><a href="#8-1-1-使用-Selenium-模拟登录" class="headerlink" title="8.1.1 使用 Selenium 模拟登录"></a>8.1.1 使用 Selenium 模拟登录</h3><pre><code>     使用Selenium来进行模拟登录，整个过程非常简单。流程如下。（1）初始化ChromeDriver。（2）打开知乎登录页面。（3）找到用户名的输入框，输入用户名。（4）找到密码输入框，输入用户名。（5）手动单击验证码。（6）按下Enter键。</code></pre><ul><li>程序首先打开知乎的登录页面，然后使用“find<em>element_by</em> name”分别找到输入账号和密码的两个输入框</li><li>这两个输入框的 name 属性值分别为“account”(我的是 username)和“password”</li><li>在 Selenium 中可以使用 send_keys()方法往输入框中输入字符串</li><li>在输入了密码以后，验证码框就会弹出来。知乎使用的验证码为点击倒立的文字，这种验证码不容易自动化处理，因此在这个地方让爬虫先暂停，手动点击倒立文字</li><li>爬虫中的 input()语句会阻塞程序，直到在控制台按下 Enter 键，爬虫才会继续运行</li></ul><h3 id="8-1-2-使用-Cookies-登录"><a href="#8-1-2-使用-Cookies-登录" class="headerlink" title="8.1.2 使用 Cookies 登录"></a>8.1.2 使用 Cookies 登录</h3><ul><li><em>Cookie 是用户使用浏览器访问网站的时候网站存放在浏览器中的一小段数据</em></li><li>Cookie 的复数形式 Cookies 用来表示各种各样的 Cookie。它们有些用来记录用户的状态信息；有些用来记录用户的操作行为；还有一些，具有现代网络最重要的功能：记录授权信息——用户是否登录以及用户登录哪个账号</li><li>为了不让用户每次访问网站都进行登录操作，浏览器会在用户第一次登录成功以后放一段加密的信息在 Cookies 中。下次用户访问，网站先检查 Cookies 有没有这个加密信息，如果有并且合法，那么就跳过登录操作，直接进入登录后的页面</li><li>通过已经登录的 Cookies，可以让爬虫绕过登录过程，直接进入登录以后的页面</li><li>在已经登录知乎的情况下，打开 Chrome 的开发者工具，定位到“Network”选项卡，然后刷新网页，在加载的内容中随便选择一项，然后看右侧的数据，从 Request Headers 中可以找到 Cookie</li></ul><pre><code>cookie: _zap=56180d87-245a-4b79-83e2-711f4629644e; d_c0="AMAY69ZKzRCPTh5KJj9edoIQ4_BiQS3iqwM=|1581434842"; _xsrf=jzLzeCfZignAw6qDdNqO85UOdCrRcB3C; Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49=1581485103,1581492629,1581492650,1581494278; capsion_ticket="2|1:0|10:1581494284|14:capsion_ticket|44:ZjQyY2FjMmZkZTJmNDJkNGI5NmYxMDNkMzc3MTVlNGI=|e2f4eb7e3652b2f1f3e439d7ff4275e4e15bdfbfbed8ce423dceded2da4235cf"; z_c0="2|1:0|10:1581494646|4:z_c0|92:Mi4xY2R0cUJRQUFBQUFBd0JqcjFrck5FQ1lBQUFCZ0FsVk5kdjh3WHdBMEczY0dBVm5MNUFmV1V4cmtja0p1Rm1kMGtn|560b73b3b5f052f6151d4a02e62f1f645f01ad7826d8c183d7152fb2fcf8456d"; Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49=1581494647; tst=r; KLBRSID=81978cf28cf03c58e07f705c156aa833|1581494650|1581494278</code></pre><ul><li><strong>请注意这里一定是“Request Headers”，不要选成了“Response Headers”</strong></li></ul><ul><li>只要把这个 Request Headers 的内容通过 requests 提交，就能直接进入登录以后的知乎页面了</li><li>可以看到，使用 Cookie 来登录网页，不仅可以绕过登录步骤，还可以绕过网站的验证码</li><li>Session，是指一段会话。网站会把每一个会话的 ID（Session ID）保存在浏览器的 Cookies 中用来标识用户的身份</li><li>requests 的 Session 模块可以自动保存网站返回的一些信息</li><li>其实在前面章节中使用的 requests.get()，在底层还是会先创建一个 Session，然后用 Session 去访问</li><li>对于 HTTPS 的网站，在 requests 发送请求的时候需要带上 verify=False 这个参数，否则爬虫会报错</li><li>带上这个参数以后，爬虫依然会报一个警告，这是因为没有 HTTPS 的证书</li><li>不过这个警告不会影响爬虫的运行结果。对于有强迫症的读者，可以参考相关内容为 requests 设置证书，从而解除这个警告</li></ul><h3 id="8-1-3-模拟表单登录"><a href="#8-1-3-模拟表单登录" class="headerlink" title="8.1.3 模拟表单登录"></a>8.1.3 模拟表单登录</h3><p><strong><a href="http://exercise.kingname.info/exercise_login?next=%2Fexercise_login_success" target="_blank" rel="noopener">练习页面</a></strong></p><ul><li>这个登录页面多了一个“自动登录”复选框输入用户名 kingname，密码 genius，勾选“自动登录”复选框并单击“登录”按钮，可以看到登录成功后的页面</li><li>打开 Chrome 的开发者工具并监控登录过程</li><li>然而，仔细观察会发现登录请求的那个网址只会在“Network”选项卡中存在 1s，然后就消失了</li><li>Network”选项卡下面只剩下登录成功后的页面所发起的各种网络请求</li><li>这是因为表单登录成功以后会进行页面跳转，相当于开了一个新的网页，于是新的请求就会直接把旧的请求覆盖。为了避免这种情况，需要在 Chrome 的开发者工具的“Network”选项卡中勾选“Preserve log”复选框，再一次登录就可以看到登录过程</li><li>此时可以看到 Status Code 是 302，说明这里有一个网页跳转，也就证明了之前为什么登录以后看不到登录的请求</li><li><strong>使用 requests 的 Session 模块来模拟这个登录</strong></li></ul><pre class=" language-py"><code class="language-py">import requestslogin_url = 'http://exercise.kingname.info/exercise_login'login_sucess_url = 'http://exercise.kingname.info/exercise_login_success'data = {    'username':'kingname',    'password':'genius',    'remember':'Yes'}session = requests.Session()before_login = session.get(login_sucess_url).textprint(before_login)print('============开始登陆==============')session.post(login_url,data=data).textafter_login = session.get(login_sucess_url).textprint(after_login)</code></pre><p><strong>结果</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>exercise login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">label </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.login</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/exercise_login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>              <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>              <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入:kingname<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>            <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密 码 :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>              <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>              <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入:genius<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>            <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox pull-right<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>自动登录            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>              <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rememberme<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Yes<span class="token punctuation">"</span></span>              <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>            <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static/js/jquery-3.2.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>============开始登陆==============<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Login Success<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      如果你看到这一行内容，说明你已经登录成功。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/exercise_logout<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>退出登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>      <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="8-2-验证码"><a href="#8-2-验证码" class="headerlink" title="8.2 验证码"></a>8.2 验证码</h2><h3 id="8-2-1-肉眼打码"><a href="#8-2-1-肉眼打码" class="headerlink" title="8.2.1 肉眼打码"></a>8.2.1 肉眼打码</h3><ul><li><p>对于一次登录就可以长时间使用的情况，只需要识别一次验证码即可</p></li><li><p>这种情况下，与其花时间开发一个自动识别验证码的程序，不如直接肉眼识别</p></li><li><p><strong>肉眼识别验证码有两种情况，借助浏览器与不借助浏览器</strong></p></li><li><p>1、借助浏览器<br>在模拟登录中讲到过 Cookies，通过 Cookies 能实现绕过登录，从而直接访问需要登录的网站。因此，对于需要输入验证码才能进行登录的网站，可以手动在浏览器登录网站，并通过 Chrome 获取 Cookies，然后使用 Cookies 来访问网站<br>这样就可以实现人工输入一次验证码，然后很长时间不再登录。</p></li><li><p>2、不借助浏览器<br>对于仅仅需要识别图片的验证码，可以使用这种方式——先把验证码下载到本地，然后肉眼去识别并手动输入给爬虫</p></li></ul><pre><code>手动输入验证码的一般流程如下:（1）爬虫访问登录页面（2）分析网页源代码，获取验证码地址（3）下载验证码到本地（4）打开验证码，人眼读取内容（5）构造POST的数据，填入验证码（6）POST提交</code></pre><ul><li><em>需要注意的是，其中的（2）、（3）、（4）、（5）、（6）步是一气呵成的，是在爬虫运行的时候做的。绝对不能先把爬虫程序关闭，肉眼识别验证码以后再重新运行</em></li></ul><p><strong><a href="http://exercise.kingname.info/exercise_captcha.html" target="_blank" rel="noopener">练习页面</a></strong></p><pre class=" language-py"><code class="language-py">import requestsimport lxml.htmlurl = 'http://exercise.kingname.info/exercise_captcha.html'url_check = 'http://exercise.kingname.info/exercise_captcha_check'session = requests.session()html = session.get(url).contentselector = lxml.html.fromstring(html)captcha_url = selector.xpath('//img/@src')[0]image = requests.get('http://exercise.kingname.info/'+captcha_url).contentwith open('captcha.png','wb') as f:    f.write(image)captcha = input('请查看图片，然后输入在这里：')after_check = session.post(url_check,data={'captcha':captcha})print(f'请输入验证码后，网站返回：{after_check.content.decode()}')</code></pre><p><strong>结果</strong></p><pre><code>请查看图片，然后输入在这里：1595请输入验证码后，网站返回：看到这个页面，说明你的验证码输入正确</code></pre><p><img src="/img/captcha.png" alt="验证码"></p><h3 id="8-2-2-自动打码"><a href="#8-2-2-自动打码" class="headerlink" title="8.2.2 自动打码"></a>8.2.2 自动打码</h3><p>1、Python 图像识别</p><ul><li>对于验证码识别，Python 也有现成的库来使用</li><li>开源的 OCR 库 pytesseract 配合图像识别引擎 tesseract，可以用来将图片中的文字转换为文本</li><li>这种方式在爬虫中的应用并不多见。因为现在大部分的验证码都加上了干扰的纹理，已经很少能用单机版的图片识别方式来识别了。所以如果使用这种方式，只有两种情况：网站的验证码极其简单工整，使用大量的验证码来训练 tesseract<br><em>安装 tesseract</em><br>打开网页下载安装包：<a href="https://github.com/tesseract-ocr/tesseract/wiki/Downloads" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki/Downloads</a> ,在“3rd party Windows exe’s/ installer”下面可以找到.exe 安装包<br><em>安装 Python 库</em><br>pip install Pillow<br>pip install pytesseract<br>其中，Pillow 是 Python 中专门用来处理图像的第三方库，pytesseract 是专门用来操作 tesseract 的第三方库<br><em>tesseract 的使用</em></li></ul><pre><code>          tesseract的使用非常简单。① 导入pytesseract和Pillow。② 打开图片。③ 识别。</code></pre><pre class=" language-py"><code class="language-py"># 通过以下代码来实现最简单的图片识别：import pytesseractfrom PIL import Imageimage = Image.open('验证码.png')code = pytesseract.image_to_string(image)print(code)</code></pre><p>2、打码网站<br>在线验证码识别的网站，简称打码网站。这些网站有一些是使用深度学习技术识别验证码，有一些是雇佣了很多人来人肉识别验证码<br>网站提供了接口来实现验证码识别服务。使用打码网站理论上可以识别任何使用输入方式来验证的验证码</p><pre><code>这种打码网站的流程一般是这样的。① 将验证码上传到网站服务器。② 网站服务器将验证码分发给打码工人。③ 打码工人肉眼识别验证码并上传结果。④ 网站将结果返回。</code></pre><p><em>使用在线打码</em><br>在百度或者谷歌上面搜索“验证码在线识别”，就可以找到很多提供在线打码的网站。但是由于一般这种打码网站是需要交费才能使用的，所以要注意财产安全</p><h2 id="8-3-案例-自动登录果壳网"><a href="#8-3-案例-自动登录果壳网" class="headerlink" title="8.3 案例-自动登录果壳网"></a>8.3 案例-自动登录果壳网</h2><p><a href="https://www.guokr.com" target="_blank" rel="noopener">目标网站</a><br>使用模拟登录与验证码识别的技术实现自动登录果壳网。 果壳网的登录界面有验证码，请使用人工或者在线打码的方式识别验证码，并让爬虫登录。登录以后可以正确显示“个人资料设置”界面的源代码</p><ul><li>涉及的知识点：</li><li>（1）爬虫识别验证码。</li><li>（2）爬虫模拟登录。<blockquote><p>来自<a href="https://github.com/kingname/SourceCodeOfBook/tree/master/%E7%AC%AC8%E7%AB%A0/program" target="_blank" rel="noopener">第八章</a>，需要使用再来深度学习</p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spider </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm questions</title>
      <link href="/2020/02/04/pycharm-questions/"/>
      <url>/2020/02/04/pycharm-questions/</url>
      
        <content type="html"><![CDATA[<p><strong>使用 Pycharm 遇到的问题</strong><br><em>VS code 天下第一</em></p><a id="more"></a><h1 id="1-新版-pycharm-问题"><a href="#1-新版-pycharm-问题" class="headerlink" title="1. 新版 pycharm 问题"></a>1. 新版 pycharm 问题</h1><h2 id="问题-1：pycharm-双击打不开"><a href="#问题-1：pycharm-双击打不开" class="headerlink" title="问题 1：pycharm 双击打不开"></a>问题 1：pycharm 双击打不开</h2><p>已解决：可能时进程中已经有了 pycharm，在任务管理器里结束进程，然后重新打开</p><h2 id="问题-2：pycharm-打开后回有两个窗口，而且不能再窗口上操作"><a href="#问题-2：pycharm-打开后回有两个窗口，而且不能再窗口上操作" class="headerlink" title="问题 2：pycharm 打开后回有两个窗口，而且不能再窗口上操作"></a>问题 2：pycharm 打开后回有两个窗口，而且不能再窗口上操作</h2><p>重装可以解决，但不知道什么原因，猜测可能是打开文件太多，加载不了</p><h1 id="2-现已经转用-vs-code-真香"><a href="#2-现已经转用-vs-code-真香" class="headerlink" title="2. 现已经转用 vs code 真香"></a>2. 现已经转用 vs code 真香</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Questions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2020/02/04/hexo/"/>
      <url>/2020/02/04/hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>建立 hexo_blog，参考 b 站 up:<a href="https://space.bilibili.com/384068749" target="_blank" rel="noopener">CodeSheep</a>的<a href="https://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">视频</a></strong></p><blockquote><p><strong>所用主题 :<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>，主要按照<a href="http://yansheng836.coding.me/" target="_blank" rel="noopener">大佬博客</a>中的<a href="http://yansheng836.coding.me/tags/hexo/" target="_blank" rel="noopener">这一分类</a>进行修改</strong></p></blockquote></blockquote><a id="more"></a><h2 id="1-hexo-基操"><a href="#1-hexo-基操" class="headerlink" title="1. hexo 基操"></a>1. hexo 基操</h2><h3 id="1-1-master-分支"><a href="#1-1-master-分支" class="headerlink" title="1.1 master 分支"></a>1.1 master 分支</h3><table><thead><tr><th align="center">描述</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center">新建页面 type:’tags’</td><td align="center"><code>hexo new page 'title'</code></td></tr><tr><td align="center">新建 md</td><td align="center"><code>hexo n "title"</code></td></tr><tr><td align="center">清理</td><td align="center"><code>hexo clean</code></td></tr><tr><td align="center">生成</td><td align="center"><code>hexo g</code></td></tr><tr><td align="center">部署到远端；推到 github</td><td align="center"><code>hexo d</code></td></tr><tr><td align="center">启动预览,blog</td><td align="center"><code>hexo s</code></td></tr></tbody></table><h3 id="1-2-blog-分支"><a href="#1-2-blog-分支" class="headerlink" title="1.2 blog 分支"></a>1.2 blog 分支</h3><ul><li>6、将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录<blockquote><p><code>git add .</code></p></blockquote></li><li>7、将缓存区内容添加到本地仓库<blockquote><p><code>git commit -m "提交信息"</code></p></blockquote></li><li>8、将本地版本库推送到远程服务器,将本地库如果设置了 blog 为默认分支，可以直接 git push<blockquote><p><code>git push origin blog</code></p></blockquote></li><li>9、先将远程仓库 master 中的信息同步到本地仓库 master 中<blockquote><p><code>git pull origin master</code></p></blockquote></li><li>10、查看工作区代码相对于暂存区的差别<blockquote><p><code>git status</code></p></blockquote></li></ul><blockquote><p>参考<a href="https://www.jianshu.com/p/2e1d551b8261" target="_blank" rel="noopener" title="简书">简书网站</a></p></blockquote><h2 id="2-source-md-blog-目录下"><a href="#2-source-md-blog-目录下" class="headerlink" title="2. source/md-(blog 目录下)"></a>2. source/md-(blog 目录下)</h2><ul><li>没有跳过的会转化为 HTML，在 blog 中体现</li></ul><h2 id="3-添加背景图片和左侧图片"><a href="#3-添加背景图片和左侧图片" class="headerlink" title="3. 添加背景图片和左侧图片"></a>3. 添加背景图片和左侧图片</h2><p>主要在<code>source/main.0cf68a.css</code> 文件中修改</p><blockquote><p>具体修改参考<a href="http://yansheng836.coding.me/" target="_blank" rel="noopener">大佬博客</a>中的<a href="http://yansheng836.coding.me/article/72a91df5.html" target="_blank" rel="noopener">这一篇</a></p></blockquote><h3 id="3-1-左侧背景"><a href="#3-1-左侧背景" class="headerlink" title="3.1 左侧背景"></a>3.1 左侧背景</h3><p><code>themes/yilia/layout/_partial/left-col.ejs</code>文件中注释掉原来代码，添加新的无属性代码</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"overlay"</span> style<span class="token operator">=</span><span class="token string">"background: &lt;%= theme.style &amp;&amp; theme.style.header ? theme.style.header : defaultBg %>"</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 左侧边栏（上半部分）不设置背景颜色 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"overlay"</span> <span class="token operator">></span></code></pre><p><code>themes\yilia\source\main.0cf68a.css</code>中修改添加背景图片</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.left-col</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* background:#fff; 注释掉原来的修改背景*/</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>      <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>,      <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>,    <span class="token url">url("http://bucket836.oss-cn-shenzhen.aliyuncs.com/wallpaper/381535373.jpeg")</span>      no-repeat <span class="token number">0%</span> <span class="token number">20%</span> / cover<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s ease-in<span class="token punctuation">;</span>  <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s ease-in<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你的背景图片跟文字颜色不匹配(字看不清)，可以修改中文件</p><pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.left-col</span> <span class="token id">#header</span> a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#696969</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#673ab7</span>^M <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.left-col</span> <span class="token id">#header</span> a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#b0a0aa</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#03A9F4</span>^M <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.left-col</span> <span class="token id">#header</span> <span class="token class">.header-subtitle</span> </span><span class="token punctuation">{</span>     <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#999</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#673ab7</span><span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span></code></pre><h3 id="3-2-文章背景"><a href="#3-2-文章背景" class="headerlink" title="3.2 文章背景"></a>3.2 文章背景</h3><p>先将文章背景调成透明色,搜索<code>.article {</code></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.article</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*调成透明色，才能看清背景图片*/</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.2</span>s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后再添加背景图片，搜索<code>body {</code></p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Helvetica Neue, Helvetica, STHeiTi, Arial, sans-serif<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*background-color:rgb(85, 144, 161); */</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>      <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>,      <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>, <span class="token url">url(./img/1_.jpg)</span> no-repeat <span class="token number">0%</span> <span class="token number">20%</span> / cover<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*添加背景图片*/</span><span class="token punctuation">}</span></code></pre><p><strong>如果修改完代码，背景还没有变，可能你的 body 或者 article 定义了两次，前面有一个 body{},后面还有一个，只要删掉后面的就可以了</strong><br><em>需要自己好好的找一找</em></p><p><strong>如果你的 main.0cf68a.css,文件代码很乱，可以在<a href="https://github.com/yq010105/hexo_themes/blob/master/yilia/source/main.0cf68a.css" target="_blank" rel="noopener">我的 Github</a>中复制</strong> <em>别问我怎么知道的</em></p><h3 id="3-3-copy-代码块"><a href="#3-3-copy-代码块" class="headerlink" title="3.3 copy 代码块"></a>3.3 copy 代码块</h3><blockquote><p>按照<a href="http://yansheng836.coding.me/" target="_blank" rel="noopener">大佬博客</a>中的<a href="http://yansheng836.coding.me/article/e9d1b881.html" target="_blank" rel="noopener">这一篇</a></p></blockquote><h2 id="4-添加网站运行时间"><a href="#4-添加网站运行时间" class="headerlink" title="4. 添加网站运行时间"></a>4. 添加网站运行时间</h2><p><em>简单配置</em><br>修改<code>\themes\yilia\layout\_partial\footer.ejs</code>，在<code>&lt;/footer&gt;</code>上面添加如下内容</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>《添加网站运行时间 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"timeDate"</span><span class="token operator">></span>载入天数<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"times"</span><span class="token operator">></span>载入时分秒<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">createtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> grt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"07/25/2019 12:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处修改你的建站时间或者网站上线时间</span>        now<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">;</span>        dnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        hours <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        hnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>hnum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hnum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> hnum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        minutes <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> hnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        mnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>mnum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mnum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> mnum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        seconds <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> hnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> mnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        snum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>snum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            snum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> snum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"timeDate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">" | 本站已安全运行 "</span> <span class="token operator">+</span> dnum <span class="token operator">+</span> <span class="token string">" 天 "</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"times"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> hnum <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> mnum <span class="token operator">+</span> <span class="token string">" 分 "</span> <span class="token operator">+</span> snum <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"createtime()"</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加网站运行时间》 <span class="token operator">--</span><span class="token operator">></span></code></pre><blockquote><p>参考<a href="http://yansheng836.coding.me/article/50902a4.html" target="_blank" rel="noopener">这一篇</a></p></blockquote><h2 id="5-看板娘-かんばんむすめ"><a href="#5-看板娘-かんばんむすめ" class="headerlink" title="5. 看板娘(かんばんむすめ)"></a>5. 看板娘(かんばんむすめ)</h2><ul><li><strong>安装插件:</strong> <code>npm install --save hexo-helper-live2d</code> <strong><a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">github 项目</a></strong></li><li><strong>安装模型:</strong> <code>npm install live2d-widget-model-模型名</code> <strong><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">模型名参考</a></strong></li><li><strong>在 blog/_config.yml 中添加</strong></li><li><em>我在 yilia 中配置没有效果，但在 blog 中有效果</em></li></ul><pre class=" language-yml"><code class="language-yml"># Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: live2d-widget-model-模型名 # 模型：https://huaji8.top/post/live2d-plugin-2.0/  display:    position: right    width: 150    height: 300  mobile:    show: true</code></pre><ul><li><strong>关闭 live2D:</strong> <code>enable:false</code></li><li><strong>卸载模型:</strong> <code>npm uninstall live2d-widget-model-模型名</code></li><li><strong>卸载插件:</strong> <code>npm uninstall hexo-helper-live2d</code></li><li><strong>删掉 yilia/_config.yml 中配置</strong></li><li><del><em>过于占内存，已卸载</em></del>、<em>33 真是太可爱了</em><blockquote><p><a href="https://github.com/52cik/bilibili-haruna" target="_blank" rel="noopener">2233 娘的 model</a><br>参考<a href="http://yansheng836.coding.me/article/e239dc63.html" target="_blank" rel="noopener">这一篇</a></p></blockquote></li></ul><h2 id="6-网易云音乐插件"><a href="#6-网易云音乐插件" class="headerlink" title="6. 网易云音乐插件"></a>6. 网易云音乐插件</h2><ul><li>在<code>/yilia/layout/_partial/post/left-col.ejs</code>中最后的<code>&lt;/nav&gt;</code>标签上方添加</li></ul><pre class=" language-js"><code class="language-js">    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>music <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>enable<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span># <span class="token string">"网易云音乐插件"</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span># <span class="token string">"bottom:120px; left:auto;position:absolute;  width:85%"</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> defaultHeight <span class="token operator">=</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'32'</span> <span class="token punctuation">:</span> <span class="token string">'66'</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> defaultIframeHeight <span class="token operator">=</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'52'</span> <span class="token punctuation">:</span> <span class="token string">'86'</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>iframe frameborder<span class="token operator">=</span><span class="token string">"no"</span> border<span class="token operator">=</span><span class="token string">"0"</span> marginwidth<span class="token operator">=</span><span class="token string">"0"</span> marginheight<span class="token operator">=</span><span class="token string">"0"</span> width<span class="token operator">=</span><span class="token string">"240"</span> height<span class="token operator">=</span><span class="token string">"&lt;%=defaultIframeHeight%>"</span> src<span class="token operator">=</span><span class="token string">"//music.163.com/outchain/player?type=2&amp;id=&lt;%=theme.music.id||1400594005%>&amp;auto=&lt;%=theme.music.autoPlay?1:0%>&amp;height=&lt;%=defaultHeight%>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text <span class="token operator">||</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> musicText <span class="token operator">=</span> <span class="token punctuation">(</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"这似乎是首纯音乐，请尽情的欣赏它吧！"</span> <span class="token punctuation">:</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text<span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token string">"font-size: 24px;font-family: 'Times New Roman', Times, serif;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span>musicText<span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><ul><li>然后在 yilia 配置文件<code>_config.yml</code>中添加</li></ul><pre class=" language-yml"><code class="language-yml"># 网易云音乐插件music:  enable: true  # 播放器尺寸类型(1：长尺寸、2：短尺寸)  type: 1  #id: 1334445174  # 网易云分享的音乐ID(更换音乐请更改此配置项)  autoPlay: false # 是否开启自动播放  # 提示文本(关闭请设置为false)  text: "底部文字"</code></pre><blockquote><p>参考大佬做的<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">yilia-plus</a>中的配置</p></blockquote><h2 id="7-添加背景特效"><a href="#7-添加背景特效" class="headerlink" title="7. 添加背景特效"></a>7. 添加背景特效</h2><h3 id="7-1-点击爱心"><a href="#7-1-点击爱心" class="headerlink" title="7.1 点击爱心"></a>7.1 点击爱心</h3><ul><li>在<code>/yilia/source/js/</code>下添加<code>love.js</code>文件,书写代码</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">,</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> hearts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>      window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>      window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span>      window<span class="token punctuation">.</span>oRequestAnimationFrame <span class="token operator">||</span>      window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>      <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">css</span><span class="token punctuation">(</span>      <span class="token string">".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gameloop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">gameloop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hearts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        hearts<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">--</span><span class="token punctuation">;</span>      hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0.004</span><span class="token punctuation">;</span>      hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">0.013</span><span class="token punctuation">;</span>      hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span>        <span class="token string">"left:"</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span>        <span class="token string">"px;top:"</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span>        <span class="token string">"px;opacity:"</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">+</span>        <span class="token string">";transform:scale("</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token operator">+</span>        <span class="token string">","</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token operator">+</span>        <span class="token string">") rotate(45deg);background:"</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>gameloop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> old <span class="token operator">=</span> <span class="token keyword">typeof</span> window<span class="token punctuation">.</span>onclick <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span>    window<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      old <span class="token operator">&amp;&amp;</span> <span class="token function">old</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">createHeart</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">createHeart</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"heart"</span><span class="token punctuation">;</span>    hearts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> d<span class="token punctuation">,</span>      x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">,</span>      y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">,</span>      scale<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      alpha<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      color<span class="token punctuation">:</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    style<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      style<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText <span class="token operator">=</span> css<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token string">"rgb("</span> <span class="token operator">+</span>      <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span>      <span class="token string">","</span> <span class="token operator">+</span>      <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span>      <span class="token string">","</span> <span class="token operator">+</span>      <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span>      <span class="token string">")"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>在<code>yilia/layout/layout.ejs</code>中添加代码(切记在<script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"./live2d_models/haruna/33/model.2018.spring.json"},"display":{"position":"right","width":200,"height":400},"mobile":{"show":true},"react":{"opacity":0.8},"log":false});</script>标签前添加)</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 《页面点击小红心 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>love<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/love.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 页面点击小红心》 <span class="token operator">--</span><span class="token operator">></span></code></pre><ul><li>在<code>yilia/_config.yml</code>中添加配置</li></ul><pre class=" language-yml"><code class="language-yml">#点击小红心love: true</code></pre><h3 id="7-2-背景线条"><a href="#7-2-背景线条" class="headerlink" title="7.2 背景线条"></a>7.2 背景线条</h3><ul><li>在<code>yilia/layout/layout.ejs</code>中添加代码</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动态线条背景<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>canvas_nest<span class="token punctuation">.</span>enable<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> color<span class="token operator">=</span><span class="token string">"&lt;%=theme.canvas_nest.color %>"</span> opacity<span class="token operator">=</span><span class="token string">"&lt;%=theme.canvas_nest.opacity %>"</span>      zIndex<span class="token operator">=</span><span class="token string">"&lt;%=theme.canvas_nest.zIndex %>"</span> count<span class="token operator">=</span><span class="token string">"&lt;%=theme.canvas_nest.count %>"</span>      src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><ul><li>在<code>yilia/_config.yml</code>中添加配置</li></ul><pre class=" language-yml"><code class="language-yml"># 动态线条效果，会向鼠标集中canvas_nest:  enable: false  color: "255, 235, 59" # color of lines, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)  pointColor: "156,39,176" # color of points, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)  opacity: "0.8" # the opacity of line (0~1), default: 0.5.  count: "99" # the number of lines, default: 99.  zIndex: "-1" # z-index property of the background, default: -1.</code></pre><h3 id="7-3-背景点击文字"><a href="#7-3-背景点击文字" class="headerlink" title="7.3 背景点击文字"></a>7.3 背景点击文字</h3><ul><li>在<code>yilia/source/js/</code>下添加<code>click_show_text.js</code>文件，添加代码</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>      <span class="token string">"富强"</span><span class="token punctuation">,</span>      <span class="token string">"民主"</span><span class="token punctuation">,</span>      <span class="token string">"文明"</span><span class="token punctuation">,</span>      <span class="token string">"和谐"</span><span class="token punctuation">,</span>      <span class="token string">"自由"</span><span class="token punctuation">,</span>      <span class="token string">"平等"</span><span class="token punctuation">,</span>      <span class="token string">"公正"</span><span class="token punctuation">,</span>      <span class="token string">"法治"</span><span class="token punctuation">,</span>      <span class="token string">"爱国"</span><span class="token punctuation">,</span>      <span class="token string">"敬业"</span><span class="token punctuation">,</span>      <span class="token string">"诚信"</span><span class="token punctuation">,</span>      <span class="token string">"友善"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>      y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>    $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      top<span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>      left<span class="token punctuation">:</span> x<span class="token punctuation">,</span>      position<span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>      <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>      color<span class="token punctuation">:</span> <span class="token string">"#FF0000"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>    $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>      <span class="token punctuation">{</span>        top<span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>        opacity<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token number">3000</span><span class="token punctuation">,</span>      <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"delay()"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".buryit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>在<code>yilia/layout/layout.ejs</code>中添加代码</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>单击显示文字<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>click_show_text<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/click_show_text.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><ul><li>在<code>yilia/_config.yml</code>中添加配置</li></ul><pre class=" language-yml"><code class="language-yml"># 鼠标点击显示文字click_show_text: false</code></pre><blockquote><p><a href="http://yansheng836.coding.me/article/cf9c6a5e.html" target="_blank" rel="noopener">参考博客</a></p></blockquote><h2 id="8-修改手机端的页面背景颜色，文章的背景颜色以及头像上方颜色"><a href="#8-修改手机端的页面背景颜色，文章的背景颜色以及头像上方颜色" class="headerlink" title="8. 修改手机端的页面背景颜色，文章的背景颜色以及头像上方颜色"></a>8. 修改手机端的页面背景颜色，文章的背景颜色以及头像上方颜色</h2><p><em>在<code>main.0cf68a.css</code>中修改@media 下的模块</em></p><h3 id="8-1-页面背景颜色-图片"><a href="#8-1-页面背景颜色-图片" class="headerlink" title="8.1 页面背景颜色(图片)"></a>8.1 页面背景颜色(图片)</h3><p>添加下列代码，即为修改页面的背景托 i 按</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>        <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">127</span>, <span class="token number">127</span>, <span class="token number">0.212</span><span class="token punctuation">)</span>,        <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.2</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>, <span class="token url">url(./img/phone2.jpg)</span> no-repeat <span class="token number">0%</span> <span class="token number">20%</span> / cover<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8-2-文章背景颜色"><a href="#8-2-文章背景颜色" class="headerlink" title="8.2 文章背景颜色"></a>8.2 文章背景颜色</h3><p>找到<code>@media</code>下的 article</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.article</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">85</span>, <span class="token number">185</span>, <span class="token number">185</span>, <span class="token number">0.425</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.2</span>s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据自己喜好改变<code>background</code>属性值</p><h3 id="8-3-头像图片"><a href="#8-3-头像图片" class="headerlink" title="8.3 头像图片"></a>8.3 头像图片</h3><p>直接在<code>_config.yml</code>中修改，我改成了透明即<code>header: 'rgba(255, 127, 127, 0)'</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

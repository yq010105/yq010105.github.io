<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快捷键——让学习更高效</title>
      <link href="/2020/04/09/learn-ks/"/>
      <url>/2020/04/09/learn-ks/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Windows系统的快捷键"><a href="#1-Windows系统的快捷键" class="headerlink" title="1. Windows系统的快捷键"></a>1. Windows系统的快捷键</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>win + I</td><td>打开设置</td></tr><tr><td>win + E</td><td>打开文件管理器</td></tr><tr><td>win + A</td><td>打开操作中心</td></tr><tr><td>win + S</td><td>打开搜索</td></tr><tr><td>win + L</td><td>锁定桌面(锁屏)</td></tr><tr><td>win + K</td><td>打开连接设备</td></tr><tr><td>win + ctrl + D</td><td>创建虚拟桌面</td></tr><tr><td>win + ctrl + F4</td><td>关闭当前虚拟桌面</td></tr><tr><td>win + ctrl + ←或→</td><td>切换虚拟桌面</td></tr></tbody></table><p>还有几个旧的：</p><ul><li>win+v 剪切板，win+d 显示桌面</li><li>win + shift + s 截图 </li><li>win + ； 打开输入法的表情</li></ul><h1 id="2-Markdown-All-in-One插件快捷键"><a href="#2-Markdown-All-in-One插件快捷键" class="headerlink" title="2. Markdown All in One插件快捷键"></a>2. Markdown All in One插件快捷键</h1><p>VSCode中的插件Markdown All in One</p><table><thead><tr><th>Markdown All in One快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + B</td><td>粗体</td></tr><tr><td>Ctrl + I</td><td>斜体</td></tr><tr><td>Alt + S</td><td>删除线</td></tr><tr><td>Ctrl + Shift + ]</td><td>标题(uplevel)</td></tr><tr><td>Ctrl + Shift + [</td><td>标题(downlevel)</td></tr><tr><td>Ctrl + M</td><td>Toggle math environment</td></tr><tr><td>Alt + C</td><td>Check/Uncheck task list item</td></tr></tbody></table><h1 id="3-Cmder快捷键"><a href="#3-Cmder快捷键" class="headerlink" title="3. Cmder快捷键"></a>3. Cmder快捷键</h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Alt + enter</td><td>全屏</td></tr><tr><td>Win + Alt + P</td><td>开启选项</td></tr><tr><td>Alt + Shift + 1</td><td>cmd.exe</td></tr><tr><td>Alt + Shift + 2</td><td>powershell.exe</td></tr><tr><td>Alt + Shift + 3</td><td>powershell.exe(管理员)</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#-Note</title>
      <link href="/2020/04/08/note-cs/"/>
      <url>/2020/04/08/note-cs/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><blockquote><p>参考<a href="https://www.bilibili.com/video/BV1wx411K7rb" target="_blank" rel="noopener">b 站的视频学习</a></p></blockquote><p><img src="/img/cs/program.png" alt="编程"></p><h1 id="0-C-学习前的-bb"><a href="#0-C-学习前的-bb" class="headerlink" title="0. C#学习前的 bb"></a>0. C#学习前的 bb</h1><p>C# 窗体应用，我的初步感受就是 VB+Java（狗头）<br>VB 现在正在学，但是 Java 是没学过 hhh</p><p>C# 是面向对象的语言，然而 C# 进一步提供了对面向组件 (component-oriented) 编程的支持。现代软件设计日益依赖于自包含和自描述功能包形式的软件组件。这种组件的关键在于，它们通过属性、方法和事件来提供编程模型；它们具有提供了关于组件的声明性信息的特性；同时，它们还编入了自己的文档。C# 提供的语言构造直接支持这些概念，这使得 C# 语言自然而然成为创建和使用软件组件之选。（copy from _csharp language specification 5.0 中文_）</p><h1 id="1-语言标准的——hello-world"><a href="#1-语言标准的——hello-world" class="headerlink" title="1. 语言标准的——hello world!!!"></a>1. 语言标准的——hello world!!!</h1><h2 id="1-1-Console"><a href="#1-1-Console" class="headerlink" title="1.1 Console"></a>1.1 Console</h2><p>控制台.NET Framework</p><p><code>Console.WriteLine("Hello World!!!");</code></p><h2 id="1-2-WPF"><a href="#1-2-WPF" class="headerlink" title="1.2 WPF"></a>1.2 WPF</h2><p>新的 windows forms（大概）,感觉就是更高级的 VB，更自由更美观的界面开发<br>跟 windows forms 一样</p><p><code>textBoxShowHello.Text = "Hello World!";</code></p><h2 id="1-3-Windows-Forms-App-old"><a href="#1-3-Windows-Forms-App-old" class="headerlink" title="1.3 Windows Forms App(old)"></a>1.3 Windows Forms App(old)</h2><p>窗体程序，学过一点 VB，无所畏惧</p><p>button<br><code>textBoxShowHello.Text = "Hello World!";</code></p><h2 id="1-4-ASP-NET-Web-Forms-old"><a href="#1-4-ASP-NET-Web-Forms-old" class="headerlink" title="1.4 ASP.NET Web Forms(old)"></a>1.4 ASP.NET Web Forms(old)</h2><p>网络应用程序，网页<br>Controller 中<br><code>&lt;h1&gt;Hello World!&lt;h1&gt;</code></p><h2 id="1-5-ASP-NET-MVC"><a href="#1-5-ASP-NET-MVC" class="headerlink" title="1.5 ASP.NET MVC"></a>1.5 ASP.NET MVC</h2><p>程序开发架构，可以将不同语言的代码放在不同的目录中<br>Controller 中<br><code>&lt;h1&gt;Hello World!&lt;h1&gt;</code></p><h2 id="1-6-WCF"><a href="#1-6-WCF" class="headerlink" title="1.6 WCF"></a>1.6 WCF</h2><p>纯网络服务，读取数据库、向数据库输入数据</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">string</span> <span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"hello world!!!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-7-Windows-Store-Application"><a href="#1-7-Windows-Store-Application" class="headerlink" title="1.7 Windows Store Application"></a>1.7 Windows Store Application</h2><p>平板电脑,也是窗体设计<br><code>textBoxShowHello.Text = "Hello World!!!";</code></p><h2 id="1-8-Windows-Phone-Application-已经凉透了？？？"><a href="#1-8-Windows-Phone-Application-已经凉透了？？？" class="headerlink" title="1.8 Windows Phone Application(已经凉透了？？？)"></a>1.8 Windows Phone Application(已经凉透了？？？)</h2><p><code>textBoxShowHello.Text = "Hello World!!!";</code></p><h2 id="1-9-Cloud"><a href="#1-9-Cloud" class="headerlink" title="1.9 Cloud"></a>1.9 Cloud</h2><p>云计算 Azure<br><code>&lt;h1&gt;Hello World!&lt;h1&gt;</code></p><h2 id="1-10-WF"><a href="#1-10-WF" class="headerlink" title="1.10 WF"></a>1.10 WF</h2><p>窗体设计<br>直接在 writeline 控件里写<br><code>"hello world!!!"</code></p><h1 id="2-类与名称空间"><a href="#2-类与名称空间" class="headerlink" title="2. 类与名称空间"></a>2. 类与名称空间</h1><p><strong>class &amp; namespace</strong></p><h2 id="2-1-剖析-Hello-World-程序"><a href="#2-1-剖析-Hello-World-程序" class="headerlink" title="2.1 剖析 Hello World 程序"></a>2.1 剖析 Hello World 程序</h2><ul><li>类是构成程序的主体</li><li>名称空间是以树型结构组织类（和其他类型），如 Button 类和 Path 类</li></ul><p>Console App : <code>Console.WriteLine("Hello World~");</code></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">;</span><span class="token keyword">namespace</span> ConsoleApphello<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类 class <code>Program</code>(自己写的)和<code>Console</code>(调用 C#的类)<br><code>WriteLine</code>方法</p><p>名称空间 namespace <code>HelloWorld</code>，默认跟创建 project 时名称一样</p><p><strong>核心理解：</strong></p><p><strong>又如<code>System</code>名称空间中的<code>Console</code>类，类中的<code>WriteLine</code>方法</strong></p><p><strong><code>using System</code></strong> 跟 python 中的<code>import</code>差不多</p><p>就是：<br>有<code>using System;</code> 直接用<code>Console.WriteLine</code><br>没有<code>using System;</code>则必须用<code>System.Console.WriteLine</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python多线程学习</title>
      <link href="/2020/04/04/python-threading/"/>
      <url>/2020/04/04/python-threading/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-初步认识多线程"><a href="#1-初步认识多线程" class="headerlink" title="1. 初步认识多线程"></a>1. 初步认识多线程</h1><blockquote><p>参考<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017627212385376" target="_blank" rel="noopener">廖雪峰老师的教程</a></p></blockquote><p><strong>多进程和多线程</strong><br>我的理解就是<strong>单个CPU</strong>可以执行一个或多个进程，每个任务执行很短时间，从而骗过人的感觉，让我们感觉好像是多个任务一起进行，而<strong>多核CPU</strong>可以并行执行多任务，如果任务数量超过CPU的数量，则会让一个CPU轮流执行多个任务<br>每个进程，也就是每个任务中又分为很多个子任务，也就是线程，一个进程中可以启动多个线程，各个线程中的任务可以同时进行</p><p>Python中的多任务执行有三种方式：</p><ul><li>多进程模式，多个python程序同时进行，每个程序一个线程</li><li>多线程模式，一个python程序同时进行多个线程</li><li>多进程+多线程，这种模型非常复杂，我的脑子不够用，就不用了</li></ul><p>我也想要执行一个任务，直来直去，但是总有种情况，我迫不得已要多任务同时进行，我太难了<br>比如我做的GUI，要求可以执行多个任务，但是也要能够暂停其中的一个任务，其他任务不受干扰，好了，废话不多说了，开始学习</p><h1 id="2-线程基础"><a href="#2-线程基础" class="headerlink" title="2. 线程基础"></a>2. 线程基础</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 引入线程函数threading</span><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">def</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行的程序'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 增加一个线程</span>th <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>fund<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开始进程</span>th<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等到一个进程结束时退出</span>th<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考知乎的大佬写的教程<br>作者：Dwzb<br>链接：<a href="https://zhuanlan.zhihu.com/p/34004179" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34004179</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h2 id="2-1-线程的开始"><a href="#2-1-线程的开始" class="headerlink" title="2.1 线程的开始"></a>2.1 线程的开始</h2><p><code>th.start()</code> 可以放到循环中，同时进行多个线程</p><h2 id="2-2-线程结束时停止"><a href="#2-2-线程结束时停止" class="headerlink" title="2.2 线程结束时停止"></a>2.2 线程结束时停止</h2><p><code>th.join()</code> 加上这句话，则多线程只能一个结束后执行下一个<br>如果没有这句语句，就会直接用多线程开始执行，不会等一个结束再执行下一个</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Threadt <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>ths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    th <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target <span class="token operator">=</span> myfun<span class="token punctuation">)</span>    th<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    ths<span class="token punctuation">.</span>append<span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token keyword">for</span> th <span class="token keyword">in</span> ths<span class="token punctuation">:</span>    th<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果为 1.0038363933563232</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-线程的名称"><a href="#2-3-线程的名称" class="headerlink" title="2.3 线程的名称"></a>2.3 线程的名称</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    th <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target <span class="token operator">=</span> myfun<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'thread {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    th<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出结果</span>MainThreadthread <span class="token number">0</span>thread <span class="token number">1</span>thread <span class="token number">4</span>thread <span class="token number">3</span>thread <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>threading.current_thread()</code>表示当前线程，可以调用<code>name</code>或<code>getName()</code>获取线程名称</li><li>任何进程的都会有一个主线程，这个进程与新加的线程是相互独立的</li><li><code>Thread</code>表示启动一个新的线程<code>name</code>参数表示线程的名字</li><li><code>threading.current_thread().getName()</code>是主进程名字<code>MainThread</code>,<code>th.name</code>则是子thread名字</li></ul><h2 id="2-4-Thread函数"><a href="#2-4-Thread函数" class="headerlink" title="2.4 Thread函数"></a>2.4 Thread函数</h2><p>参数介绍：</p><ul><li><code>target</code> 线程执行的函数</li><li><code>name</code> 线程的名称</li><li><code>args</code> target对应得函数得参数，用元组传入，比如<code>func(age,name)</code> <code>Thread(target = func , args = (13, 'name'))</code></li><li><code>daemon</code> 主线程默认是false，，如果没有指定则继承父线程的值。True则如果主线程运行结束，该线程也停止运行；False则该线程会继续运行直到运行结束，无视主线程如何</li><li><code>group</code> 是预留的一个参数，用于以后扩展ThreadGroup类，现在没用</li></ul><h2 id="2-5-Thread对象"><a href="#2-5-Thread对象" class="headerlink" title="2.5 Thread对象"></a>2.5 Thread对象</h2><p>属性和方法：</p><ul><li>name 线程名称</li><li>ident 线程标识符号</li><li>daemon 是否为守护线程</li></ul><p><strong>_init</strong>(self, group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None)<br>参数：</p><ul><li><p>group 无用，保留参数</p></li><li><p>target 可调用的目标</p></li><li><p>name 线程的名称</p></li><li><p>args,kwargs 调用目标的参数</p></li><li><p>daemon 是否为守护线程</p></li><li><p>start() 开始执行</p></li><li><p>join(timeout=None) 阻塞timeout秒，否则直到启动的线程终止前一直挂起</p></li><li><p>is_alive () 线程是否存活</p></li><li><p>isDaemon() 是否为守护线程</p></li><li><p>setDaemon(daemonic) 设置为守护线程</p></li><li><p>getName()  .name  获取线程名</p></li><li><p>setName() 设置线程名</p></li><li><p>start()  join()</p></li><li><p>join()有一个timeout参数，表示等待这个线程结束时，如果等待时间超过这个时间，就不再等，继续进行下面的代码，但是这个线程不会被中断</p></li><li><p>run() 也是运行这个线程，但是必须等到这个线程运行结束才会继续执行之后的代码（如果将上面的start全换成run则相当于没有开多线程）</p></li><li><p>is_alive()如果该线程还没运行完，就是True否则False</p></li><li><p>daemon 返回该线程的daemon</p></li><li><p>setDaemon(True)设置线程的daemon</p></li></ul><h2 id="2-6-threading"><a href="#2-6-threading" class="headerlink" title="2.6 threading"></a>2.6 threading</h2><ul><li>threading.currentThread(): 返回当前的线程变量</li><li>threading.enumerate(): 返回一个包含正在运行的线程的list</li><li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果</li></ul><p>threading模块的类对象</p><ul><li>Thread 执行线程</li><li>Timer 在运行前等待一段时间的执行线程</li><li>Lock 原语锁（互斥锁，简单锁）</li><li>RLock 重入锁，使单一线程可以（再次）获得已持有的锁</li><li>Condition 条件变量，线程需要等待另一个线程满足特定条件</li><li>Event 事件变量，N个线程等待某个事件发生后激活所有线程</li><li>Semaphore 线程间共享资源的寄存器</li><li>BoundedSemaphore 与Semaphore 相似，它不允许超过初始值</li><li>Barrie 执行线程达到一定数量后才可以继续</li></ul><p>threading模块的函数</p><ul><li>activeCount() 获取当前活动中的Thread对象个数</li><li>currentThread() 获取当前的Thread对象</li><li>enumerate() 获取当前活动的Thread对象列表</li><li>settrace(func) 为所有线程设置一个跟踪（trace）函数</li><li>setprofile(func) 为所有线程设置配置文件（profile）函</li><li>stack_size(size=None) 获取新创建线程的栈大小，也可设置线程栈的大小为size。</li></ul><h1 id="3-线程进阶"><a href="#3-线程进阶" class="headerlink" title="3. 线程进阶"></a>3. 线程进阶</h1><h2 id="3-1-派生Thread-的子类，并创建子类的实例"><a href="#3-1-派生Thread-的子类，并创建子类的实例" class="headerlink" title="3.1 派生Thread 的子类，并创建子类的实例"></a>3.1 派生Thread 的子类，并创建子类的实例</h2><p>我们可以通过继承Thread类，派生出一个子类，使用子类来创建多线程</p><p><strong>记住要在子类中初始化父类的方法Thread.<strong>init</strong>(self) 。需要重构 run() 方法来执行多线程的程序</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token punctuation">,</span> ctime<span class="token comment" spellcheck="true"># 创建 Thread 的子类 </span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param func: 可调用的对象        :param args: 可调用对象的参数        '''</span>        Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 不要忘记调用Thread的初始化方法</span>        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---开始---'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'时间'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span>sec<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***结束***'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'时间'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建 Thread 实例</span>    t1 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动线程运行</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待所有线程执行完毕</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-获取可调用对象的返回值"><a href="#3-2-获取可调用对象的返回值" class="headerlink" title="3.2 获取可调用对象的返回值"></a>3.2 获取可调用对象的返回值</h2><p>在多线程中运行的程序时与主线程分开，我们没法直接获取线程中程序的返回值。这时就可以使用派生Thread 的子类，将给过保存的实例属性中，通过一个新方法获取运行结果</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token punctuation">,</span> ctime<span class="token comment" spellcheck="true"># 创建 Thread 的子类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param func: 可调用的对象        :param args: 可调用对象的参数        '''</span>        Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args        self<span class="token punctuation">.</span>result <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>result <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getResult</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>result<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sec<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---开始---'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'时间'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span>sec<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'***结束***'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'时间'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sec<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建 Thread 实例</span>    t1 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动线程运行</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待所有线程执行完毕</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 或线程中程序的运行结果</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>getResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>getResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-多线程的同步问题"><a href="#3-3-多线程的同步问题" class="headerlink" title="3.3 多线程的同步问题"></a>3.3 多线程的同步问题</h2><p>一般在多线程代码中，总会有一些特定的函数或代码块不想被多个线程同时执行，如：修改数据库、更新文件或其他会产生程序冲突的类似情况</p><p>当任意数量的线程可以访问临界区的代码，当在同一时刻只能有一个线程可以通过时，就需要使用同步。我们可以选择合适的同步原语，也可以让线程控制机制来执行同步。</p><p>最常用的同理原语有：锁/互斥，以及信号量。锁是最简单最低级的机制。信号量用于多线程竞争有限资源的情况。</p><blockquote><p>强烈推荐<a href="https://zhuanlan.zhihu.com/p/94344847" target="_blank" rel="noopener">大佬的教程</a></p></blockquote><h2 id="3-4-Lock-同步锁（原语锁）"><a href="#3-4-Lock-同步锁（原语锁）" class="headerlink" title="3.4 Lock 同步锁（原语锁）"></a>3.4 Lock 同步锁（原语锁）</h2><h3 id="3-4-1-同步锁的使用"><a href="#3-4-1-同步锁的使用" class="headerlink" title="3.4.1 同步锁的使用"></a>3.4.1 同步锁的使用</h3><p><strong>加锁 与 解锁</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token comment" spellcheck="true"># 创建一个锁对象</span>lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获得锁，加锁</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 释放锁，解锁</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们通过 lock.acquire() 获得锁后线程程将一直执行不会中断，直到该线程 lock.release( )释放锁后线程才有可能被释放(注意：锁被释放后线程不一定会释放)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token comment" spellcheck="true"># 生成一个锁对象</span>lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num  <span class="token comment" spellcheck="true"># 全局变量</span>    <span class="token comment" spellcheck="true"># lock.acquire()  # 获得锁，加锁</span>    num1 <span class="token operator">=</span> num    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># sleep()操作，当在没有锁的情况下线程将在这里被释放出来，让给下一线程运行，而我们的num值还没有被修改，所以后面线程的num1的取值都是100</span>    num <span class="token operator">=</span> num1 <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># lock.release()  # 释放锁，解锁</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token number">100</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 开启100个线程</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待线程运行结束. 等到线程结束后再print num</span><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>    i<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：上面代码先将lock.acquire()和lock.release()行注释掉表示不使用锁，取消lock.acquire()和lock.release()行的注释表示使用锁</p><p>不使用锁程序运行输出为 99；使用锁程序运行结果为0</p><p><strong>Lock 与GIL(全局解释器锁）存在区别</strong></p><ul><li>Lock 锁的目的，它是为了保护共享的数据，同时刻只能有一个线程来修改共享的数据，而保护不同的数据需要使用不同的锁</li><li>GIL用于限制一个进程中同一时刻只有一个线程被CPU调度，GIL的级别比Lock高，GIL是解释器级别</li></ul><p><strong>GIL与Lock同时存在，程序执行如下：</strong></p><blockquote><ol><li>同时存在两个线程：线程A，线程B</li><li>线程A 抢占到GIL，进入CPU执行，并加了Lock，但为执行完毕，线程被释放</li><li>线程B 抢占到GIL，进入CPU执行，执行时发现数据被线程A Lock，于是线程B被阻塞</li><li>线程B的GIL被夺走，有可能线程A拿到GIL，执行完操作、解锁，并释放GIL</li><li>线程B再次拿到GIL，才可以正常执行</li></ol></blockquote><p>通过上述应该能看到，Lock 通过牺牲执行的效率换数据安全</p><h3 id="3-4-2-死锁"><a href="#3-4-2-死锁" class="headerlink" title="3.4.2 死锁"></a>3.4.2 死锁</h3><p>多线程最怕的是遇到死锁，两个或两个以上的线程在执行时，因争夺资源被相互锁住而相互等待</p><p><em>互锁造成死锁</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token comment" spellcheck="true"># 生成一个锁对象</span>lock1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>lock2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fun_A<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fun_B<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun_A</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock1<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A_1 加锁'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        lock2<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A-2 加锁'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        lock2<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A-2 释放'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        lock1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A-1 释放'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun_B</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock2<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B-1 加锁'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        lock1<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B-2 加锁'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        lock1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B-1 释放'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        lock2<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B-2 释放'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># 需要四个以上线程，才会出现死锁现象</span>    t1 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果两个锁同时被多个线程运行，就有可能出现死锁，如果没出现死锁，就多运行几遍就会出现死锁现象</p><h3 id="3-4-3-重入锁-递归锁"><a href="#3-4-3-重入锁-递归锁" class="headerlink" title="3.4.3 重入锁/递归锁"></a>3.4.3 重入锁/递归锁</h3><p><code>threading.RLock()</code><br>为了支持同一个线程中多次请求同一资源，Python 提供了可重入锁(RLock)。这个RLock内部维护着一个锁(Lock)和一个计数器(counter)变量，counter 记录了acquire 的次数，从而使得资源可以被多次acquire。直到一个线程所有 acquire都被release(计数器counter变为0)，其他的线程才能获得资源。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token comment" spellcheck="true"># 生成一个递归对象</span>Rlock <span class="token operator">=</span> threading<span class="token punctuation">.</span>RLock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fun_A<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fun_B<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun_A</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Rlock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A加锁1'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        Rlock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A加锁2'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>        Rlock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A释放1'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        Rlock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A释放2'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun_B</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Rlock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B加锁1'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        Rlock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B加锁2'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        Rlock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B释放1'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        Rlock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B释放2'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当运行到程序B时，即使B休眠了3秒也不会切换线程。</p><p>使用重入锁时，counter 没有变为0(所有的acquire没有被释放掉)，即使遇到长时间的io操作也不会切换线程。</p><h1 id="4-线程实战"><a href="#4-线程实战" class="headerlink" title="4. 线程实战"></a>4. 线程实战</h1><h2 id="4-1-初步的练习和详细解释"><a href="#4-1-初步的练习和详细解释" class="headerlink" title="4.1 初步的练习和详细解释"></a>4.1 初步的练习和详细解释</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理财笔记</title>
      <link href="/2020/04/03/yq-fund/"/>
      <url>/2020/04/03/yq-fund/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="第一次接触的感悟"><a href="#第一次接触的感悟" class="headerlink" title="第一次接触的感悟"></a>第一次接触的感悟</h1><p>  第一次是某个沙雕让我买基金，然后我第一次接触，什么也不懂就买了，短期就涨了很多，然后我傻逼的以为可以直接卖了，然后我就卖了，然后发现他是有一个卖出的时限的，就是你卖的时候要的几天的时间，这几天你买的基金还是会发生变化，hhh，然后等到实际出来的那一天，我就傻了，果然赔了。<br>  现在再回头想想当时，是真的傻，这个基金必须要买的时间足够长，亏得概率才会低，买入的时间越短，就越亏，就先不谈他的手续费就要0.01%或者0.1%，如果你刚买就卖了，必然会亏，买的愈多亏的越多。然后到了现在，3月底，突然想到我没有去学校，也就没有地方花钱，既然钱一直在我手里花不了，那为什么不学学理财什么的，看了看知乎的一些入门教程，试着卖了10块钱的白酒基金，现在赚了一块hhh，现在涨了不少，我果然是傻逼，没有看清楚他的规则，就盲目的买卖，这不亏就有鬼了，但是现在也买上了，就不想了，短期内是不会卖的，就等个一年，然后也会不停地往进买（看准时机），也会慢慢的学一些相关的理财知识吧，慢慢学，慢慢看，不急。然后从今天开始，随缘写一写这篇文吧！！！</p><p>  接着说一下现在的情况吧，现在我的理财状况大致如下：</p><p><img src="/img/life/fund.png" alt="理财现状（悲）"></p><p>就是不知道到时候4.8号的时候是升还是跌了，升了的话就亏得一批，但是又不敢卖(怂着)</p><h1 id="开始学习系统的知识"><a href="#开始学习系统的知识" class="headerlink" title="开始学习系统的知识"></a>开始学习系统的知识</h1><p>还没开始呢？？？</p><h1 id="心情日记（并不是）"><a href="#心情日记（并不是）" class="headerlink" title="心情日记（并不是）"></a>心情日记（并不是）</h1><p>4月10日，雨雪天气<br>  今天的基金又收益了3.04，总体来说这几天我买的几只基都是上涨的，现在白酒投了210，收益了7.37，这支暂时是不会卖的，因为现在卖了的话，亏得一批，然后那支纯债的一周以后就可以卖或者如果有所下降趋势的话就可以继续加买，最后的是投了500的天弘沪深，收益了9.46，感觉这只等到他降了就再买，这支感觉从大趋势来看是一只好基。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中PyQt库的学习</title>
      <link href="/2020/04/02/python-pyqt/"/>
      <url>/2020/04/02/python-pyqt/</url>
      
        <content type="html"><![CDATA[<p><strong>初步的代码理解</strong><br><em>先会用个大概，浅显的理解</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sys<span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span>QtWidgets<span class="token punctuation">,</span>QtGui<span class="token keyword">import</span> clock <span class="token keyword">as</span> cl<span class="token comment" spellcheck="true"># 打开时的提示</span><span class="token keyword">def</span> <span class="token function">tipclock1</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>    label <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token string">'Roman times'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'桌面表针已打开'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tipimg1</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>    label <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token string">'Roman times'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'图像识别已打开'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tipdata1</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>    label <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token string">'Roman times'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'数据分析已打开'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭时的提示</span><span class="token keyword">def</span> <span class="token function">tipclock0</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>    label <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token string">'Roman times'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'桌面表针已关闭'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tipimg0</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>    label <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token string">'Roman times'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'图像识别已关闭'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tipdata0</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>    label <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token string">'Roman times'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'数据分析已关闭'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 主界面</span><span class="token keyword">def</span> <span class="token function">get_gui</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 位置w，位置h，大小w，大小h</span>    w<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">540</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>setWindowIcon<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QIcon<span class="token punctuation">(</span><span class="token string">'7.ico'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    QtWidgets<span class="token punctuation">.</span>QToolTip<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token string">'SansSerif'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>setToolTip<span class="token punctuation">(</span><span class="token string">'This is python'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         label <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>w<span class="token punctuation">)</span>        label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token string">'Roman times'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>            label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'打开桌面模拟表针:'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># tipclock1(w)</span>            <span class="token comment" spellcheck="true"># tipclock0(w)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">:</span>            label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'打开识别图像程序:'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># tipimg1(w)</span>            <span class="token comment" spellcheck="true"># tipimg0(w)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">:</span>            label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'打开数据分析程序:'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># tipdata1(w)</span>            <span class="token comment" spellcheck="true"># tipdata0(w)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">:</span>            label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'打开桌面模拟表针:'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'打开桌面模拟表针:'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># text = QtWidgets.QLineEdit(w)</span>        <span class="token comment" spellcheck="true"># text.setGeometry(QtCore.QRect(150,30,160,30))</span>        button <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span>w<span class="token punctuation">)</span>        button<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">280</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># button.move(150,100)</span>        button<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'打开'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>            button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>cl<span class="token punctuation">.</span>drawuse<span class="token punctuation">)</span>        <span class="token keyword">if</span> button<span class="token punctuation">.</span>isActiveWindow<span class="token punctuation">:</span>            tipclock1<span class="token punctuation">(</span>w<span class="token punctuation">)</span>        button <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span>w<span class="token punctuation">)</span>        button<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        button<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'关闭'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># if i == 0 :</span>            <span class="token comment" spellcheck="true"># button.clicked.connect()</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>    get_gui<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中schedule库的学习</title>
      <link href="/2020/03/31/python-schedule/"/>
      <url>/2020/03/31/python-schedule/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0-零散的知识"><a href="#0-零散的知识" class="headerlink" title="0. 零散的知识"></a>0. 零散的知识</h1><h2 id="0-1-定时截屏"><a href="#0-1-定时截屏" class="headerlink" title="0.1 定时截屏"></a>0.1 定时截屏</h2><blockquote><p>版权声明：本文为CSDN博主「欧阳不小辉」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明<br><a href="https://blog.csdn.net/a180736/java/article/details/79159859" target="_blank" rel="noopener">原文链接</a></p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time <span class="token keyword">import</span> schedule<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageGrab c <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">def</span> <span class="token function">screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    im <span class="token operator">=</span> ImageGrab<span class="token punctuation">.</span>grab<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#截屏</span>    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'F:\python egs\Image\image/'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span><span class="token string">'JPEG'</span><span class="token punctuation">)</span> schedule<span class="token punctuation">.</span>every<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">.</span>do<span class="token punctuation">(</span>screen<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#执行定时截屏</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                                         schedule<span class="token punctuation">.</span>run_pending<span class="token punctuation">(</span><span class="token punctuation">)</span>        c <span class="token operator">=</span> c<span class="token operator">+</span><span class="token number">1</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中PIL库的学习</title>
      <link href="/2020/03/31/python-pil/"/>
      <url>/2020/03/31/python-pil/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0-零散的知识"><a href="#0-零散的知识" class="headerlink" title="0. 零散的知识"></a>0. 零散的知识</h1><h2 id="0-1-截取电脑屏幕"><a href="#0-1-截取电脑屏幕" class="headerlink" title="0.1 截取电脑屏幕"></a>0.1 截取电脑屏幕</h2><p><em>从左上角开始截取，获得八张图片的简单例子</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageGrab<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">50</span>    im <span class="token operator">=</span> ImageGrab<span class="token punctuation">.</span>grab<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># im.show()</span>    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'E:/learn/py/PIL/'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span><span class="token string">'JPEG'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发的基础知识</title>
      <link href="/2020/03/25/note-html-css-js/"/>
      <url>/2020/03/25/note-html-css-js/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>参考资料</strong>（大佬的笔记）</p><blockquote><p>HTML <a href="https://blog.csdn.net/wuyxinu/article/details/103515157" target="_blank" rel="noopener">https://blog.csdn.net/wuyxinu/article/details/103515157</a><br>CSS <a href="https://blog.csdn.net/wuyxinu/article/details/103583618" target="_blank" rel="noopener">https://blog.csdn.net/wuyxinu/article/details/103583618</a><br>JS <a href="https://blog.csdn.net/wuyxinu/article/details/103642800" target="_blank" rel="noopener">https://blog.csdn.net/wuyxinu/article/details/103642800</a><br>JS-下 <a href="https://blog.csdn.net/wuyxinu/article/details/103646041" target="_blank" rel="noopener">https://blog.csdn.net/wuyxinu/article/details/103646041</a><br>还有 jQuery 的 <a href="https://blog.csdn.net/wuyxinu/article/details/103669718" target="_blank" rel="noopener">https://blog.csdn.net/wuyxinu/article/details/103669718</a><br>Node.js + Gulp 知识点汇总 <a href="https://blog.csdn.net/wuyxinu/article/details/103774211" target="_blank" rel="noopener">https://blog.csdn.net/wuyxinu/article/details/103774211</a></p></blockquote><p><strong>学习思路</strong></p><ul><li><input checked="" disabled="" type="checkbox"> HTML 入门 </li><li><input disabled="" type="checkbox"> CSS 入门 </li><li><input disabled="" type="checkbox"> HTML 进阶 </li><li><input disabled="" type="checkbox"> CSS 进阶 </li><li><input disabled="" type="checkbox"> JavaScript 入门</li><li><input disabled="" type="checkbox"> jQuery 入门 </li><li><input disabled="" type="checkbox"> ASP.NET 入门（或 PHP 入门）</li><li><input disabled="" type="checkbox"> Ajax</li><li><input disabled="" type="checkbox"> ASP.NET 进阶（或 PHP 进阶）</li></ul><h1 id="1-html-html5-的基础"><a href="#1-html-html5-的基础" class="headerlink" title="1. html/html5 的基础"></a>1. html/html5 的基础</h1><ul><li><strong>1、什么是 HTML?</strong><br>HTML 是用来描述网页的一种语言<br>HTML 指超文本标记语言( Hyper Text Markup Language)<br>HTML 不是编程语言,是一种标记语言</li><li>2、<strong>HTML5 的新特性</strong><br>用于绘画的 canvas 标签<br>用于媒介回放的 vdeo 和 audo 元素<br>对本地离线储存的更好支持<br>新的特殊内容元素,如: article、 footer、 header、nav、 section<br>新的表单控件如: calendar、date、time、emai、url、 search</li></ul><h2 id="1-1-html-基础结构"><a href="#1-1-html-基础结构" class="headerlink" title="1.1 html 基础结构"></a>1.1 html 基础结构</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  #html file<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meta</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> #html main&lt;h1 align = "center">    <span class="token comment" spellcheck="true">&lt;!--head first    居中center   h1~6--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    #paragraph&lt;a href = "http://wfaief.com">this is a link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-页头-head"><a href="#1-2-页头-head" class="headerlink" title="1.2 页头 head"></a>1.2 页头 head</h2><ul><li>title 定义网页的标题</li><li>meta 定义网页的基本信息</li><li>style 定义 css 样式</li><li>link 定义链接外部 css 文件或脚本文件</li></ul><ul><li>script 定义脚本语言</li><li>base 定义页面所有链接的基本定位</li></ul><h2 id="1-3-页身-body"><a href="#1-3-页身-body" class="headerlink" title="1.3 页身 body"></a>1.3 页身 body</h2><h3 id="1-3-1-段落与文字"><a href="#1-3-1-段落与文字" class="headerlink" title="1.3.1 段落与文字"></a>1.3.1 段落与文字</h3><ul><li>段落<ul><li>h1~h6 多级标题</li><li>p 段落</li><li>br 换行<code>&lt;br/&gt;</code></li><li>hr 水平线<code>&lt;hr/&gt;</code></li><li>div 分割-块元素</li><li>span 区域-行内元素</li></ul></li><li>文字<ul><li>strong 加强-粗体</li><li>em 强调-斜体</li><li>cite 引用</li><li>sup 上标</li><li>sub 下标</li></ul></li><li>网页特殊符号<ul><li><code>&amp;nbsp;</code>空格</li></ul></li></ul><p><em>div和span没有任何语义,正是因为没有语义，这两个标签一般都是配合CSS来定义元素 样式的</em></p><ul><li><p>div是块元素，可以包含任何块元素和行内元素，不会与其他元素位于同一行；span 是行内元素，可以与其他行内元素位于同一行。</p></li><li><p>div常用于页面中较大块的结构划分，然后配合CSS来操作；span 一般用来包含文字等, 它没有结构的意义，纯粹是应用样式。当其他行内元素都不适合的时候，可以用span来配合CSS 操作</p></li></ul><h3 id="1-3-2-列表"><a href="#1-3-2-列表" class="headerlink" title="1.3.2 列表"></a>1.3.2 列表</h3><ul><li>ol 有序列表</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>有序列表项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>有序列表项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>有序列表项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>type 属性： 数字 123--- 小写字母 abc--- 大写字母 ABC--- 小写罗马数字i、ii、iii…… 大写罗马数字 I、II、III……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ul 无序列表（重点）</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>列表项符号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>无序列表项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>无序列表项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>无序列表项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>type 属性值 disc 默认值，实心圆“●” circle 空心圆“○” square 实心正方形“■”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>dl 定义列表</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>定义名词<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>定义描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  ……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-3-表格"><a href="#1-3-3-表格" class="headerlink" title="1.3.3 表格"></a>1.3.3 表格</h3><ul><li><p>基本结构</p><ul><li>table 表格</li><li>tr 表格行</li><li>td 单元格</li></ul></li><li><p>完整结构</p><ul><li>caption 标题</li><li>thead 表头</li><li>th 表头单元格</li><li>tbody 表身</li><li>tfoot 表脚</li><li>td rowspan 合并行<br><code>&lt;td rowspan="跨度的行数"&gt;</code></li><li>td colspan 合并列<br><code>&lt;td colspan="跨度的列数"&gt;</code></li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span>    <span class="token attr-name">&lt;cation</span><span class="token punctuation">></span></span>表格标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cation</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--头--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>表头单元格1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>表头单元格2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--表身--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--表脚--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-4-图像"><a href="#1-3-4-图像" class="headerlink" title="1.3.4 图像"></a>1.3.4 图像</h3><p><code>&lt;img src="图片地址" alt="图片描述（给搜索引擎看）" title="图片描述"&gt;</code></p><ul><li>src 图像的文件地址</li><li>alt 图片显示不出来时提示的文字</li><li>title 鼠标移动到图片上的提示文字</li></ul><h3 id="1-3-5-链接"><a href="#1-3-5-链接" class="headerlink" title="1.3.5 链接"></a>1.3.5 链接</h3><ul><li>href 链接</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>链接地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>目标窗口的打开方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  target 属性值 \_self 默认方式，即在当前窗口打开链接 \_blank  在一个全新的空白窗口中打开链接 \_top 在顶层框架中打开链接 \_parent  在当前框架的上一层里打开链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>内部链接</p></li><li><p>锚点链接</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#music<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>推荐音乐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>music<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>内部页面链接</p></li><li><p>外部链接</p></li></ul><h3 id="1-3-6-表单"><a href="#1-3-6-表单" class="headerlink" title="1.3.6 表单"></a>1.3.6 表单</h3><ul><li>input 的 type 中的属性<br><code>&lt;input type="表单类型"/&gt;</code></li></ul><pre><code>- text单行文本框- password密码文本框- button按钮- reset重置按钮- image图像形式的提交按钮- radio单选按钮- checkbox复选框- hidden隐藏字段- file文件上传</code></pre><ul><li><p>textarea<br><code>&lt;textarea rows="行数" cols="列数"&gt;多行文本框内容&lt;/textarea&gt;</code> 多行文本框</p></li><li><p>select</p></li><li><p>option</p></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mutiple<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>可见列表项的数目<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选项值<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项显示的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  ……  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选项值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项显示的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-7-多媒体"><a href="#1-3-7-多媒体" class="headerlink" title="1.3.7 多媒体"></a>1.3.7 多媒体</h3><ul><li><p>embed 音频视频<br><code>&lt;embed src="多媒体文件地址" width="播放界面的宽度" height="播放界面的高度"&gt;&lt;/embed&gt;</code><br>src 可以是绝对地址也可以是相对地址<br>width 和 height 使用 px 作为单位</p></li><li><p>bgsound 背景音乐-只适用 ie 浏览器<br><code>&lt;bgsound src="背景音乐的地址"/&gt;</code></p></li></ul><p>loop=”2”表示重复 2 次，loop=”infinite”表示无限次循环播放，也可以使用 loop=”-1”表示无限次循环播放。</p><h3 id="1-3-8-浮动框架"><a href="#1-3-8-浮动框架" class="headerlink" title="1.3.8 浮动框架"></a>1.3.8 浮动框架</h3><p>浮动框架是一种较为特殊的框架，它是在浏览器窗口中嵌套的子窗口，整个页面并不一定是框架页面，但要包含一个框架窗口</p><ul><li>iframe</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浮动框架的源文件<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浮动框架的宽<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浮动框架的高<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>width、height宽高 scrolling滚动条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浮动框架的源文件<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浮动框架的宽<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>浮动框架的高<span class="token punctuation">"</span></span>  <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>取值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取值</p><ul><li>auto 默认整个表格左对齐</li><li>yes 总是显示滚动条</li><li>no 任何情况不显示滚动条</li></ul><h2 id="1-4-HTML-XHTML-HTML5-简介"><a href="#1-4-HTML-XHTML-HTML5-简介" class="headerlink" title="1.4 HTML XHTML HTML5 简介"></a>1.4 HTML XHTML HTML5 简介</h2><h3 id="1-4-1-XHTML"><a href="#1-4-1-XHTML" class="headerlink" title="1.4.1 XHTML"></a>1.4.1 XHTML</h3><p>xhtml 比 html 更加严格</p><ul><li>1、XHTML 标签必须闭合</li><li>2、XHTML 标签以及属性必须小写</li><li>3、XHTML 标签属性必须用引号</li><li>4、XHTML 标签用 jd 属性代替 name 属</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      “<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>Red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>视觉化思考<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>”能以独特而有效的方式，让你的心有更大的空间来解决问题。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-2-HTML5"><a href="#1-4-2-HTML5" class="headerlink" title="1.4.2 HTML5"></a>1.4.2 HTML5</h3><p>HTML 5 除了新增部分标签之外，还增加了一组技术，包括 canvas、SVG、WebSocket.本地存储等。这些新增的技术都是使用 JavaScript 来操作。也就是说，HTML 5 使得 HTML 从一门“标记语言” 转变为一门 <strong>“编程语言”</strong></p><ul><li>声明更简洁 <code>&lt;!DOCTYPE html&gt;</code></li><li>不再区分大小写 <code>&lt;div&gt;绿叶学习网&lt;/DIV&gt;</code></li><li>允许属性值不加引号 <code>&lt;div id=wrapper style=co1or: red&gt; 绿叶学习网 &lt;/div&gt;</code></li><li>允许部分属性的属性值省略<ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ntext<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><table><thead><tr><th>省略形式</th><th>等价于</th></tr></thead><tbody><tr><td>checked</td><td>checked=”nchecked”</td></tr><tr><td>readonly</td><td>readonly=”readonly”</td></tr><tr><td>defer</td><td>defer=”defer”</td></tr><tr><td>ismap</td><td>ismap=”ismap”</td></tr><tr><td>nohref</td><td>nohref=”nohref”</td></tr><tr><td>noshade</td><td>noshade=”noshade”</td></tr><tr><td>nowrap</td><td>nowrap=”nowrap”</td></tr><tr><td>selected</td><td>selected=”selected”</td></tr><tr><td>disabled</td><td>ciisabled=”disableci”</td></tr><tr><td>multiple</td><td>multiple=”multiple”</td></tr><tr><td>noresize</td><td>noresize=”disabled”</td></tr></tbody></table><h2 id="1-5-知识点"><a href="#1-5-知识点" class="headerlink" title="1.5 知识点"></a>1.5 知识点</h2><h3 id="1-5-1-class与id"><a href="#1-5-1-class与id" class="headerlink" title="1.5.1 class与id"></a>1.5.1 class与id</h3><p>class,顾名思义，就是“类”。它釆用的思想跟C、Java等编程语言中的“类”相似。 我们可以为同一个页面的相同元素或者不同元素设置相同的class,然后使得相同class的元 素具有相同的CSS样式</p><p>id属性具有唯一性，也就是说在一个页面中相同的id只允许出现一次<br>W3C建议，对 于页面关键的结构或者大结构，我们才使用id。所谓的关键结构，指的是诸如LOGO、导航、 主体内容、底部信息栏等结构。对于一些小地方，还是建议使用class属性</p><h3 id="1-5-2-浏览器标题栏小图标"><a href="#1-5-2-浏览器标题栏小图标" class="headerlink" title="1.5.2 浏览器标题栏小图标"></a>1.5.2 浏览器标题栏小图标</h3><p>放在head里面</p><p><code>&lt;link rel="shortcut icon" type="image/x-icon" href="favicon.icon"/&gt;</code></p><h3 id="1-5-3-语义化"><a href="#1-5-3-语义化" class="headerlink" title="1.5.3 语义化"></a>1.5.3 语义化</h3><p>即尽可能地不使用div来编写，用自带的语句来编写</p><ul><li><p>标题语义化</p><ul><li>（1）一个页面只能有一个h1标签</li><li>（2）hl ~ h6之间不要断层</li><li>（3）不要用h1 ~ h6来定义样式</li><li>（4）不要用div来代替h1 ~ h6.</li></ul></li><li><p>图片语义化</p><ul><li>（1） alt属性和title属性<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片描述(给搜索引擎看)<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片描述(给用户看)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>（2） figure 元素和 figcaption 元素<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>图注文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>表格语义化（在实际开发中，我们不建议使用表格布局，应该使用浮动布局或者定位布局）</p><ul><li><p>th表示“表头单元格”</p></li><li><p>caption表示“表格标题”</p></li><li><p>thead、tbody和tfoot这3个标签把表格从语义上分为三部分: 表头、表身和表脚</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.body</span> </span><span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span> 表格标题 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!--表头--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>表头单元格l<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>表头单元格2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--表身--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格l<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格l<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--表脚--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格l<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>标准单元格2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>表单语义化</p><ul><li><p>（1）label 标签</p></li><li><p>（2）fieldset 标签和 legend 标签</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.aspx<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>登录绿叶学习网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 记住我 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>其他语义化</p><ul><li>换行符 <code>&lt;br/&gt;</code>只适合用于p标签内 部的换行，不能用于其他标签</li><li>在实际开发中，大多数情况下都是使用无序列表ul，极少情况下会使用有序列表</li><li>strong标签和em标签 <strong>加粗</strong>和<em>斜体</em></li><li>del标签和ins标签   <del>删除线</del> 和 <ins>下划线</ins></li><li>img标签</li></ul></li><li><p>语义化验证：去掉css，要有好的可读性</p></li><li><p>html5删除地标签</p></li></ul><table><thead><tr><th align="left">标签</th><th>说明</th></tr></thead><tbody><tr><td align="left">basefont</td><td>定义页面文本默认字体，颜色，尺寸</td></tr><tr><td align="left">big</td><td>定义大字号文本</td></tr><tr><td align="left">center</td><td>定义文本居中</td></tr><tr><td align="left">font</td><td>定义文本的字体样式</td></tr><tr><td align="left">strike</td><td>定义删除线文本</td></tr><tr><td align="left">s</td><td>定义删除线文本</td></tr><tr><td align="left">u</td><td>定义下划线文本</td></tr><tr><td align="left">dir</td><td>定义目录列表，应该用ul代替</td></tr><tr><td align="left">acronym</td><td>定义首字母缩写，应该用abbr代替</td></tr><tr><td align="left">isindex</td><td>定义与文档相关的可搜索索引</td></tr><tr><td align="left">applet</td><td>定义嵌入的applet,应该用object代替</td></tr><tr><td align="left">frame</td><td>定义frameset中的一个特定的框架</td></tr><tr><td align="left">frameset</td><td>定义一个框架集</td></tr><tr><td align="left">noframes</td><td>为那些不支持框架的浏览器显示文本</td></tr></tbody></table><h2 id="1-6-HTML5"><a href="#1-6-HTML5" class="headerlink" title="1.6 HTML5"></a>1.6 HTML5</h2><h3 id="1-6-1-新的语义化标签"><a href="#1-6-1-新的语义化标签" class="headerlink" title="1.6.1 新的语义化标签"></a>1.6.1 新的语义化标签</h3><ul><li>header头部标签</li><li>nav导航标签</li><li>article内容标签</li><li>section块级标签</li><li>aside侧边栏标签</li><li>footer尾部标签</li></ul><h3 id="1-6-2-多媒体音频标签"><a href="#1-6-2-多媒体音频标签" class="headerlink" title="1.6.2 多媒体音频标签"></a>1.6.2 多媒体音频标签</h3><ul><li>audio音频<br>可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，但是：播放格式是有限的<ul><li>autoplay自动播放</li><li>controls出现该属性，则向用户显示控件</li><li>loop每当音频结束时自动重新播放</li><li>src音频地url</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/snow.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/mpeg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>video视频<ul><li>autoplay自动播放</li><li>controls出现该属性，则向用户显示控件</li><li>width px 宽</li><li>height px 高</li><li>loop每当音频结束时自动重新播放</li><li>src音频地url</li><li>preload 预先加载</li><li>poster 加载等待地画面图片imgurl</li><li>muted 静音播放</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;video src="./media/video.mp4" controls="controls">&lt;/video> --></span>​  <span class="token comment" spellcheck="true">&lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">muted</span> <span class="token attr-name">loop</span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/pig.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/video.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/video.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-3-新增-input-标签"><a href="#1-6-3-新增-input-标签" class="headerlink" title="1.6.3 新增 input 标签"></a>1.6.3 新增 input 标签</h3><p><img src="https://img-blog.csdnimg.cn/20191229133014181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eXhpbnU=,size_16,color_FFFFFF,t_70" alt="input标签"></p><h3 id="1-6-4-新增表单属性"><a href="#1-6-4-新增表单属性" class="headerlink" title="1.6.4 新增表单属性"></a>1.6.4 新增表单属性</h3><p><img src="https://img-blog.csdnimg.cn/20191229133048182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1eXhpbnU=,size_16,color_FFFFFF,t_70" alt="表单属性"></p><h1 id="2-css-的基础"><a href="#2-css-的基础" class="headerlink" title="2. css 的基础"></a>2. css 的基础</h1><p>CSS是什么？CSS，即“Cascading Style Sheet（层叠样式表）”，是用来控制网页的外观的一门技术</p><h2 id="2-1-css的引入"><a href="#2-1-css的引入" class="headerlink" title="2.1 css的引入"></a>2.1 css的引入</h2><p>外部样式表、内部样式表、内联样式表</p><h3 id="2-1-1-外部样式表"><a href="#2-1-1-外部样式表" class="headerlink" title="2.1.1 外部样式表"></a>2.1.1 外部样式表</h3><p>把CSS代码和HTML代码都单独放在不同文件中，然后在HTML文档中使用link标签来引用CSS样式表</p><p>外部样式表都是在head标签内使用link标签来引用的</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-1-2-内部样式表"><a href="#2-1-2-内部样式表" class="headerlink" title="2.1.2 内部样式表"></a>2.1.2 内部样式表</h3><p>指的就是把CSS代码和HTML代码放在同一个文件中，其中CSS代码是放在<strong>标签对内的</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--这是内部样式表，CSS样式在style标签中定义--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">          <span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>Red<span class="token punctuation">;</span><span class="token punctuation">}</span>          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>绿叶学习网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>绿叶学习网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-3-内联样式表"><a href="#2-1-3-内联样式表" class="headerlink" title="2.1.3 内联样式表"></a>2.1.3 内联样式表</h3><p>也是把CSS代码和HTML代码放在同一个文件中，但是跟内部样式表不同，CSS样式不是在<style></style>标签对中定义，而是<strong>在标签的style属性中定义</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>Red<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绿叶学习网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>Red<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绿叶学习网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>Red<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绿叶学习网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-元素的id和class"><a href="#2-2-元素的id和class" class="headerlink" title="2.2 元素的id和class"></a>2.2 元素的id和class</h2><p>id属性是唯一的，class可以有多个<br><code>&lt;div id="first"&gt;绿叶学习网&lt;/div&gt;</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绿叶学习网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>绿叶学习网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-3-css选择器"><a href="#2-3-css选择器" class="headerlink" title="2.3 css选择器"></a>2.3 css选择器</h2><p>将想要的标签选中，然后再操作标签</p><p>选择器</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">{</span>    样式属性<span class="token property">1</span><span class="token punctuation">:</span>取值<span class="token number">1</span><span class="token punctuation">;</span>    样式属性<span class="token property">2</span><span class="token punctuation">:</span>取值<span class="token number">2</span><span class="token punctuation">;</span>    ……<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-1-基本选择器"><a href="#2-3-1-基本选择器" class="headerlink" title="2.3.1 基本选择器"></a>2.3.1 基本选择器</h3><h4 id="2-3-1-1-元素选择器"><a href="#2-3-1-1-元素选择器" class="headerlink" title="2.3.1.1 元素选择器"></a>2.3.1.1 元素选择器</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">元素符号 </span><span class="token punctuation">{</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3-1-2-id选择器"><a href="#2-3-1-2-id选择器" class="headerlink" title="2.3.1.2 id选择器"></a>2.3.1.2 id选择器</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#box</span> </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token id">#id</span>属性值 </span><span class="token punctuation">{</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3-1-3-class选择器"><a href="#2-3-1-3-class选择器" class="headerlink" title="2.3.1.3 class选择器"></a>2.3.1.3 class选择器</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.red</span> </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token class">.class</span>属性值 </span><span class="token punctuation">{</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3-1-4-子元素选择器"><a href="#2-3-1-4-子元素选择器" class="headerlink" title="2.3.1.4 子元素选择器"></a>2.3.1.4 子元素选择器</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#father1</span> <span class="token id">#p1</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#父元素选择 #子元素选择 </span><span class="token punctuation">{</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">}</span>&lt;div id=<span class="token string">"father1"</span>>    &lt;div id=<span class="token string">"p1"</span>>绿叶学习网&lt;/div>    &lt;div>绿叶学习网&lt;/div>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-1-5-相邻选择器"><a href="#2-3-1-5-相邻选择器" class="headerlink" title="2.3.1.5 相邻选择器"></a>2.3.1.5 相邻选择器</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#lv</span> + div </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#元素a + 元素a相邻的兄弟元素 </span><span class="token punctuation">{</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">}</span>则是第三个div文本为红色red&lt;div>绿叶学习网&lt;/div>&lt;div id=<span class="token string">"lv"</span>>    &lt;p>绿叶学习网&lt;/p>&lt;/div>&lt;div>绿叶学习网&lt;/div>&lt;div>绿叶学习网&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-1-6-群组选择器"><a href="#2-3-1-6-群组选择器" class="headerlink" title="2.3.1.6 群组选择器"></a>2.3.1.6 群组选择器</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">h3,div,p,span </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-4-文本样式"><a href="#2-4-文本样式" class="headerlink" title="2.4 文本样式"></a>2.4 文本样式</h2><ul><li>font-family 字体名：微软雅黑等等<br><code>font-family:微软雅黑;</code></li><li>font-size 字体大小: px/百分比/em<br><code>font-size:15px;</code></li><li></li></ul><h1 id="3-js-的基础"><a href="#3-js-的基础" class="headerlink" title="3. js 的基础"></a>3. js 的基础</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己写的几个python小程序</title>
      <link href="/2020/03/21/example-python/"/>
      <url>/2020/03/21/example-python/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-每日手动记录支付宝基金余额"><a href="#1-每日手动记录支付宝基金余额" class="headerlink" title="1. 每日手动记录支付宝基金余额"></a>1. 每日手动记录支付宝基金余额</h1><h2 id="1-1-只有一支基金时的代码"><a href="#1-1-只有一支基金时的代码" class="headerlink" title="1.1 只有一支基金时的代码"></a>1.1 只有一支基金时的代码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxl <span class="token keyword">as</span> xl<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>offline <span class="token keyword">as</span> ptly<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>graph_objs <span class="token keyword">as</span> go<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">def</span> <span class="token function">daily_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'日期'</span>    ws<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'基金余额'</span>    ws<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'03/21/20'</span>    ws<span class="token punctuation">[</span><span class="token string">'B2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10.00</span>    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'fund.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">daily_save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filex <span class="token operator">=</span> <span class="token string">"fund.xlsx"</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filex<span class="token punctuation">)</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'fund.xlsx'</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'日期'</span>    ws<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'基金余额'</span>    ws<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'03/21/20'</span>    ws<span class="token punctuation">[</span><span class="token string">'B2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10.00</span>    today <span class="token operator">=</span> datag<span class="token punctuation">(</span><span class="token punctuation">)</span>    td_yues <span class="token operator">=</span> today<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    td_yue <span class="token operator">=</span> td_yues<span class="token punctuation">[</span>sheet<span class="token punctuation">.</span>max_row<span class="token number">-2</span><span class="token punctuation">]</span>    daily <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"\n请输入今天的收益/亏损："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    yue <span class="token operator">=</span> td_yue <span class="token operator">+</span> daily    dt <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%D"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    maxrow <span class="token operator">=</span> sheet<span class="token punctuation">.</span>max_row <span class="token operator">+</span> <span class="token number">1</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>value<span class="token operator">=</span>dt<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>value<span class="token operator">=</span>yue<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'\n数据已保存:{dt} \t {yue} \n'</span><span class="token punctuation">)</span>    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'fund.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">datag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filex <span class="token operator">=</span> <span class="token string">'fund.xlsx'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filex<span class="token punctuation">)</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'fund.xlsx'</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    dts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            dts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            yues<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'fund.xlsx'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dts<span class="token punctuation">,</span>yues<span class="token keyword">def</span> <span class="token function">datalook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'fund.xlsx'</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    dts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            dts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            yues<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>max_row<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>yues<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># def check():</span><span class="token comment" spellcheck="true">#     # 读取Excel中Sheet中的数据</span><span class="token comment" spellcheck="true">#     data = pd.DataFrame(pd.read_excel('fund.xlsx', 'Sheet'))</span><span class="token comment" spellcheck="true">#     # 查看读取数据内容</span><span class="token comment" spellcheck="true">#     print(data)</span><span class="token comment" spellcheck="true">#     # 查看是否有重复行</span><span class="token comment" spellcheck="true">#     re_row = data.duplicated()</span><span class="token comment" spellcheck="true">#     print(re_row)</span><span class="token comment" spellcheck="true">#     # 查看去除重复行的数据</span><span class="token comment" spellcheck="true">#     no_re_row = data.drop_duplicates()</span><span class="token comment" spellcheck="true">#     print(no_re_row)</span><span class="token comment" spellcheck="true">#     # 查看基于[物品]列去除重复行的数据</span><span class="token comment" spellcheck="true">#     wp = data.drop_duplicates(['日期'])</span><span class="token comment" spellcheck="true">#     print(wp)</span><span class="token comment" spellcheck="true">#     # 将去除重复行的数据输出到excel表中</span><span class="token comment" spellcheck="true">#     no_re_row.to_excel("fund.xlsx")</span><span class="token keyword">def</span> <span class="token function">qs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dys <span class="token operator">=</span> datag<span class="token punctuation">(</span><span class="token punctuation">)</span>    dts <span class="token operator">=</span> dys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    yues <span class="token operator">=</span> dys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    trace1 <span class="token operator">=</span> go<span class="token punctuation">.</span>Scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>dts<span class="token punctuation">,</span>                        y<span class="token operator">=</span>yues<span class="token punctuation">,</span>                        mode<span class="token operator">=</span><span class="token string">'lines+markers'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># mode可选'markers','lines','lines+markers'</span>                        name<span class="token operator">=</span> <span class="token string">'Money'</span><span class="token punctuation">,</span>                        marker<span class="token operator">=</span>dict<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 若设为变量则可用散点大小表示变量大小</span>                                    color<span class="token operator">=</span><span class="token string">'rgba(152, 0, 0, .8)'</span><span class="token punctuation">,</span>                                    line<span class="token operator">=</span>dict<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                                                color<span class="token operator">=</span><span class="token string">'rgb(0, 0, 0)'</span>                                                <span class="token punctuation">)</span><span class="token punctuation">,</span>                                    opacity<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                                    <span class="token punctuation">)</span>                        <span class="token punctuation">)</span>    data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>trace1<span class="token punctuation">)</span>    axis_template <span class="token operator">=</span> dict<span class="token punctuation">(</span>        showgrid<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 网格</span>        zeroline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 是否显示基线,即沿着(0,0)画出x轴和y轴</span>        nticks<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>        showline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">'Date'</span><span class="token punctuation">,</span>        mirror<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">,</span>        zerolinecolor<span class="token operator">=</span><span class="token string">"#FF0000"</span>    <span class="token punctuation">)</span>    ayis_template <span class="token operator">=</span> dict<span class="token punctuation">(</span>        showgrid<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 网格</span>        zeroline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 是否显示基线,即沿着(0,0)画出x轴和y轴</span>        nticks<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>        showline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">'Money'</span><span class="token punctuation">,</span>        mirror<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">,</span>        zerolinecolor<span class="token operator">=</span><span class="token string">"#FF0000"</span>    <span class="token punctuation">)</span>    layout <span class="token operator">=</span> go<span class="token punctuation">.</span>Layout<span class="token punctuation">(</span>font<span class="token operator">=</span>dict<span class="token punctuation">(</span>family<span class="token operator">=</span><span class="token string">'Courier New, monospace'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#3D3D3D'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        title<span class="token operator">=</span><span class="token string">'基金实况'</span> <span class="token punctuation">,</span>xaxis<span class="token operator">=</span>axis_template<span class="token punctuation">,</span>yaxis<span class="token operator">=</span>ayis_template                        <span class="token punctuation">)</span>    fig <span class="token operator">=</span> go<span class="token punctuation">.</span>Figure<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> layout<span class="token operator">=</span>layout<span class="token punctuation">)</span>    ptly<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>fig<span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'fund.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    filexx <span class="token operator">=</span> <span class="token string">'fund.xlsx'</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filexx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----什么？这是你的第一次？好了，已经帮你弄好了（指初始化）----'</span><span class="token punctuation">)</span>        daily_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'今天是否保存过数据了呢？0/1：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> p <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----哦，你已经好了？那算了----\n'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            daily_save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----好了，保存好了----\n'</span><span class="token punctuation">)</span>    pd <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'想不想看一下趋势图-0/1：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pd <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----那就给你看一下吧----\n'</span><span class="token punctuation">)</span>        qs<span class="token punctuation">(</span><span class="token punctuation">)</span>        datalook<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----既然不想看，那就算了吧----'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后可以再桌面新建一个<code>fund.bat</code>脚本直接运行</p><pre class="line-numbers language-bat"><code class="language-bat">e:cd E:/learn/py/fund    # 进入到fund所在目录python fund.py        # 运行python文件pause                # 让屏幕停留<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>功能：可以记录日常的基金走势，然后记录数据</p><p>不足：不能够自动删除 excel 中的重复的数据，（如同一天的数据）</p><h2 id="1-2-三支基金时的代码"><a href="#1-2-三支基金时的代码" class="headerlink" title="1.2 三支基金时的代码"></a>1.2 三支基金时的代码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> openpyxl <span class="token keyword">as</span> xl<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>offline <span class="token keyword">as</span> ptly<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>graph_objs <span class="token keyword">as</span> go<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment" spellcheck="true"># 数据初始化</span><span class="token keyword">def</span> <span class="token function">daily_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'日期'</span>    ws<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'总额'</span>    ws<span class="token punctuation">[</span><span class="token string">'C1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'嘉合'</span>    ws<span class="token punctuation">[</span><span class="token string">'D1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'白酒'</span>    ws<span class="token punctuation">[</span><span class="token string">'E1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'沪深'</span>    ws<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'04/04/20'</span>    ws<span class="token punctuation">[</span><span class="token string">'B2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">810.00</span>    ws<span class="token punctuation">[</span><span class="token string">'C2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100.00</span>    ws<span class="token punctuation">[</span><span class="token string">'D2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">210.00</span>    ws<span class="token punctuation">[</span><span class="token string">'E2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500.00</span>    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'fund3.xlsx'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据保存</span><span class="token keyword">def</span> <span class="token function">daily_save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filex <span class="token operator">=</span> <span class="token string">"fund3.xlsx"</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filex<span class="token punctuation">)</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'fund3.xlsx'</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'日期'</span>    ws<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'总额'</span>    ws<span class="token punctuation">[</span><span class="token string">'C1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'嘉合'</span>    ws<span class="token punctuation">[</span><span class="token string">'D1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'白酒'</span>    ws<span class="token punctuation">[</span><span class="token string">'E1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'沪深'</span>    ws<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'04/04/20'</span>    ws<span class="token punctuation">[</span><span class="token string">'B2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">810.00</span>    ws<span class="token punctuation">[</span><span class="token string">'C2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100.00</span>    ws<span class="token punctuation">[</span><span class="token string">'D2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">210.00</span>    ws<span class="token punctuation">[</span><span class="token string">'E2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500.00</span>    today <span class="token operator">=</span> datag<span class="token punctuation">(</span><span class="token punctuation">)</span>    td_yues1 <span class="token operator">=</span> today<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    td_yue1 <span class="token operator">=</span> td_yues1<span class="token punctuation">[</span>sheet<span class="token punctuation">.</span>max_row<span class="token number">-2</span><span class="token punctuation">]</span>    td_yues2 <span class="token operator">=</span> today<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    td_yue2 <span class="token operator">=</span> td_yues2<span class="token punctuation">[</span>sheet<span class="token punctuation">.</span>max_row<span class="token number">-2</span><span class="token punctuation">]</span>    td_yues3 <span class="token operator">=</span> today<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    td_yue3 <span class="token operator">=</span> td_yues3<span class="token punctuation">[</span>sheet<span class="token punctuation">.</span>max_row<span class="token number">-2</span><span class="token punctuation">]</span>    daily1 <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"\n请输入嘉和今天的收益/亏损："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    daily2 <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"\n请输入白酒今天的收益/亏损："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    daily3 <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"\n请输入沪深今天的收益/亏损："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    yue1 <span class="token operator">=</span> td_yue1 <span class="token operator">+</span> daily1    yue2 <span class="token operator">=</span> td_yue2 <span class="token operator">+</span> daily2    yue3 <span class="token operator">=</span> td_yue3 <span class="token operator">+</span> daily3    yue0 <span class="token operator">=</span> round<span class="token punctuation">(</span>yue1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> round<span class="token punctuation">(</span>yue2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> round<span class="token punctuation">(</span>yue3<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    dt <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%D"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    maxrow <span class="token operator">=</span> sheet<span class="token punctuation">.</span>max_row <span class="token operator">+</span> <span class="token number">1</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">=</span>dt<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> value<span class="token operator">=</span>yue0<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> value<span class="token operator">=</span>yue1<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> value<span class="token operator">=</span>yue2<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> value<span class="token operator">=</span>yue3<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'\n数据已保存:{dt} \t {yue0} == {yue1} + {yue2} + {yue3} \n'</span><span class="token punctuation">)</span>    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'fund3.xlsx'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据获取</span><span class="token keyword">def</span> <span class="token function">datag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filex <span class="token operator">=</span> <span class="token string">'fund3.xlsx'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filex<span class="token punctuation">)</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'fund3.xlsx'</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    dts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yues1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yues2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yues3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            dts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            yues1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            yues2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            yues3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'fund3.xlsx'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dts<span class="token punctuation">,</span> yues1<span class="token punctuation">,</span> yues2<span class="token punctuation">,</span> yues3<span class="token comment" spellcheck="true"># 看数据</span><span class="token keyword">def</span> <span class="token function">datalook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'fund3.xlsx'</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    dts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yues0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yues1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yues2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    yues3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            dts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            yues0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            yues1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            yues2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            yues3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    yues0r <span class="token operator">=</span> <span class="token punctuation">[</span>round<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> yues0<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'日期'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总额'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'嘉合'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'白酒'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'沪深'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>max_row<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>yues0r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t\t'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>yues1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>yues2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>yues3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 看趋势图</span><span class="token keyword">def</span> <span class="token function">qs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dys <span class="token operator">=</span> datag<span class="token punctuation">(</span><span class="token punctuation">)</span>    dts <span class="token operator">=</span> dys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    yues1 <span class="token operator">=</span> dys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    yues2 <span class="token operator">=</span> dys<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    yues3 <span class="token operator">=</span> dys<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    trace1 <span class="token operator">=</span> go<span class="token punctuation">.</span>Scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>dts<span class="token punctuation">,</span>                        y<span class="token operator">=</span>yues1<span class="token punctuation">,</span>                        mode<span class="token operator">=</span><span class="token string">'lines+markers'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># mode可选'markers','lines','lines+markers'</span>                        name<span class="token operator">=</span><span class="token string">'嘉和'</span><span class="token punctuation">,</span>                        marker<span class="token operator">=</span>dict<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 若设为变量则可用散点大小表示变量大小</span>                                    color<span class="token operator">=</span><span class="token string">'rgba(152, 0, 0, .8)'</span><span class="token punctuation">,</span>                                    line<span class="token operator">=</span>dict<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                                              color<span class="token operator">=</span><span class="token string">'rgb(0, 0, 0)'</span>                                              <span class="token punctuation">)</span><span class="token punctuation">,</span>                                    opacity<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                                    <span class="token punctuation">)</span>                        <span class="token punctuation">)</span>    trace2 <span class="token operator">=</span> go<span class="token punctuation">.</span>Scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>dts<span class="token punctuation">,</span>                        y<span class="token operator">=</span>yues2<span class="token punctuation">,</span>                        mode<span class="token operator">=</span><span class="token string">'lines+markers'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># mode可选'markers','lines','lines+markers'</span>                        name<span class="token operator">=</span><span class="token string">'白酒'</span><span class="token punctuation">,</span>                        marker<span class="token operator">=</span>dict<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 若设为变量则可用散点大小表示变量大小</span>                                    color<span class="token operator">=</span><span class="token string">'rgba( 0,152, 0, .8)'</span><span class="token punctuation">,</span>                                    line<span class="token operator">=</span>dict<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                                              color<span class="token operator">=</span><span class="token string">'rgb(0, 0, 0)'</span>                                              <span class="token punctuation">)</span><span class="token punctuation">,</span>                                    opacity<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                                    <span class="token punctuation">)</span>                        <span class="token punctuation">)</span>    trace3 <span class="token operator">=</span> go<span class="token punctuation">.</span>Scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>dts<span class="token punctuation">,</span>                        y<span class="token operator">=</span>yues3<span class="token punctuation">,</span>                        mode<span class="token operator">=</span><span class="token string">'lines+markers'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># mode可选'markers','lines','lines+markers'</span>                        name<span class="token operator">=</span><span class="token string">'沪深'</span><span class="token punctuation">,</span>                        marker<span class="token operator">=</span>dict<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 若设为变量则可用散点大小表示变量大小</span>                                    color<span class="token operator">=</span><span class="token string">'rgba( 0, 0, 152,.8)'</span><span class="token punctuation">,</span>                                    line<span class="token operator">=</span>dict<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                                              color<span class="token operator">=</span><span class="token string">'rgb(0, 0, 0)'</span>                                              <span class="token punctuation">)</span><span class="token punctuation">,</span>                                    opacity<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                                    <span class="token punctuation">)</span>                        <span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span>trace1<span class="token punctuation">,</span> trace2<span class="token punctuation">,</span> trace3<span class="token punctuation">]</span>    axis_template <span class="token operator">=</span> dict<span class="token punctuation">(</span>        showgrid<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 网格</span>        zeroline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 是否显示基线,即沿着(0,0)画出x轴和y轴</span>        nticks<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>        showline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">'Date'</span><span class="token punctuation">,</span>        mirror<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">,</span>        zerolinecolor<span class="token operator">=</span><span class="token string">"#FF0000"</span>    <span class="token punctuation">)</span>    ayis_template <span class="token operator">=</span> dict<span class="token punctuation">(</span>        showgrid<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 网格</span>        zeroline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 是否显示基线,即沿着(0,0)画出x轴和y轴</span>        nticks<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>        showline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">'Money'</span><span class="token punctuation">,</span>        mirror<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">,</span>        zerolinecolor<span class="token operator">=</span><span class="token string">"#FF0000"</span>    <span class="token punctuation">)</span>    layout <span class="token operator">=</span> go<span class="token punctuation">.</span>Layout<span class="token punctuation">(</span>font<span class="token operator">=</span>dict<span class="token punctuation">(</span>family<span class="token operator">=</span><span class="token string">'Courier New, monospace'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#3D3D3D'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       title<span class="token operator">=</span><span class="token string">'基金实况'</span><span class="token punctuation">,</span> xaxis<span class="token operator">=</span>axis_template<span class="token punctuation">,</span> yaxis<span class="token operator">=</span>ayis_template                       <span class="token punctuation">)</span>    fig <span class="token operator">=</span> go<span class="token punctuation">.</span>Figure<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> layout<span class="token operator">=</span>layout<span class="token punctuation">)</span>    ptly<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>fig<span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'fund3.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filexx <span class="token operator">=</span> <span class="token string">'fund3.xlsx'</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filexx<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----什么？这是你的第一次？好了，已经帮你弄好了（指初始化）----'</span><span class="token punctuation">)</span>        daily_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'今天是否保存过数据了呢？0/1：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> p <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----哦，你已经好了？那算了----\n'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            daily_save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----好了，保存好了----\n'</span><span class="token punctuation">)</span>    pd <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'想不想看一下趋势图-0/1：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pd <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----那就给你看一下吧----\n'</span><span class="token punctuation">)</span>        qs<span class="token punctuation">(</span><span class="token punctuation">)</span>        datalook<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n----既然不想看，那就算了吧----'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-图中图——将一幅图套娃"><a href="#2-图中图——将一幅图套娃" class="headerlink" title="2. 图中图——将一幅图套娃"></a>2. 图中图——将一幅图套娃</h1><p><a href="https://space.bilibili.com/39665558" target="_blank" rel="noopener">迷糊老师</a>的程序，hhh 很好玩，b 站<a href="https://www.bilibili.com/video/BV1QE411P7GV" target="_blank" rel="noopener">迷糊老师视频</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">def</span> <span class="token function">fill_img_with_img</span><span class="token punctuation">(</span>imgParent<span class="token punctuation">,</span> imgChild<span class="token punctuation">)</span><span class="token punctuation">:</span>    imgSize <span class="token operator">=</span><span class="token punctuation">(</span>imgParent<span class="token punctuation">.</span>width<span class="token operator">*</span>imgChild<span class="token punctuation">.</span>width<span class="token punctuation">,</span> imgParent<span class="token punctuation">.</span>height<span class="token operator">*</span>imgChild<span class="token punctuation">.</span>height<span class="token punctuation">)</span>    imgRet <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">,</span> imgSize<span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> w <span class="token keyword">in</span> range<span class="token punctuation">(</span>imgParent<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> h <span class="token keyword">in</span> range<span class="token punctuation">(</span>imgParent<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> imgParent<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">:</span>                imgRet<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>imgChild<span class="token punctuation">,</span><span class="token punctuation">(</span>w<span class="token operator">*</span>imgChild<span class="token punctuation">.</span>width<span class="token punctuation">,</span> h<span class="token operator">*</span>imgChild<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> imgRet<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    imgParent <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'parent.jpg'</span><span class="token punctuation">)</span>    imgParent <span class="token operator">=</span> imgParent<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>    imgChild <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'child2.png'</span><span class="token punctuation">)</span>    imgChild <span class="token operator">=</span> imgChild<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>    imgRet <span class="token operator">=</span> fill_img_with_img<span class="token punctuation">(</span>imgParent<span class="token punctuation">,</span>imgChild<span class="token punctuation">)</span>    imgRet<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'result.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-好奇心——用程序检查哪些网站能打开"><a href="#3-好奇心——用程序检查哪些网站能打开" class="headerlink" title="3. 好奇心——用程序检查哪些网站能打开"></a>3. 好奇心——用程序检查哪些网站能打开</h1><h2 id="3-1-初步，只能检查-IP-地址-不成熟的探索"><a href="#3-1-初步，只能检查-IP-地址-不成熟的探索" class="headerlink" title="3.1 初步，只能检查 IP 地址##不成熟的探索"></a>3.1 初步，只能检查 IP 地址##不成熟的探索</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> time<span class="token keyword">from</span> urllib <span class="token keyword">import</span> error <span class="token punctuation">,</span> requestf <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'re.txt'</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>j <span class="token operator">=</span> <span class="token number">0</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    htmls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    https <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    http <span class="token operator">=</span> <span class="token string">'http://123.56.22.'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        reponse <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>http<span class="token punctuation">)</span>        https<span class="token punctuation">.</span>append<span class="token punctuation">(</span>http<span class="token punctuation">)</span>        j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'这是第{j}个网站了'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'url'</span> <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> http <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">except</span> error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        k <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'访问页面出错1,{k}次了'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'访问页面出错2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(f'总共是{https}')</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-开始加一点细节，也不太完善"><a href="#3-2-开始加一点细节，也不太完善" class="headerlink" title="3.2 开始加一点细节，也不太完善"></a>3.2 开始加一点细节，也不太完善</h2><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsTerminal的配置</title>
      <link href="/2020/03/18/tools-wt/"/>
      <url>/2020/03/18/tools-wt/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h1><p>偶然间看到了<a href="https://sspai.com/post/59380" target="_blank" rel="noopener">这篇文章</a>，然后发现Windows terminal(wt)真的香，以下内容都是这篇文章的具体概况（自己的垃圾理解，太过于概括，建议看原文）</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>想要自定义一个美观的Windows terminal窗口，只需要打开Windows terminal的配置文件，即settings中设置<code>profiles.json</code>文件就可以配置了。</p><h1 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h1><p>配置文件<code>profiles.json</code>中分为几个部分</p><ul><li><strong>全局属性</strong>：位于 JSON 最外侧，包含有设置亮暗主题、默认 Profile 等项目的配置</li><li><strong>环境入口 <code>profiles</code></strong>：一个列表，其中包含有 Windows Terminal 下拉菜单中唤起的各种环境（比如打开 PowerShell 环境、WSL 环境或 SSH 至远程服务器的环境……）与各种环境里 Windows Terminal 的显示方案（比如字体、背景、色彩方案等）</li><li><strong>配色主题 <code>schemes</code></strong>：一个配色方案列表，其中包含有 Windows Terminal 在上一项「环境入口」中可以调用的「色彩主题」</li><li><strong>快捷键绑定 <code>keybindings</code></strong>：自定义快捷键</li></ul><p><img src="https://cdn.sspai.com/editor/u_spencerwoo/15836861908691.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="profiles.json的文件格式"></p><h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><ul><li><code>"defaultProfile"</code>即打开wt默认打开的环境,相对应得就是底下得<code>"guid"</code>后面的唯一标识码</li></ul><ul><li><p>Terminal 亮暗主题设置 <code>"requestedTheme"</code>：可以为 <code>"system"</code>（跟随系统）、<code>"light"</code> 或 <code>"dark"</code></p></li><li><p>Terminal 初始大小：<code>"initialCols"</code> 和 <code>"initialRows"</code></p></li></ul><h2 id="profiles"><a href="#profiles" class="headerlink" title="profiles"></a>profiles</h2><p>可以看到刚下载下来的已经配置好的窗口有三个：PowerShell、cmd以及Azure Cloud Shell</p><p>在每一个窗口的配置中有着几个属性：</p><ul><li><code>"guid"</code>唯一标识码 、<code>"name"</code>窗口名称、<code>"commandline"</code>打开的命令行</li><li>接下来就是自定义的属性（基础）<ul><li><code>"background"</code>背景颜色：<code>"#000000"</code></li><li><code>"acrylicOpacity"</code>亚克力效果透明度：<code>0.6</code></li><li><code>"useAcrylic"</code>亚克力效果：<code>true</code></li><li><code>"colorScheme"</code>底下的schemes中配置的颜色名字：<code>"name"</code></li><li><code>"backgroundImage"</code>背景图片，放在<code>C:\Users\{用户名}\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe</code>目录的<code>RoamingState</code>文件夹中假如命名为<code>back.png</code>,然后配置：<code>"ms-appdata:///roaming/back.png"</code></li><li><code>"backgroundImageStretchMode"</code><em>按比例放大</em>:<code>"uniformToFill"</code></li><li><code>"backgroundImageOpacity"</code>图片的透明度:<code>0.6</code></li><li><code>"foreground"</code>字体颜色 : <code>"#e03c8a"</code>，<code>fontFace</code> 字体样式:<code>Consolas</code>, <code>fontSize</code> 字体大小:<code>16</code></li><li><code>"icon"</code> 添加小图标: <code>"ms-appdata:///roaming/sshicon.ico"</code>也是放在<code>RoamingState</code>中</li><li>进一步的美化<ul><li><code>"cursorColor"</code>光标颜色: <code>"#7EA2B4"</code></li><li><code>"cursorShape"</code>光标形状: <code>"bar"</code></li><li>更进一步具体配置看<a href="https://www.baidu.com/" target="_blank" rel="noopener">百度上的大佬</a>_,或者参考<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">schemes</a>中的配置可以在<a href="https://iterm2colorschemes.com/" target="_blank" rel="noopener">官网</a>预览</li></ul></li></ul></li></ul><p><strong>详情可以参考我的配置文件</strong></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://aka.ms/terminal-profiles-schema"</span><span class="token punctuation">,</span>    <span class="token property">"defaultProfile"</span><span class="token operator">:</span> <span class="token string">"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"</span><span class="token punctuation">,</span>    <span class="token property">"requestedTheme"</span><span class="token operator">:</span> <span class="token string">"light"</span><span class="token punctuation">,</span>    <span class="token property">"profiles"</span><span class="token operator">:</span>    <span class="token punctuation">{</span>        <span class="token property">"defaults"</span><span class="token operator">:</span>        <span class="token punctuation">{</span>            // Put settings here that you want to apply to all profiles        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"list"</span><span class="token operator">:</span>        <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                // Make changes here to the powershell.exe profile                <span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"PowerShell"</span><span class="token punctuation">,</span>                <span class="token property">"commandline"</span><span class="token operator">:</span> <span class="token string">"powershell.exe"</span><span class="token punctuation">,</span>                <span class="token property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            // <span class="token property">"profiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span> ... <span class="token punctuation">]</span> 项目中 PowerShell 环境的配置                // <span class="token property">"background"</span><span class="token operator">:</span> <span class="token string">"#013456"</span><span class="token punctuation">,</span>                // <span class="token property">"acrylicOpacity"</span><span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span>  // 亚克力效果透明度                // <span class="token property">"useAcrylic"</span><span class="token operator">:</span> <span class="token boolean">true</span>  // 亚克力效果                // <span class="token property">"colorScheme"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>//schemes中配置的主题颜色                <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"ms-appdata:///roaming/back.png"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImageStretchMode"</span><span class="token operator">:</span> <span class="token string">"uniformToFill"</span><span class="token punctuation">,</span> // 按比例放大                <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.6</span> //图片透明的            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                // Make changes here to the cmd.exe profile                <span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{0caa0dad-35be-5f56-a8ff-afceeeaa6101}"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cmd"</span><span class="token punctuation">,</span>                <span class="token property">"commandline"</span><span class="token operator">:</span> <span class="token string">"cmd.exe"</span><span class="token punctuation">,</span>                <span class="token property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"ms-appdata:///roaming/cmd.jpg"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImageStretchMode"</span><span class="token operator">:</span> <span class="token string">"uniformToFill"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.6</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{b453ae62-4e3d-5e58-b989-0a998ec441b8}"</span><span class="token punctuation">,</span>                <span class="token property">"hidden"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Azure Cloud Shell"</span><span class="token punctuation">,</span>                <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"Windows.Terminal.Azure"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"ms-appdata:///roaming/azu.jpg"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImageStretchMode"</span><span class="token operator">:</span> <span class="token string">"uniformToFill"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.6</span><span class="token punctuation">,</span>                <span class="token property">"foreground"</span><span class="token operator">:</span> <span class="token string">"#e03c8a"</span>  //字体颜色 fontFace 字体样式<span class="token punctuation">,</span> fontSize 字体大小            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"guid"</span><span class="token operator">:</span> <span class="token string">"{a060905f-d089-43d9-9422-cd748e7f0230}"</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"SSH-aliyun"</span><span class="token punctuation">,</span>                <span class="token property">"commandline"</span><span class="token operator">:</span> <span class="token string">"powershell.exe ssh yq@123.56.22.122"</span><span class="token punctuation">,</span>                <span class="token property">"icon"</span><span class="token operator">:</span> <span class="token string">"ms-appdata:///roaming/sshicon.ico"</span><span class="token punctuation">,</span>  // 添加小图标                <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"ms-appdata:///roaming/ssh.jpg"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImageStretchMode"</span><span class="token operator">:</span> <span class="token string">"uniformToFill"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.6</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"acrylicOpacity"</span> <span class="token operator">:</span> <span class="token number">0.75</span><span class="token punctuation">,</span>               //毛玻璃透明效果透明度                <span class="token property">"closeOnExit"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"commandline"</span> <span class="token operator">:</span> <span class="token string">"bash.exe"</span><span class="token punctuation">,</span>                <span class="token property">"cursorColor"</span> <span class="token operator">:</span> <span class="token string">"#7EA2B4"</span><span class="token punctuation">,</span>           //光标颜色                <span class="token property">"cursorShape"</span> <span class="token operator">:</span> <span class="token string">"bar"</span><span class="token punctuation">,</span>               //光标形状                <span class="token property">"fontFace"</span> <span class="token operator">:</span> <span class="token string">"Consolas"</span><span class="token punctuation">,</span>                <span class="token property">"fontSize"</span> <span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>                      //字体大小                <span class="token property">"guid"</span> <span class="token operator">:</span> <span class="token string">"{019f913c-595c-4498-a934-e01e71cd4cbf}"</span><span class="token punctuation">,</span>                <span class="token property">"historySize"</span> <span class="token operator">:</span> <span class="token number">9001</span><span class="token punctuation">,</span>                <span class="token property">"icon"</span> <span class="token operator">:</span> <span class="token string">"ms-appdata:///roaming/bashicon.ico"</span><span class="token punctuation">,</span> //图标地址                <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Git-bash"</span><span class="token punctuation">,</span>                <span class="token property">"padding"</span> <span class="token operator">:</span> <span class="token string">"0, 0, 0, 0"</span><span class="token punctuation">,</span>                <span class="token property">"snapOnInput"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"startingDirectory"</span> <span class="token operator">:</span> <span class="token string">"%USERPROFILE%"</span><span class="token punctuation">,</span>                <span class="token property">"useAcrylic"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"ms-appdata:///roaming/bash.jpg"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImageStretchMode"</span><span class="token operator">:</span> <span class="token string">"uniformToFill"</span><span class="token punctuation">,</span>                <span class="token property">"backgroundImageOpacity"</span><span class="token operator">:</span> <span class="token number">0.6</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Add custom color schemes to this array    <span class="token property">"schemes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // Add any keybinding overrides to this array.    // To unbind a default keybinding<span class="token punctuation">,</span> set the command to <span class="token string">"unbound"</span>    <span class="token property">"keybindings"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"closePane"</span><span class="token punctuation">,</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ctrl+w"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"closeWindow"</span><span class="token punctuation">,</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"alt+f4"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"copy"</span><span class="token punctuation">,</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ctrl+c"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"paste"</span><span class="token punctuation">,</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ctrl+v"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"newTab"</span><span class="token punctuation">,</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ctrl+t"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="schemes"><a href="#schemes" class="headerlink" title="schemes"></a>schemes</h2><p><a href="https://iterm2colorschemes.com/" target="_blank" rel="noopener">scheme官网</a>有着最丰富的颜色配置</p><p>参照着schemes的配置学习如何自定义配置</p><p>也可以<a href="https://www.cnblogs.com/KiraYoshikage/p/11443741.html" target="_blank" rel="noopener">参考大佬学习</a></p><h2 id="keybindings快捷键"><a href="#keybindings快捷键" class="headerlink" title="keybindings快捷键"></a><code>keybindings</code>快捷键</h2><p><img src="/img/sys/key.png" alt="快捷键配置"></p><blockquote><p>参考文档：<a href="https://sspai.com/post/59380" target="_blank" rel="noopener">少数派</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 资源力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盗梦空间</title>
      <link href="/2020/03/15/yq-dream/"/>
      <url>/2020/03/15/yq-dream/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-奇怪の梦"><a href="#1-奇怪の梦" class="headerlink" title="1. 奇怪の梦"></a>1. 奇怪の梦</h1><h2 id="1-1-双重人格"><a href="#1-1-双重人格" class="headerlink" title="1.1 双重人格"></a>1.1 双重人格</h2><p>一个人有两个人格，而且喜欢的是不同的人，然后👴忘了，以后再写</p><h2 id="1-2-三人决战怪兽"><a href="#1-2-三人决战怪兽" class="headerlink" title="1.2 三人决战怪兽"></a>1.2 <del>三人决战怪兽</del></h2><p>  今天做了一个更加奇怪的梦，主要是我好像进入了一个奇怪的空间，这个空间的时间是静止的，然后等到我出来的时候—–我好像又忘记了hhh，总的来说就是出来后先是见到了几个人，包括小说了的一个人名，好像叫“帝释月”（大概是牧神记里的，对就是她，草，淦，这梦神了）接着就遇到了一个非常可怕的东西，这个东西就是那种打不死的怪，他会把他的身体分裂开来，然后独立行动等等的，然后我就醒了，总体来说这个梦挺奇怪的hhhh</p><h1 id="2-伤心の梦"><a href="#2-伤心の梦" class="headerlink" title="2. 伤心の梦"></a>2. 伤心の梦</h1><h2 id="2-1-回到民国"><a href="#2-1-回到民国" class="headerlink" title="2.1 回到民国"></a>2.1 <del>回到民国</del></h2><p>  这个梦可能是在某个地方看过的电视剧，反正不止梦到过这一次了，有好几次都梦到了这个。但回想起来，只能想起一些断断续续的片段，而想不起具体的细节</p><p>  我是在梦的某个时期然后直接进入民国，跟上了一位大将军，然后一直 打仗（好像没有），反正是跟了他很短又很长的一段时间，做了一段时间的事情，期间我也认识到了几位好朋友，其中有三姑娘跟我的关系特别好（没有🍑，应为我当时很无知），一个是最好的，这个姑娘救了我很多次，另外是一个府邸老爷的两个女儿，然后不知道过了多久，我就跟他们分开了，（好像是我打仗不太行）没有了联系然后我就直接做了这位府邸老爷的教书先生，教这些老爷府邸下的孩子读书，我就发现我教书很nice。很多年后，我教书也有了些成就，但是老爷并不希望我教的这些孩子过于聪明（焚书坑儒吗hhh），所以这个老爷十分讨厌我，我当时就想是不是我太厉害，威胁到他的地位hhh，然后他就要派人来杀我，这个时候那位救了我很多次的姑娘就来通知我，并且想带着我走，我也答应了下来，因为我也意识到了危险，然后再某一天，我偷偷地离开了这个府邸，然后发现真相是那位将军又回来了，是想将这位府邸满门抄斩，然后当我知道了这件事请后，我跑了进府邸，发现已经晚了一步，这个府邸的老爷，孩子们，还有所有人，都已经被杀害，突然间我就很痛苦，但是那个时候我也许已经意识到了什么，然后我就什么也没说。最后我还是离开了这个队伍，自己离去。</p><p>  这种体会可能现在梦醒了，体会不到，但是还是能够回想起来当时的痛苦，我的表情，那位姑娘似笑似哭的表情。真的非常痛苦，这个人也许不是我，但是我却能够感受到他的痛苦。</p><p>  一个人也许是由很多个灵魂组成的，但是却有着一个主灵魂，这个灵魂是个体控制权最大的灵魂，当主灵魂清醒时，会直接压制其他地灵魂，但是当主灵魂休息（睡觉）的时候，其他灵魂就会开始拥有他们的意识，并且可以将他们的想象或者可以说是记忆默默地偷偷地传输到主灵魂，让主灵魂感受到他们的意识，有时候是悲伤的，但有时候也是开心的。<del>（自己地胡乱猜想，感觉可以写小说了hhh</del></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 想象力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Note</title>
      <link href="/2020/03/15/learn-linux/"/>
      <url>/2020/03/15/learn-linux/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-Linux文件系统的概况"><a href="#1-Linux文件系统的概况" class="headerlink" title="1. Linux文件系统的概况"></a>1. Linux文件系统的概况</h1><p><img src="/img/linux/linuxfile.png" alt="文件树状图"></p><blockquote><p><a href="https://turingplanet.org/2019/11/04/%e6%96%87%e6%9c%ac%e6%93%8d%e4%bd%9c/" target="_blank" rel="noopener">参考教程</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器学习</title>
      <link href="/2020/03/11/learn-server/"/>
      <url>/2020/03/11/learn-server/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-入门概述"><a href="#1-入门概述" class="headerlink" title="1. 入门概述"></a>1. 入门概述</h1><p>一台云服务器（以下简称 ECS 实例）由实例规格、镜像、块存储、快照、安全组、弹性网卡等基础计算组件组成并协同提供服务。一般来说，阿里云服务器、云服务器、云服务器 ECS、ECS 实例等均指代云服务器 ECS。其中：</p><ul><li>实例规格：定义了 ECS 实例的 vCPU 和内存的配置，是计算能力的体现。</li><li>镜像：提供启动 ECS 实例所需的所有信息，包括操作系统和预装软件。</li><li>块存储：提供存储能力，包括系统盘和数据盘。存储类型包括云盘和本地盘等多种不同类型的磁盘。就像硬盘一样，您可以对挂载到 ECS 实例上的云盘做分区、格式化、创建文件系统等操作，并对数据进行持久化存储。</li><li>网络：使用专有网络（简称 VPC），相当于您自己构建了一个数据中心网络，有自己的路由、交换机和访问策略。</li><li>安全组：用来允许或拒绝公网请求和内网请求，为实例提供防护能力。绝大多数情况下，当实例加入一个新创建的安全组时，在提供业务访问前您都必须添加必要的安全组规则。一般来说，安全组等同于服务器防火<br>墙。</li></ul><h1 id="2-操作"><a href="#2-操作" class="headerlink" title="2. 操作"></a>2. 操作</h1><blockquote><p><a href="https://www.cnblogs.com/minhren/p/12337260.html" target="_blank" rel="noopener">参考博客</a></p></blockquote><h2 id="2-1-登录"><a href="#2-1-登录" class="headerlink" title="2.1 登录"></a>2.1 登录</h2><p><code>ssh root@ip地址</code></p><p>然后输入密码，可以到实例中重置密码</p><h2 id="2-2-更新系统"><a href="#2-2-更新系统" class="headerlink" title="2.2 更新系统"></a>2.2 更新系统</h2><p><code>apt-get update</code></p><h2 id="2-3-升级软件"><a href="#2-3-升级软件" class="headerlink" title="2.3 升级软件"></a>2.3 升级软件</h2><p><code>apt-get install upgrade</code><br>或者<br><code>apt-get upgrade</code></p><h2 id="2-4-接着安装桌面系统"><a href="#2-4-接着安装桌面系统" class="headerlink" title="2.4 接着安装桌面系统"></a>2.4 接着安装桌面系统</h2><p><code>apt-get install ubuntu-desktop</code></p><h2 id="2-5-打开"><a href="#2-5-打开" class="headerlink" title="2.5 打开"></a>2.5 打开</h2><p>等到图形界面安装完成输入 reboot 指令进行重启.接着我们用控制台里的远程连接管理:要选 VNC,如图</p><p><img src="https://img2018.cnblogs.com/i-beta/828103/202002/828103-20200220203209860-193153872.png" alt="图片链接"></p><p>然后输入远程连接密码</p><h1 id="3-连接服务器的方法"><a href="#3-连接服务器的方法" class="headerlink" title="3. 连接服务器的方法"></a>3. 连接服务器的方法</h1><h2 id="3-1-用-cmder-的-ssh"><a href="#3-1-用-cmder-的-ssh" class="headerlink" title="3.1 用 cmder 的 ssh"></a>3.1 用 cmder 的 ssh</h2><p><code>ssh root@ip</code><br>然后输入密码，即可连接</p><h2 id="3-2-使用网页端的-VNC-连接"><a href="#3-2-使用网页端的-VNC-连接" class="headerlink" title="3.2 使用网页端的 VNC 连接"></a>3.2 使用网页端的 VNC 连接</h2><p>在阿里云服务器实例中的远程连接中有一个 VNC 连接，网页版的连接占用小但是太卡了</p><h2 id="3-3-使用-Xshell-连接服务器"><a href="#3-3-使用-Xshell-连接服务器" class="headerlink" title="3.3 使用 Xshell 连接服务器"></a>3.3 使用 Xshell 连接服务器</h2><ul><li>Xshell:跟 cmder 差不多都是 ssh 连接然后命令行操作</li></ul><ul><li>Xftp:可以在本地与服务器之间传输文件</li><li>Xmanager:可以左到与 VNC 一样显示服务器的图形界面</li></ul><h1 id="服务器的一些用法（菜鸟）"><a href="#服务器的一些用法（菜鸟）" class="headerlink" title="服务器的一些用法（菜鸟）"></a>服务器的一些用法（菜鸟）</h1><h2 id="1-搭建网站"><a href="#1-搭建网站" class="headerlink" title="1. 搭建网站"></a>1. 搭建网站</h2><h3 id="1-1-第一步学习"><a href="#1-1-第一步学习" class="headerlink" title="1.1 第一步学习"></a>1.1 第一步学习</h3><ul><li>前端:html+css+js/vue 框架</li><li>后端:Django</li><li>数据库:Mysql</li><li>Linux 知识</li></ul><h3 id="1-2-使用框架"><a href="#1-2-使用框架" class="headerlink" title="1.2 使用框架"></a>1.2 使用框架</h3><p>word press + 主题</p><h3 id="1-3-另一种方式"><a href="#1-3-另一种方式" class="headerlink" title="1.3 另一种方式"></a>1.3 另一种方式</h3><blockquote><p>将本地的 hexo 博客内容部署到阿里云服务器：主要参考<a href="https://www.zhihu.com/question/60329559" target="_blank" rel="noopener">大佬的教程</a></p></blockquote><p>安装 nginx 和 git，我的是 Ubuntu，所以</p><pre><code>apt-get updateapt-get install nginxapt-get install git</code></pre><p>新建 git 用户，并设置密码</p><pre><code>adduser gitpasswd</code></pre><p>切换到 git 用户<code>su git</code></p><p>在用户目录下新建.git 目录</p><pre><code>cd ~  # cd到用户目录mkdir .gitcd .git</code></pre><p>将本地的密匙文件<code>id_rsa.pub</code>内容保存到<code>.git</code>目录下的<code>authorized_keys</code></p><pre><code>vim authorized_keys</code></pre><p>使用vim将密匙粘贴在该文件中，然后保存退出就可以使用git用户ssh到服务器了</p><p><code>ssh git@ip地址</code></p><p>成功后，建立git库</p><pre><code>mkdir hexo.gitcd hexo.gitgit init --bare</code></pre><p>然后设置显示成网页</p><pre><code>cd hooks vim post-receive</code></pre><p>将一下内容写入到<code>post-receive</code>中</p><pre><code>#!/bin/bashrm -rf /home/git/hexogit clone /home/git/hexo.git /home/git/hexorm -rf /usr/share/nginx/hexo/*mv /home/git/hexo/* /usr/share/nginx/hexo</code></pre><p>修改执行权限</p><p><code>chmod a+x post-receive</code></p><p>配置nginx</p><p><code>cd /usr/share/nginx</code></p><p>切换root用户</p><pre><code>su创建hexo网页目录mkdir hexo 将文件夹所有者设置为gitchown git hexo chgrp git hexo </code></pre><p>到nginx中修改配置</p><pre><code>cd /etc/nginxvim nginx.conf修改配置文件，修改location的目录,即加一行root /usr/share/nginx/hexo;</code></pre><p>然后将本地的hexo文件夹中的配置文件<code>_config.yml</code>修改<code>deploy</code></p><p><code>git@ip地址:hexo.git</code></p><p>如我的</p><pre><code>deploy:  type: git  repo: git@服务器ip地址:hexo.git</code></pre><h2 id="2-内网穿透"><a href="#2-内网穿透" class="headerlink" title="2. 内网穿透"></a>2. 内网穿透</h2><h2 id="3-搭建一个文件系统"><a href="#3-搭建一个文件系统" class="headerlink" title="3. 搭建一个文件系统"></a>3. 搭建一个文件系统</h2><p>类似云盘</p><h3 id="3-1-搭建网盘owncloud"><a href="#3-1-搭建网盘owncloud" class="headerlink" title="3.1 搭建网盘owncloud"></a>3.1 搭建网盘owncloud</h3><blockquote><p>主要参考<a href="https://luomuxiaoxiao.com/?p=722" target="_blank" rel="noopener">这位大佬的教程</a><br>要先看<a href="https://luomuxiaoxiao.com/?p=707" target="_blank" rel="noopener">这篇</a></p></blockquote><p>只要跟着做一遍基本就能安装上，但是也有几个坑</p><p>几个坑：最后的登录时的用户名要在<code>/etc/mysql</code>下的<code>debian.cnf</code>中查看<br>直接输入：<br><code>sudo vim/vi /etc/mysql/debian.cnf</code><br>查看数据库的用户名密码，然后就可以了</p><p>可能我的服务器宽带不够hhh，搭建网盘还是没速度hhh，算了，等毕业以后在弄这些东西，主要是那个备案太烦了，太难了。所以现在光有域名没有备案，就不行，hhh只能通过ip地址访问hhh，太low了</p><h2 id="4-爬虫"><a href="#4-爬虫" class="headerlink" title="4. 爬虫"></a>4. 爬虫</h2><p>初步实现的爬虫程序：</p><ul><li><p>哔哩哔哩脚本</p></li><li><p>图片爬取</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua-Note</title>
      <link href="/2020/03/04/note-lua/"/>
      <url>/2020/03/04/note-lua/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><h2 id="1-1-注释"><a href="#1-1-注释" class="headerlink" title="1.1 注释"></a>1.1 注释</h2><ul><li><p>单行注释 <code>--单行注释</code></p></li><li><p>多行注释</p></li></ul><pre class="line-numbers language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">--[[多行注释下面两个--可有可无--]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-标示符"><a href="#1-2-标示符" class="headerlink" title="1.2 标示符"></a>1.2 标示符</h3><p>变量，最好不要使用下划线夹大写字母的标示符<br>Lua 不允许使用特殊字符和@ $ % 来定义标示符</p><h3 id="1-3-关键字"><a href="#1-3-关键字" class="headerlink" title="1.3 关键字"></a>1.3 关键字</h3><p>不可以当作变量，function local nil repeat until 等等</p><h3 id="1-4-全局变量"><a href="#1-4-全局变量" class="headerlink" title="1.4 全局变量"></a>1.4 全局变量</h3><p>默认变量为全局变量<br>访问一个没有声明的全局变量返回 nil，无</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除全局变量：<code>a = nil</code></p><h3 id="1-5-Lua-数据类型"><a href="#1-5-Lua-数据类型" class="headerlink" title="1.5 Lua 数据类型"></a>1.5 Lua 数据类型</h3><p>lua 是动态类型语言，变量不需要类型定义，只需复制<br>lua 的数据基本类型：<br><strong>nil</strong> , <strong>boolean</strong> , <strong>number</strong> , <strong>string</strong> , userdata(用户自定义) , <strong>function(函数)</strong> , thread(进程) ,<strong>table(实现类与类的继承)</strong><br>nil：一个无效值（false）<br>boolean： true 、false/nil<br>number： 只有 double 双精度型<br>string：字符串，’’/“”都可以 <code>[[一串可换行字符串]]</code><br>userdata：表示任意存储在变量中的 c 数据结构<br>thread：表示执行的独立线路，用于执行协同程序<br>table：lua 中的他变了是一个关联数组，数组的索引可以实数字、字符串或表类型，构造表达式：{}表示创建一个空表</p><h4 id="1-5-1-number-amp-string"><a href="#1-5-1-number-amp-string" class="headerlink" title="1.5.1 number &amp; string"></a>1.5.1 number &amp; string</h4><p>几个例子：</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">+</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--22.0</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token operator">+</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--22.0   自动将字符串转换为number</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token operator">..</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--ab</span><span class="token comment" spellcheck="true">-- 用 .. 链接字符串，前后有空格</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">..</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--123456</span>len <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">#</span>len<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 6</span><span class="token comment" spellcheck="true">-- # 计算字符串长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-2-table"><a href="#1-5-2-table" class="headerlink" title="1.5.2 table"></a>1.5.2 table</h4><p>table 表的操作</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 创建空表</span><span class="token keyword">local</span> tbl1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">-- 键值对形式添加数据</span>tbl1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>tbl1<span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span>tbl1<span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--10</span>rrr <span class="token operator">=</span> <span class="token punctuation">{</span>red<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>blue<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>yellow<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>rrr<span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--10</span><span class="token comment" spellcheck="true">-- 列表中的yyy[1] 不是下标，而是key |123</span>yyy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"orange"</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>yyy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>yyy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>yyy<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--red blue    orange</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>table 遍历</p><pre class="line-numbers language-lua"><code class="language-lua">rrr <span class="token operator">=</span> <span class="token punctuation">{</span>red<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>blue<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>yellow<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>rrr<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>k <span class="token operator">..</span> <span class="token string">":"</span> <span class="token operator">..</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">--[[好像是随机排的red:10blue:20yellow:30]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-3-function"><a href="#1-5-3-function" class="headerlink" title="1.5.3 function"></a>1.5.3 function</h4><p>函数类型，定义函数</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">kkk</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token function">kkk</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 12</span>a <span class="token operator">=</span> kkk<span class="token function">a</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>难点:函数中函数</strong></p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">kkk</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span>func<span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span> <span class="token keyword">do</span>        <span class="token function">func</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span>ttt <span class="token operator">=</span> <span class="token punctuation">{</span>red <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token function">kkk</span><span class="token punctuation">(</span>ttt<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span>v1<span class="token punctuation">)</span>            <span class="token function">print</span><span class="token punctuation">(</span>k1 <span class="token operator">..</span> v1<span class="token punctuation">)</span>        <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- blue20</span><span class="token comment" spellcheck="true">-- red10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-运算符"><a href="#1-6-运算符" class="headerlink" title="1.6 运算符"></a>1.6 运算符</h3><h4 id="1-6-1-算数运算符"><a href="#1-6-1-算数运算符" class="headerlink" title="1.6.1 算数运算符"></a>1.6.1 算数运算符</h4><p>+-*/ 加减乘除<br>% 取余<br>^ 乘幂<br>- 符号</p><h4 id="1-6-2-关系运算符"><a href="#1-6-2-关系运算符" class="headerlink" title="1.6.2 关系运算符"></a>1.6.2 关系运算符</h4><p>== / ~= / &gt; / &lt; / &gt;= / &lt;=</p><h4 id="1-6-3-逻辑运算符"><a href="#1-6-3-逻辑运算符" class="headerlink" title="1.6.3 逻辑运算符"></a>1.6.3 逻辑运算符</h4><p>and 与<br>or 或<br>not 非</p><h4 id="1-6-4-其他运算符"><a href="#1-6-4-其他运算符" class="headerlink" title="1.6.4 其他运算符"></a>1.6.4 其他运算符</h4><p>.. 连接两个字符串<br># 返回字符串长度或表的长度</p><h4 id="1-6-5-运算符优先级"><a href="#1-6-5-运算符优先级" class="headerlink" title="1.6.5 运算符优先级"></a>1.6.5 运算符优先级</h4><p>从上到下，优先级减小 ^优先级最大<br>^<br>not - * /<br>+ -<br>..<br>&gt; &lt; &lt;= &gt;= ~= ==<br>and<br>or</p><h3 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Scrcpy将手机投屏到电脑</title>
      <link href="/2020/03/02/tools-scrcpy/"/>
      <url>/2020/03/02/tools-scrcpy/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener">Scrcpy</a>是一款可以将安卓手机投屏到电脑上的开源软件，在电脑上控制手机，无需 root 手机</p><a id="more"></a><p><strong>用前提示：</strong><br>安卓系统版本要求 5.0 以上</p><p>几个缺陷：（建议忽略）<em>版本 v1.12.1</em></p><ul><li>不能直接用电脑键盘输入中文，而且中文模式下，数字和符号无法输入</li><li>不能很好地与电脑触摸板习惯相联系（如双指放大缩小操作），但问题不大</li><li>手机内容无法复制到电脑，但电脑内容可以复制到手机</li></ul><p><em>也许以后会作者大佬修复</em></p><p><strong>使用方法：</strong></p><h3 id="1-有线投屏"><a href="#1-有线投屏" class="headerlink" title="1. 有线投屏"></a>1. 有线投屏</h3><ul><li>用 usb 数据线将手机和电脑相连接</li><li>打开手机地 usb 调试功能（开发者选项里）</li><li>如果提示是否允许 usb 调试，点击确定</li><li>PC 端，windows 根据系统位数直接<a href="https://github.com/Genymobile/scrcpy/releases" target="_blank" rel="noopener">下载压缩包</a></li><li>将解压后的安装包里面有一个<strong>scrcpy.exe</strong>文件，使用 cmd 运行<br>然后就好了</li></ul><blockquote><p>更加详细的教程，参考<a href="https://www.iplaysoft.com/scrcpy.html" target="_blank" rel="noopener">这篇文章</a></p></blockquote><p>快捷键的使用<br><img src="/img/scrcpy.png" alt="快捷键使用"></p><p>一些 scrcpy 代码操作</p><p><strong>Scrcpy 的命令参数</strong></p><ul><li>关闭手机屏幕 scrcpy -S</li><li>限制画面分辨率 scrcpy -m 1024 (比如限制为 1024)</li><li>修改视频码率 scrcpy -b 4M (默认 8Mbps，改成 4Mbps)</li><li>裁剪画面 scrcpy -c 1224:1440:0:0</li><li>表示分辨率 1224x1440 并且偏移坐标为 (0,0)</li><li>多设备切换 scrcpy -s 设备 ID (使用 adb devices 命令查看设备 ID)</li><li>窗口置顶 scrcpy -T</li><li>显示触摸点击 scrcpy -t</li><li>在演示或录制教程时，可在画面上对应显示出点击动作</li><li>全屏显示 scrcpy -f</li><li>文件传输默认路径 scrcpy –push-target /你的/目录，将文件拖放到 scrcpy 可以传输文件，此命令指定默认保存目录</li><li>只读模式(仅显示不控制) scrcpy -n</li><li>屏幕录像 scrcpy -r 视频文件名.mp4 或 .mkv</li><li>屏幕录像 (禁用电脑显示) scrcpy -Nr 文件名.mkv</li><li>设置窗口标题 scrcpy –window-title ‘异次元好棒！’</li></ul><h3 id="2-无线投屏"><a href="#2-无线投屏" class="headerlink" title="2. 无线投屏"></a>2. 无线投屏</h3><p>注意要在同一局域网下</p><ul><li>查询设备当前的 IP 地址 (设置 → 关于手机 → 状态)</li><li>启用 adb TCP/IP 连接，执行命令：adb tcpip 5555，其中 5555 为端口号</li><li>拔掉你的数据线</li><li>通过 WiFi 进行连接，执行命令：adb connect 设备 IP 地址:5555</li><li>重新启动 scrcpy 即可</li><li>如果 WiFi 较慢，可以调整码率：scrcpy -b 3M -m 800，意思是限制 3 Mbps，画面分辨率限制 800，数值可以随意调整。</li><li>如需切换回 USB 模式，执行：adb usb</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Source </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python在终端中如何使用pip命令</title>
      <link href="/2020/02/27/python-pip/"/>
      <url>/2020/02/27/python-pip/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/qq_15260769/article/details/80731407" target="_blank" rel="noopener">参考博客</a></p></blockquote><a id="more"></a><h1 id="1-pip-自身的安装，更新，卸载"><a href="#1-pip-自身的安装，更新，卸载" class="headerlink" title="1. pip 自身的安装，更新，卸载"></a>1. pip 自身的安装，更新，卸载</h1><h2 id="1-1-pip-安装"><a href="#1-1-pip-安装" class="headerlink" title="1.1 pip 安装"></a>1.1 pip 安装</h2><p><a href="https://pypi.python.org/pypi/pip" target="_blank" rel="noopener">官网下载 pip</a>,下载 .tar.gz 压缩包</p><ul><li>解压后再文件目录中有一个<code>setup.py</code>文件</li><li>使用<code>python setup.py install</code>安装 pip</li><li>环境变量设置，找一下 pip.exe 所在位置，将其添加到系统的环境变量 path 中</li></ul><h1 id="1-2-pip-更新"><a href="#1-2-pip-更新" class="headerlink" title="1.2 pip 更新"></a>1.2 pip 更新</h1><p><code>python -m pip install --upgrade pip</code></p><h1 id="1-3-pip-卸载"><a href="#1-3-pip-卸载" class="headerlink" title="1.3 pip 卸载"></a>1.3 pip 卸载</h1><p><code>python -m pip uninstall pip</code></p><h1 id="2-pip-对-python-包的操作"><a href="#2-pip-对-python-包的操作" class="headerlink" title="2. pip 对 python 包的操作"></a>2. pip 对 python 包的操作</h1><h2 id="2-1-pip-安装包"><a href="#2-1-pip-安装包" class="headerlink" title="2.1 pip 安装包"></a>2.1 pip 安装包</h2><p><code>pip install 包名</code></p><h2 id="2-2-pip-更新包"><a href="#2-2-pip-更新包" class="headerlink" title="2.2 pip 更新包"></a>2.2 pip 更新包</h2><p><code>pip install --upgrade 包名</code></p><h2 id="2-3-pip-卸载包"><a href="#2-3-pip-卸载包" class="headerlink" title="2.3 pip 卸载包"></a>2.3 pip 卸载包</h2><p><code>pip uninstall 包名</code></p><h2 id="2-4-其他细节操作"><a href="#2-4-其他细节操作" class="headerlink" title="2.4 其他细节操作"></a>2.4 其他细节操作</h2><h3 id="2-4-1-查看安装的包"><a href="#2-4-1-查看安装的包" class="headerlink" title="2.4.1 查看安装的包"></a>2.4.1 查看安装的包</h3><p><code>pip list</code></p><h3 id="2-4-2-查看具体包的信息"><a href="#2-4-2-查看具体包的信息" class="headerlink" title="2.4.2 查看具体包的信息"></a>2.4.2 查看具体包的信息</h3><p><code>pip show 包名</code></p><h3 id="2-4-3-查看需要升级的包"><a href="#2-4-3-查看需要升级的包" class="headerlink" title="2.4.3 查看需要升级的包"></a>2.4.3 查看需要升级的包</h3><p><code>pip list --outdated</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统的各种问题</title>
      <link href="/2020/02/25/q-system/"/>
      <url>/2020/02/25/q-system/</url>
      
        <content type="html"><![CDATA[<p><strong>重置 Windows 后的软件装备过程</strong><br><strong>第一次重装系统</strong></p><a id="more"></a><h1 id="1-2-25-日"><a href="#1-2-25-日" class="headerlink" title="1. 2/25 日"></a>1. 2/25 日</h1><ul><li><p><strong>creo 的重装</strong><br>重装完成后的多出来的软件<br><img src="/img/sys/creo%E5%AE%8C%E6%88%90%E5%90%8E.png" alt="creo卸载处"></p></li><li><p><strong>VB 的重装</strong><br>重装后的<br><img src="/img/sys/vb%E5%AE%8C%E6%88%90%E5%90%8E.png" alt="vb卸载处"></p></li><li><p><strong>PSPR 的重装</strong><br>第一次装的时候安装包出错，待会儿再重下一遍<br>吧 2020 的删了，下了 2019 的，装上了<br>顺便装了一下 pr<br><img src="/img/sys/pspr%E5%AE%8C%E6%88%90%E5%90%8E.png" alt="pspr卸载处"></p></li><li><p><strong>jdk 的重装</strong><br>jdk 重装后 eclipse 终于打开了<br><img src="/img/sys/jdk%E5%AE%8C%E6%88%90%E5%90%8E.png" alt="jdk卸载处"></p></li></ul><h1 id="2-4-1-愚人节事件"><a href="#2-4-1-愚人节事件" class="headerlink" title="2. 4/1 愚人节事件"></a>2. 4/1 愚人节事件</h1><p><em>python文件打开的时候，屏幕卡住</em></p><p>今天是傻逼的一天，我想直接在浏览器中打开我的ejs文件，但是打了半天打不开，然后我以为是vscode的默认浏览器插件无法使用了，找了半天重装了几次，还是不行，然后我就开始下载chrome，结果下载完了还是不行，然后我就服了，搞了半天，什么系统的默认设置，还是什么VScode的配置文件，都不行，然后我就尝试了一下重置默认的系统程序，然后结果我的python文件就打不开了，而且在打开python文件的文件夹的时候会卡死，我还以为是电脑又要重装了，找了半天原因，百度了半天，还是没有解决，然后突然想到我前几天安装的vs，vs安装的时候又重新装了一遍python，结果两个python系统就冲突了，所以打开的时候会系统卡住，然后把vs的python删掉，ok终于弄好了，wc，我还以为又要重装系统了，慢慢找原因，也幸好问题不是很大</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 无力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中mysql数据库的学习</title>
      <link href="/2020/02/24/python-mysql/"/>
      <url>/2020/02/24/python-mysql/</url>
      
        <content type="html"><![CDATA[<p><strong>MySQL 数据库的学习</strong><br>根据<a href="https://www.bilibili.com/video/av49181542" target="_blank" rel="noopener">b 站视频</a>学习 MySQL 数据库</p><a id="more"></a><h1 id="0-安装完的一些基本操作"><a href="#0-安装完的一些基本操作" class="headerlink" title="0. 安装完的一些基本操作"></a>0. 安装完的一些基本操作</h1><h2 id="0-1-服务的启动与停止"><a href="#0-1-服务的启动与停止" class="headerlink" title="0.1 服务的启动与停止"></a>0.1 服务的启动与停止</h2><ul><li>管理员启动 cmd</li><li>输入<code>net stop mysql</code> 关闭服务</li><li>输入<code>net start mysql</code> 启动服务</li></ul><h2 id="0-2-登录和退出"><a href="#0-2-登录和退出" class="headerlink" title="0.2 登录和退出"></a>0.2 登录和退出</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中plotly的学习</title>
      <link href="/2020/02/22/python-plotly/"/>
      <url>/2020/02/22/python-plotly/</url>
      
        <content type="html"><![CDATA[<p><strong>数据可视化的 plotly</strong></p><blockquote><p><a href="https://blog.csdn.net/weixin_34407348/article/details/91371969" target="_blank" rel="noopener">参考教程</a></p></blockquote><a id="more"></a><h1 id="1-基本操作，初步理解代码"><a href="#1-基本操作，初步理解代码" class="headerlink" title="1. 基本操作，初步理解代码"></a>1. 基本操作，初步理解代码</h1><pre class="line-numbers language-py"><code class="language-py"># 生成一个直方图import plotly.offline as ptlyimport plotly.graph_objs as godata=[]trace1 = go.Bar(x=['first','second','third'],                y=[20,40,30]    )data.append(trace1)layout = go.Layout(font=dict(family='Courier New, monospace', size=18, color='#3D3D3D'),                   title='example'    )fig = go.Figure(data=data, layout=layout)ptly.plot(fig, filename = 'example.html')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者用 dict 表示</p><pre class="line-numbers language-py"><code class="language-py">trace1 = {'type':'bar',          'x':['first','second','third'],          'y':[20,40,30]    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-图形属性"><a href="#2-图形属性" class="headerlink" title="2. 图形属性`"></a>2. 图形属性`</h1><h2 id="2-1-柱状图"><a href="#2-1-柱状图" class="headerlink" title="2.1 柱状图"></a>2.1 柱状图</h2><pre class="line-numbers language-py"><code class="language-py">trace1 = go.Bar(x=[],                y=[],                name='thename',                width=0.5,                marker=dict(color="#c45ca2"),                opacity=1            )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-饼图"><a href="#2-2-饼图" class="headerlink" title="2.2 饼图"></a>2.2 饼图</h2><pre class="line-numbers language-py"><code class="language-py">trace1 = go.Pie(labels=[],                values=[],                hoverinfo='label+percent',                textinfo='value',                textfont=dict(size=20),                marker=dict(colors=colors,                           line=dict(color='#000000', width=2)),                hole= .4,                name="pie name",                domain=dict(x = [0, .48]),                opacity=1            )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-散点图，折线图"><a href="#2-3-散点图，折线图" class="headerlink" title="2.3 散点图，折线图"></a>2.3 散点图，折线图</h2><pre class="line-numbers language-py"><code class="language-py">trace1 = go.Scatter(x = [],                    y = [],                    mode = 'markers',   #mode可选'markers','lines','lines+markers'                    name = 'the name',                    marker = dict(size = 10,        #若设为变量则可用散点大小表示变量大小                                  color = 'rgba(152, 0, 0, .8)',                                  line = dict(width = 2,                                              color = 'rgb(0, 0, 0)'                                              ),                                  opacity=[]                                )            )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-布局属性"><a href="#3-布局属性" class="headerlink" title="3. 布局属性"></a>3. 布局属性</h1><pre class="line-numbers language-py"><code class="language-py"># 通用layout = go.Layout(title='your title',  #大标题                   font=dict(                     family='Courier New, monospace',                     size=18,                     color='#3D3D3D'                               ),#字体                   width=1400,                   height=800,              #图形的大小                   margin=go.Margin(                                    l=100,                                    r=100,                                    b=200,                                    t=200,                                    pad=0                                    ),      #边距设置                   plot_bgcolor='#ffffff',   #绘图部分背景颜色                   paper_bgcolor='#ffffff',   #整体背景颜色                   showlegend=True,        #是否显示图例，也可放在每个trace里单独设置                   #图例相关参数设置：                   legend=dict(orientation="v",                                x=0,                                y=1,                                traceorder='normal',                                font=dict(                                        family='sans-serif',                                        size=12,                                        color='#000'                                            ),                                bgcolor='#E2E2E2',                                bordercolor='#FFFFFF',                                borderwidth=2                            ),                   #x轴相关参数设置（y轴对应yaxis）：                   xaxis=dict(title='x Axis',                              titlefont=dict(                                        family='Courier New, monospace',                                        size=18,                                        color='#7f7f7f'                                            ),                               range=[],   #x轴范围，如[0,30]                               type='-',                              #x轴类型，可选["-","linear","log","date","category"]                               domain=[0,0.45]                              #设置x轴在整个图像占的位置范围（主要在有多张图时使用，第二个图用xaxis2设置相关参数）                            )    )# 柱状图layout = go.Layout(bargap=0.3,      #0~1                   bargroupgap=0.1,  #0~1                   barmode='',                   #barmode: ["stack","group","overlay","relative"],设置多个trace的组合方式                   barnorm=''    )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-1-设置坐标轴"><a href="#3-1-设置坐标轴" class="headerlink" title="3.1 设置坐标轴"></a>3.1 设置坐标轴</h2><pre class="line-numbers language-py"><code class="language-py">axis_template=dict(    showgrid=True,  #网格    zeroline=True,  #是否显示基线,即沿着(0,0)画出x轴和y轴    nticks=20,    showline=True,    title='X axis',    mirror='all',    zerolinecolor="#FF0000")layout=go.Layout(    xaxis=axis_template,    yaxis=axis_template)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/u012897374/article/details/77857980" target="_blank" rel="noopener">原文链接</a></p></blockquote><h1 id="4-图像整体属性"><a href="#4-图像整体属性" class="headerlink" title="4. 图像整体属性"></a>4. 图像整体属性</h1><pre class="line-numbers language-py"><code class="language-py">ptly.plot(figure_or_data, show_link=True, link_text='Export to plot.ly',         validate=True, output_type='file', include_plotlyjs=True,         filename='temp-plot.html', auto_open=True, image=None,         image_filename='plot_image', image_width=800, image_height=600,         config=None)s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-数据处理"><a href="#5-数据处理" class="headerlink" title="5. 数据处理"></a>5. 数据处理</h1><p><strong>包括 aggregate,filter,groupby,sort</strong></p><pre class="line-numbers language-py"><code class="language-py"># aggregatetransforms = [dict(    type = 'aggregate',    groups = [],        #用于分组的数组    aggregations = [dict(        target = 'y', func = 'sum', enabled = True),    ]  )]"""func参数可用："count","sum","avg","median","mode","rms","stddev","min","max","first","last""""# filtertransforms = [dict(    type = 'filter',    target = 'y',    operation = '>',    value = 4  )]"""operation参数可用:"=","!=","<",">=",">","<=","[]","()","[)","(]","][",")(","](",")[","{}","}{""""# groupbytransforms = [dict(    type = 'groupby',    groups = [],     #用于分组的数组    styles = [        dict(target = 'Moe', value = dict(marker = dict(color = 'blue'))),        dict(target = 'Larry', value = dict(marker = dict(color = 'red'))),        dict(target = 'Curly', value = dict(marker = dict(color = 'black')))    ]  )]# sorttransforms = [dict(    type = 'sort',    target = 'x',    order = 'ascending'   #升序ascending，降序descending  )]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中openpyxl库的学习</title>
      <link href="/2020/02/22/python-openpyxl/"/>
      <url>/2020/02/22/python-openpyxl/</url>
      
        <content type="html"><![CDATA[<p><strong>Python openpyxl 的操作方法</strong></p><blockquote><p><a href="https://www.jb51.net/article/169356.htm" target="_blank" rel="noopener">参考教程</a></p></blockquote><a id="more"></a><h1 id="1-打开文件夹"><a href="#1-打开文件夹" class="headerlink" title="1. 打开文件夹"></a>1. 打开文件夹</h1><p><strong><code>from openpyxl import Workbook</code></strong></p><h2 id="1-1-创建"><a href="#1-1-创建" class="headerlink" title="1.1 创建"></a>1.1 创建</h2><pre class="line-numbers language-py"><code class="language-py"># 实例化wb = Workbook()# 激活worksheetws = wb.active<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-储存"><a href="#1-2-储存" class="headerlink" title="1.2 储存"></a>1.2 储存</h2><p>每个文件操作完之后需要储存</p><pre class="line-numbers language-py"><code class="language-py">wb.save('文件名.xlsx')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-3-打开已有"><a href="#1-3-打开已有" class="headerlink" title="1.3 打开已有"></a>1.3 打开已有</h2><pre class="line-numbers language-py"><code class="language-py">wb2 = load_workbook('文件名.xlsx')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2. 创建表"></a>2. 创建表</h1><h1 id="2-1-创建表（sheet"><a href="#2-1-创建表（sheet" class="headerlink" title="2.1 创建表（sheet"></a>2.1 创建表（sheet</h1><pre class="line-numbers language-py"><code class="language-py"># 方式一：插入到最后(default)ws1 = wb.create_sheet("Mysheet")# 方式二：插入到最开始的位置ws2 = wb.create_sheet("Mysheet", 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-选择表"><a href="#2-2-选择表" class="headerlink" title="2.2 选择表"></a>2.2 选择表</h2><pre class="line-numbers language-py"><code class="language-py"># sheet 名称可以作为 key 进行索引ws3 = wb["New Title"]ws4 = wb.get_sheet_by_name("New Title")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-3-查看表名（sheet）"><a href="#2-3-查看表名（sheet）" class="headerlink" title="2.3 查看表名（sheet）"></a>2.3 查看表名（sheet）</h2><pre class="line-numbers language-py"><code class="language-py"># 显示所有表名print(wb.sheetnames)['Sheet2', 'New Title', 'Sheet1']# 遍历所有表for sheet in wb:    print(sheet.title)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-单元格"><a href="#3-单元格" class="headerlink" title="3. 单元格"></a>3. 单元格</h1><h2 id="3-1-储存数据"><a href="#3-1-储存数据" class="headerlink" title="3.1 储存数据"></a>3.1 储存数据</h2><pre class="line-numbers language-py"><code class="language-py">#  方式一 数据可以直接分配到单元格中(可以输入公式)ws['A1'] = 42# 方式二：可以附加行，从第一列开始附加(从最下方空白处，最左开始)(可以输入多行)ws.append([1,2,3])# 方式三：Python 类型会被自动转换ws['A3'] = datetime.datetime.now().strftime("%Y-%m-%d")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-访问单元格（call）"><a href="#3-2-访问单元格（call）" class="headerlink" title="3.2 访问单元格（call）"></a>3.2 访问单元格（call）</h2><h3 id="3-2-1-单单元格访问"><a href="#3-2-1-单单元格访问" class="headerlink" title="3.2.1 单单元格访问"></a>3.2.1 单单元格访问</h3><pre class="line-numbers language-py"><code class="language-py"># 方法一c = ws['A4']# 方法二：row 行；column 列d = ws.cell(row=4, column=2, value=10)# 方法三：只要访问就创建for i in range(1,101):    for j in range(1,101):        ws.cell(row=i, column=j)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-多单元格访问"><a href="#3-2-2-多单元格访问" class="headerlink" title="3.2.2 多单元格访问"></a>3.2.2 多单元格访问</h3><pre class="line-numbers language-py"><code class="language-py"># 通过切片cell_range = ws['A1':'C2']# 通过行(列)colC = ws['C']col_range = ws['C:D']row10 = ws[10]row_range = ws[5:10]# 通过指定范围(行 → 行)for row in ws.iter_rows(min_row=1, max_col=3, max_row=2):    for cell in row:        print(cell)<Cell Sheet1.A1><Cell Sheet1.B1><Cell Sheet1.C1><Cell Sheet1.A2><Cell Sheet1.B2><Cell Sheet1.C2>　# 通过指定范围(列 → 列)for row in ws.iter_rows(min_row=1, max_col=3, max_row=2):    for cell in row:        print(cell)<Cell Sheet1.A1><Cell Sheet1.B1><Cell Sheet1.C1><Cell Sheet1.A2><Cell Sheet1.B2><Cell Sheet1.C2># 遍历所有 方法一ws = wb.activews['C9'] = 'hello world'tuple(ws.rows)((<Cell Sheet.A1>, <Cell Sheet.B1>, <Cell Sheet.C1>),(<Cell Sheet.A2>, <Cell Sheet.B2>, <Cell Sheet.C2>),...(<Cell Sheet.A8>, <Cell Sheet.B8>, <Cell Sheet.C8>),(<Cell Sheet.A9>, <Cell Sheet.B9>, <Cell Sheet.C9>))# 遍历所有 方法二tuple(ws.columns)((<Cell Sheet.A1>,<Cell Sheet.A2>,<Cell Sheet.A3>,...<Cell Sheet.B7>,<Cell Sheet.B8>,<Cell Sheet.B9>),(<Cell Sheet.C1>,...<Cell Sheet.C8>,<Cell Sheet.C9>))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h1><h2 id="4-1-改变-sheet-标签按钮颜色"><a href="#4-1-改变-sheet-标签按钮颜色" class="headerlink" title="4.1 改变 sheet 标签按钮颜色"></a>4.1 改变 sheet 标签按钮颜色</h2><pre class="line-numbers language-py"><code class="language-py">ws.sheet_properties.tabColor = "1072BA"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-2-获取最大行，最大列"><a href="#4-2-获取最大行，最大列" class="headerlink" title="4.2 获取最大行，最大列"></a>4.2 获取最大行，最大列</h2><pre class="line-numbers language-py"><code class="language-py"># 获得最大列和最大行print(sheet.max_row)print(sheet.max_column)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-3-获取每一行每一列"><a href="#4-3-获取每一行每一列" class="headerlink" title="4.3 获取每一行每一列"></a>4.3 获取每一行每一列</h2><pre class="line-numbers language-py"><code class="language-py">sheet.rows为生成器, 里面是每一行的数据，每一行又由一个tuple包裹。sheet.columns类似，不过里面是每个tuple是每一列的单元格。# 因为按行，所以返回A1, B1, C1这样的顺序for row in sheet.rows:  for cell in row:    print(cell.value)# A1, A2, A3这样的顺序for column in sheet.columns:  for cell in column:    print(cell.value)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-根据数字得到字母，根据字母得到数字"><a href="#4-4-根据数字得到字母，根据字母得到数字" class="headerlink" title="4.4 根据数字得到字母，根据字母得到数字"></a>4.4 根据数字得到字母，根据字母得到数字</h2><pre class="line-numbers language-py"><code class="language-py">from openpyxl.utils import get_column_letter, column_index_from_string# 根据列的数字返回字母print(get_column_letter(2)) # B# 根据字母返回列的数字print(column_index_from_string('D')) # 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-5-删除工作表"><a href="#4-5-删除工作表" class="headerlink" title="4.5 删除工作表"></a>4.5 删除工作表</h2><pre class="line-numbers language-py"><code class="language-py"># 方式一wb.remove(sheet)# 方式二del wb[sheet]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-6-矩阵置换（行-→-列）"><a href="#4-6-矩阵置换（行-→-列）" class="headerlink" title="4.6 矩阵置换（行 → 列）"></a>4.6 矩阵置换（行 → 列）</h2><pre class="line-numbers language-py"><code class="language-py">rows = [  ['Number', 'data1', 'data2'],  [2, 40, 30],  [3, 40, 25],  [4, 50, 30],  [5, 30, 10],  [6, 25, 5],  [7, 50, 10]]list(zip(*rows))# out[('Number', 2, 3, 4, 5, 6, 7), ('data1', 40, 40, 50, 30, 25, 50), ('data2', 30, 25, 30, 10, 5, 10)]# 注意 方法会舍弃缺少数据的列(行)rows = [  ['Number', 'data1', 'data2'],  [2, 40  ], # 这里少一个数据  [3, 40, 25],  [4, 50, 30],  [5, 30, 10],  [6, 25, 5],  [7, 50, 10],]# out[('Number', 2, 3, 4, 5, 6, 7), ('data1', 40, 40, 50, 30, 25, 50)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-7-设置单元格风格"><a href="#4-7-设置单元格风格" class="headerlink" title="4.7 设置单元格风格"></a>4.7 设置单元格风格</h2><h3 id="4-7-1-需要导入的类"><a href="#4-7-1-需要导入的类" class="headerlink" title="4.7.1 需要导入的类"></a>4.7.1 需要导入的类</h3><p><code>from openpyxl.styles import Font, colors, Alignment</code></p><h3 id="4-7-2-字体"><a href="#4-7-2-字体" class="headerlink" title="4.7.2 字体"></a>4.7.2 字体</h3><pre class="line-numbers language-py"><code class="language-py">bold_itatic_24_font = Font(name='等线', size=24, italic=True, color=colors.RED, bold=True)# 代码指定了等线24号，加粗斜体，字体颜色红色。直接使用cell的font属性，将Font对象赋值给它sheet['A1'].font = bold_itatic_24_font<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-7-3-对齐方式"><a href="#4-7-3-对齐方式" class="headerlink" title="4.7.3 对齐方式"></a>4.7.3 对齐方式</h3><pre class="line-numbers language-py"><code class="language-py"># 设置B1中的数据垂直居中和水平居中sheet['B1'].alignment = Alignment(horizontal='center', vertical='center')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-7-4-设置行高和列宽"><a href="#4-7-4-设置行高和列宽" class="headerlink" title="4.7.4 设置行高和列宽"></a>4.7.4 设置行高和列宽</h3><pre class="line-numbers language-py"><code class="language-py"># 第2行行高sheet.row_dimensions[2].height = 40# C列列宽sheet.column_dimensions['C'].width = 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-5-合并和拆分单元格"><a href="#4-7-5-合并和拆分单元格" class="headerlink" title="4.7.5 合并和拆分单元格"></a>4.7.5 合并和拆分单元格</h3><pre class="line-numbers language-py"><code class="language-py"># 合并单元格， 往左上角写入数据即可sheet.merge_cells('B1:G1') # 合并一行中的几个单元格sheet.merge_cells('A1:C3') # 合并一个矩形区域中的单元格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中numpy库的学习</title>
      <link href="/2020/02/21/python-np/"/>
      <url>/2020/02/21/python-np/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>函数引用，命名为 np：<code>import numpy as np</code></strong></p><h1 id="1-np-linspace"><a href="#1-np-linspace" class="headerlink" title="1. np.linspace()"></a>1. np.linspace()</h1><p><strong>用来创建等差数列</strong></p><pre class="line-numbers language-py"><code class="language-py">numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)start:返回样本数据开始点stop:返回样本数据结束点num:生成的样本数据量，默认为50endpoint：True则包含stop；False则不包含stopretstep：If True, return (samples, step), where step is the spacing between samples.(即如果为True则结果会给出数据间隔)dtype：输出数组类型axis：0(默认)或-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eg:</p><pre class="line-numbers language-py"><code class="language-py">>>> np.linspace(2.0, 3.0, num=5)array([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ])>>> np.linspace(2.0, 3.0, num=5, endpoint=False)array([ 2. ,  2.2,  2.4,  2.6,  2.8])>>> np.linspace(2.0, 3.0, num=5, retstep=True)(array([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/Asher117/article/details/87855493" target="_blank" rel="noopener">原文链接</a></p></blockquote><h1 id="2-np-arange"><a href="#2-np-arange" class="headerlink" title="2. np.arange()"></a>2. np.arange()</h1><p><strong>函数返回一个有终点和起点的固定步长的排列，如[1,2,3,4,5]，起点是 1，终点是 5，步长为 1</strong></p><ul><li>1）一个参数时，参数值为终点，起点取默认值 0，步长取默认值 1</li><li>2）两个参数时，第一个参数为起点，第二个参数为终点，步长取默认值 1</li><li>3）三个参数时，第一个参数为起点，第二个参数为终点，第三个参数为步长。其中步长支持小数</li></ul><pre class="line-numbers language-py"><code class="language-py">#一个参数 默认起点0，步长为1 输出：[0 1 2]a = np.arange(3)#两个参数 默认步长为1 输出[3 4 5 6 7 8]a = np.arange(3,9)#三个参数 起点为0，终点为3，步长为0.1 输出[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.   1.1  1.2  1.3  1.4 1.5  1.6  1.7  1.8  1.9  2.   2.1  2.2  2.3  2.4  2.5  2.6  2.7  2.8  2.9]a = np.arange(0, 3, 0.1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/qq_41550480/article/details/89390579" target="_blank" rel="noopener">原文链接</a></p></blockquote><h1 id="3-np-random"><a href="#3-np-random" class="headerlink" title="3. np.random()"></a>3. np.random()</h1><h2 id="3-1-np-random-randint"><a href="#3-1-np-random-randint" class="headerlink" title="3.1 np.random.randint"></a>3.1 np.random.randint</h2><p>low、high、size 三个参数。默认 high 是 None,如果只有 low，那范围就是[0,low)。如果有 high，范围就是[low,high)</p><pre class="line-numbers language-py"><code class="language-py">>>> np.random.randint(2, size=10)array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0])>>> np.random.randint(1, size=10)array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])>>> np.random.randint(5, size=(2, 4))array([[4, 0, 2, 1],       [3, 2, 2, 0]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/weixin_42029738/article/details/81977492" target="_blank" rel="noopener">原文链接</a></p></blockquote><h2 id="3-2-numpy-random-randn-与-rand"><a href="#3-2-numpy-random-randn-与-rand" class="headerlink" title="3.2 numpy.random.randn()与 rand()"></a>3.2 numpy.random.randn()与 rand()</h2><ul><li>numpy.random.randn(d0, d1, …, dn)是从标准正态分布中返回一个或多个样本值</li><li>numpy.random.rand(d0, d1, …, dn)的随机样本位于[0, 1)中</li></ul><pre class="line-numbers language-py"><code class="language-py">import numpy as nparr1 = np.random.randn(2,4)print(arr1)print('******************************************************************')arr2 = np.random.rand(2,4)print(arr2)'''正负数都有[[-1.03021018 0.5197033 0.52117459 -0.70102661][ 0.98268569 1.21940697 -1.095241 -0.38161758]]******************************************************************正数部分[[ 0.19947349 0.05282713 0.56704222 0.45479972][ 0.28827103 0.1643551 0.30486786 0.56386943]]'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-np-random-seed"><a href="#3-3-np-random-seed" class="headerlink" title="3.3 np.random.seed()"></a>3.3 np.random.seed()</h2><p><strong>seed( ) 用于指定随机数生成时所用算法开始的整数值</strong></p><ul><li>1.如果使用相同的 seed( )值，则每次生成的随即数都相同</li><li>2.如果不设置这个值，则系统根据时间来自己选择这个值，此时每次生成的随机数因时间差异而不同</li><li>3.设置的 seed()值仅一次有效</li></ul><p><img src="/img/np/random_seed.webp" alt="seed示例"></p><h2 id="3-4-np-random-normal-loc-scale-size"><a href="#3-4-np-random-normal-loc-scale-size" class="headerlink" title="3.4 np.random.normal([loc,scale,size])"></a>3.4 np.random.normal([loc,scale,size])</h2><p>正态(高斯)分布</p><pre class="line-numbers language-py"><code class="language-py">mu,sigma = 0,0.1s = np.random.normal(mu,sigma,10)print(s)''' [-0.14154151 -0.04927673  0.01828343  0.05323477  0.05350814 -0.14129784  0.06566983 -0.05441259 -0.01597307  0.16633013]'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中Plt库的学习</title>
      <link href="/2020/02/21/python-plt/"/>
      <url>/2020/02/21/python-plt/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/qiurisiyu2016/article/details/80187177" target="_blank" rel="noopener">参考教程</a></p></blockquote><a id="more"></a><h1 id="0-plt-打开-opencv-图像"><a href="#0-plt-打开-opencv-图像" class="headerlink" title="0. plt 打开 opencv 图像"></a>0. plt 打开 opencv 图像</h1><p><strong>BGR 用 RGB 打开</strong></p><pre class="line-numbers language-py"><code class="language-py">import numpy as npimport cv2from matplotlib import pyplot as pltimg=cv2.imread('lena.jpg',cv2.IMREAD_COLOR)#method1b,g,r=cv2.split(img)img2=cv2.merge([r,g,b])plt.imshow(img2)plt.show()#method2img3=img[:,:,::-1]plt.imshow(img3)plt.show()#method3img4=cv2.cvtColor(img, cv2.COLOR_BGR2RGB)plt.imshow(img4)plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1-plt-plot-x-y"><a href="#1-plt-plot-x-y" class="headerlink" title="1. plt.plot(x,y)"></a>1. plt.plot(x,y)</h1><p><code>format_string的内容</code><br><img src="/img/plt/plot1.png" alt="string内容图片"><br><img src="/img/plt/plot2.png" alt="string内容图片"><br><img src="/img/plt/plot3.png" alt="string内容图片"><br><code>**kwargs</code></p><p>**kwards：<br>color 颜色<br>linestyle 线条样式<br>marker 标记风格<br>markerfacecolor 标记颜色<br>markersize 标记大小 等等</p><pre class="line-numbers language-py"><code class="language-py"># plt.plot(x,y,format_string,**kwargs)# x轴数据，y轴数据，控制曲线格式的字符串format_string颜色字符，风格字符，和标记字符plt.plot([1,2,3,6],[4,5,8,1],'r-s')plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>展示</strong><br><img src="/img/plt/plot4.png" alt="plot"></p><h1 id="2-plt-figure-用来画图，自定义画布大小"><a href="#2-plt-figure-用来画图，自定义画布大小" class="headerlink" title="2. plt.figure()用来画图，自定义画布大小"></a>2. plt.figure()用来画图，自定义画布大小</h1><p>定义画布大小，然后用 plot 画图</p><pre class="line-numbers language-py"><code class="language-py"># plt.figure() # 用来画图,自定义画布大小fig1 = plt.figure(num='fig111111', figsize=(10, 3), dpi=75, facecolor='#FFFFFF', edgecolor='#0000FF')# 名字,宽*高，dpi图像每英寸长度内的像素点数 一般75，plt.plot([1,2,3],[2,2,3])plt.show()plt.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/plt/figure1.png" alt="展示图片"></p><h1 id="3、plt-subplot-222"><a href="#3、plt-subplot-222" class="headerlink" title="3、plt.subplot(222)"></a>3、plt.subplot(222)</h1><p>将 figure 设置的画布大小分成几个部分，参数‘221’表示 2(row)x2(colu),即将画布分成 2x2，两行两列的 4 块区域，1 表示选择图形输出的区域在第一块，图形输出区域参数必须在“行 x 列”范围，此处必须在 1 和 2 之间选择——如果参数设置为 subplot(111)，则表示画布整个输出，不分割成小块区域，图形直接输出在整块画布上</p><pre class="line-numbers language-py"><code class="language-py">plt.subplot(222) plt.plot(y,xx)    #在2x2画布中第二块区域输出图形plt.show()plt.subplot(223)  #在2x2画布中第三块区域输出图形plt.plot(y,xx)plt.subplot(224)  # 在在2x2画布中第四块区域输出图形plt.plot(y,xx)# 子图plt.add_subplot(221)plt.add_subplot(222)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4、plt-xlim-设置-x-轴或者-y-轴刻度范围"><a href="#4、plt-xlim-设置-x-轴或者-y-轴刻度范围" class="headerlink" title="4、plt.xlim 设置 x 轴或者 y 轴刻度范围"></a>4、plt.xlim 设置 x 轴或者 y 轴刻度范围</h1><pre class="line-numbers language-py"><code class="language-py">plt.xlim(0,1000)  #  设置x轴刻度范围，从0~1000         #lim为极限，范围plt.ylim(0,20)   # 设置y轴刻度的范围，从0~20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="5、plt-xticks-：设置-x-轴刻度的表现方式"><a href="#5、plt-xticks-：设置-x-轴刻度的表现方式" class="headerlink" title="5、plt.xticks()：设置 x 轴刻度的表现方式"></a>5、plt.xticks()：设置 x 轴刻度的表现方式</h1><pre class="line-numbers language-py"><code class="language-py">fig2 = plt.figure(num='fig222222', figsize=(6, 3), dpi=75, facecolor='#FFFFFF', edgecolor='#FF0000')plt.plot()# np.linspace 创建等差数列plt.xticks(np.linspace(0,1000,15,endpoint=True))# 设置x轴刻度plt.yticks(np.linspace(0,20,10,endpoint=True))plt.show()plt.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>展示</strong><br><img src="/img/plt/xticks.png" alt="xticks代码展示"></p><h1 id="6-plt-scatter-–散点图"><a href="#6-plt-scatter-–散点图" class="headerlink" title="6. plt.scatter()–散点图"></a>6. plt.scatter()–散点图</h1><p><code>matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None,alpha=None, linewidths=None, verts=None, edgecolors=None, *, data=None, **kwargs)</code></p><ul><li>x，y：表示的是大小为(n,)的数组，也就是我们即将绘制散点图的数据点</li><li>s:是一个实数或者是一个数组大小为(n,)，这个是一个可选的参数</li><li>c:表示的是颜色，也是一个可选项。默认是蓝色’b’,表示的是标记的颜色，或者可以是一个表示颜色的字符，或者是一个长度为 n 的表示颜色的序列等等</li><li>marker:表示的是标记的样式，默认的是’o’</li><li>cmap:Colormap 实体或者是一个 colormap 的名字，cmap 仅仅当 c 是一个浮点数数组的时候才使用。如果没有申明就是 image.cmap</li><li>norm:Normalize 实体来将数据亮度转化到 0-1 之间，也是只有 c 是一个浮点数的数组的时候才使用。如果没有申明，就是默认为 colors.Normalize</li><li>vmin,vmax:实数，当 norm 存在的时候忽略。用来进行亮度数据的归一化</li><li>alpha：实数，0-1 之间</li><li>linewidths:也就是标记点的长度</li></ul><blockquote><p><a href="https://blog.csdn.net/m0_37393514/article/details/81298503" target="_blank" rel="noopener">参考教程</a></p></blockquote><h1 id="7、ax2-set-title-‘xxx’-设置标题，画图"><a href="#7、ax2-set-title-‘xxx’-设置标题，画图" class="headerlink" title="7、ax2.set_title(‘xxx’)设置标题，画图"></a>7、ax2.set_title(‘xxx’)设置标题，画图</h1><p><code>plt.xlabel()</code> <code>plt.ylabel()</code>xy 轴标签</p><pre class="line-numbers language-py"><code class="language-py">#产生[1,2,3,...,9]的序列x = np.arange(1,10)y = xfig = plt.figure()ax1 = fig.add_subplot(221)#设置标题ax1.set_title('Scatter Plot1')plt.xlabel('M')plt.ylabel('N')ax2 = fig.add_subplot(222)ax2.set_title('Scatter Plot2clf')#设置X轴标签plt.xlabel('X')           #设置X/Y轴标签是在对应的figure后进行操作才对应到该figure#设置Y轴标签plt.ylabel('Y')#画散点图ax1.scatter(x,y,c = 'r',marker = 'o')          #可以看出画散点图是在对figure进行操作ax2.scatter(x,y,c = 'b',marker = 'x')#设置图标plt.legend('show picture x1 ')#显示所画的图plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>展示</strong><br><img src="/img/plt/title1.png" alt="title展示"></p><h1 id="8-plt-hist（）绘制直方图"><a href="#8-plt-hist（）绘制直方图" class="headerlink" title="8. plt.hist（）绘制直方图"></a>8. plt.hist（）绘制直方图</h1><p><em>可以将高斯函数这些画出来</em></p><p><code>n, bins, patches = plt.hist(arr, bins=10, normed=0, facecolor='black', edgecolor='black',alpha=1，histtype='bar')</code><br>hist 的参数非常多，但常用的就这六个，只有第一个是必须的，后面四个可选</p><ul><li>arr: 需要计算直方图的一维数组</li><li>bins: 直方图的柱数，可选项，默认为 10</li><li>normed: 是否将得到的直方图向量归一化。默认为 0</li><li>facecolor: 直方图颜色</li><li>edgecolor: 直方图边框颜色</li><li>alpha: 透明度</li><li>histtype: 直方图类型，‘bar’, ‘barstacked’, ‘step’, ‘stepfilled’<br>返回值 ：<br>n: 直方图向量，是否归一化由参数 normed 设定<br>bins: 返回各个 bin 的区间范围<br>patches: 返回每个 bin 里面包含的数据，是一个 list</li></ul><pre><code>mu, sigma = 0, .1s = np.random.normal(loc=mu, scale=sigma, size=1000)a,b,c = plt.hist(s, bins=3)print("a: ",a)print("b: ",b)print("c: ",c)plt.show()结果：a:  [ 85. 720. 195.]         #每个柱子的值b:  [-0.36109509 -0.1357318   0.08963149  0.31499478]   #每个柱的区间范围c:  &lt;a list of 3 Patch objects&gt;       #总共多少柱子</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中math库的学习</title>
      <link href="/2020/02/20/python-math/"/>
      <url>/2020/02/20/python-math/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>python 中的 math 库</strong><br>非常的有意思 hhh<br>暂时先写一部分；没什么时间深入研究，等过段时间再说</p><!--more--><h1 id="1-角度相关函数"><a href="#1-角度相关函数" class="headerlink" title="1. 角度相关函数"></a>1. 角度相关函数</h1><h2 id="1-1-角弧度转换"><a href="#1-1-角弧度转换" class="headerlink" title="1.1 角弧度转换"></a>1.1 角弧度转换</h2><pre class="line-numbers language-py"><code class="language-py">import mathmath.degrees(math.pi/2)# 90.0math.radians(90)# 1.5707963267948966<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>萌芽杯项目的python代码</title>
      <link href="/2020/02/19/example-mengya/"/>
      <url>/2020/02/19/example-mengya/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-测试"><a href="#1-测试" class="headerlink" title="1. 测试"></a>1. 测试</h1><h2 id="1-1-视频经过梯度处理"><a href="#1-1-视频经过梯度处理" class="headerlink" title="1.1 视频经过梯度处理"></a>1.1 视频经过梯度处理</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2vc <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token string">'./video/1.mp4'</span><span class="token punctuation">)</span><span class="token keyword">if</span> vc<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    open<span class="token punctuation">,</span> frame <span class="token operator">=</span> vc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    open <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">while</span> open<span class="token punctuation">:</span>    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> vc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> frame <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">if</span> ret <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># sobelx = cv2.Sobel(gray,cv2.CV_64F,1,0)</span>        <span class="token comment" spellcheck="true"># sobely = cv2.Sobel(gray,cv2.CV_64F,0,1)</span>        <span class="token comment" spellcheck="true"># sobelx = cv2.convertScaleAbs(sobelx)</span>        <span class="token comment" spellcheck="true"># sobely = cv2.convertScaleAbs(sobely)</span>        <span class="token comment" spellcheck="true"># sobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)</span>        v1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>gray<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># cv2.imshow('result',sobelxy)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span>v1<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>vc<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-检测指针，绘制直线"><a href="#1-2-检测指针，绘制直线" class="headerlink" title="1.2 检测指针，绘制直线"></a>1.2 检测指针，绘制直线</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> osimg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./img/clock2.jpg'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># + input('请输入文件路径：')</span><span class="token keyword">def</span> <span class="token function">cv_show</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>name<span class="token punctuation">,</span>img<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">linedraw</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># edges = cv.Canny(gray, 50, 150, apertureSize=3)</span>        <span class="token comment" spellcheck="true"># 自动检测可能的直线，返回的是一条条线段</span>    ret<span class="token punctuation">,</span> thresohold <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># aussian = cv2.GaussianBlur(thresohold, (5, 5), 1) 高斯</span>    <span class="token comment" spellcheck="true"># kernel = np.ones((5, 5), np.uint8)  # （5，5）腐蚀大小</span>    <span class="token comment" spellcheck="true"># erosion = cv2.erode(thresohold, kernel, iterations=1) 去噪音点</span>    edges <span class="token operator">=</span> cv2<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>thresohold<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> apertureSize<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> cv2<span class="token punctuation">.</span>HoughLinesP<span class="token punctuation">(</span>edges<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> minLineLength<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">,</span> maxLineGap<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(type(lines))</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        cv2<span class="token punctuation">.</span>line<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    cv_show<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span>image<span class="token punctuation">)</span>linedraw<span class="token punctuation">(</span>img<span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-小综合；根据表盘识别指针并求出斜率"><a href="#1-3-小综合；根据表盘识别指针并求出斜率" class="headerlink" title="1.3 小综合；根据表盘识别指针并求出斜率"></a>1.3 小综合；根据表盘识别指针并求出斜率</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> mathimg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./img/clock1.jpg'</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_UNCHANGED<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 裁剪图片  具体指针要改</span>imgbufen <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">:</span><span class="token number">566</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将图像的阈值化 小于阈值的为max 大于阈值的为0，</span><span class="token comment" spellcheck="true"># 主要是因为这个指针是黑的,圆形遮罩也是黑的，所以先把指针反转为白的</span><span class="token comment" spellcheck="true"># 具体指针要改</span>imgfan <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>imgbufen<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 输出图像</span><span class="token keyword">def</span> <span class="token function">cv_show</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>name<span class="token punctuation">,</span>img<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 得到一个圆形遮罩，返回中间圆形</span><span class="token keyword">def</span> <span class="token function">get_zhezhao</span><span class="token punctuation">(</span>imgfan<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#获取图片尺寸</span>    height<span class="token punctuation">,</span> width <span class="token operator">=</span> imgfan<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    height <span class="token operator">=</span> int<span class="token punctuation">(</span>height<span class="token punctuation">)</span>    width <span class="token operator">=</span> int<span class="token punctuation">(</span>width<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#生成内显示模板</span>    circleIn <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    circleIn <span class="token operator">=</span> cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>circleIn<span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> min<span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#原图与内显示模板融合</span>    <span class="token comment" spellcheck="true">#生成空白图片</span>    imgIn <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#复制前3个通道</span>    imgIn<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>imgfan<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> circleIn<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    imgIn<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>imgfan<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> circleIn<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    imgIn<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>imgfan<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> circleIn<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置α通道的不透明部分</span>    circleIn<span class="token punctuation">[</span>circleIn <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    imgIn<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> circleIn<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># cv2.imwrite('./img/result1.jpg', imgIn)</span>    <span class="token comment" spellcheck="true"># cv_show('imgin',imgIn)</span>    <span class="token keyword">return</span> imgIn<span class="token comment" spellcheck="true"># 得到线，霍夫直线</span><span class="token keyword">def</span> <span class="token function">getlines</span><span class="token punctuation">(</span>imgIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>imgIn<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># cv_show("gray",gray)</span>    edges <span class="token operator">=</span> cv2<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> apertureSize<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> cv2<span class="token punctuation">.</span>HoughLinesP<span class="token punctuation">(</span>edges<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> minLineLength<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">,</span> maxLineGap<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(type(lines))</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(x1,y1,x2,y2)</span>        cv2<span class="token punctuation">.</span>line<span class="token punctuation">(</span>imgbufen<span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># cv_show('img',imgbufen)</span>        floatx1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span>        floaty1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>y1<span class="token punctuation">)</span><span class="token punctuation">)</span>        floatx2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span>        floaty2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># cv_show('imgline',imgbufen)</span>    <span class="token keyword">return</span> floatx1<span class="token punctuation">,</span>floaty1<span class="token punctuation">,</span>floatx2<span class="token punctuation">,</span>floaty2<span class="token keyword">def</span> <span class="token function">get_thr_k</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    ks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>floatx1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x1 <span class="token operator">=</span> floatx1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        y1 <span class="token operator">=</span> floaty1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        x2 <span class="token operator">=</span> floatx2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        y2 <span class="token operator">=</span> floaty2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        k <span class="token operator">=</span> <span class="token punctuation">(</span>y1<span class="token operator">-</span>y2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>x2<span class="token operator">-</span>x1<span class="token punctuation">)</span>        thr <span class="token operator">=</span> math<span class="token punctuation">.</span>atan<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        thr <span class="token operator">=</span> math<span class="token punctuation">.</span>degrees<span class="token punctuation">(</span>thr<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        ks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        thrs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thr<span class="token punctuation">)</span>    <span class="token keyword">return</span> ks<span class="token punctuation">,</span>thrsimgIn <span class="token operator">=</span> get_zhezhao<span class="token punctuation">(</span>imgfan<span class="token punctuation">)</span>floatx1<span class="token punctuation">,</span>floaty1<span class="token punctuation">,</span>floatx2<span class="token punctuation">,</span>floaty2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>getlines<span class="token punctuation">(</span>imgIn<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(floatx1,floaty1,floatx2,floaty2)</span><span class="token comment" spellcheck="true"># 多条直线的角度列表，单条直线直接thrs[0]</span>thrs <span class="token operator">=</span> get_thr_k<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'直线的斜率为：{thrs[0][0]}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'直线与横线间角度值：{thrs[1][0]}'</span><span class="token punctuation">)</span>cv_show<span class="token punctuation">(</span><span class="token string">'imgline'</span><span class="token punctuation">,</span>imgbufen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-更高级的检测指针，然后返回指针斜率"><a href="#1-4-更高级的检测指针，然后返回指针斜率" class="headerlink" title="1.4 更高级的检测指针，然后返回指针斜率"></a>1.4 更高级的检测指针，然后返回指针斜率</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> math<span class="token keyword">import</span> linekthr <span class="token keyword">as</span> lt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">get_pointer_rad</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''获取角度'''</span>    shape <span class="token operator">=</span> img<span class="token punctuation">.</span>shape    c_y<span class="token punctuation">,</span> c_x<span class="token punctuation">,</span> depth <span class="token operator">=</span> int<span class="token punctuation">(</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># h,w,cute</span>    x1<span class="token operator">=</span>c_x<span class="token operator">+</span>c_x<span class="token operator">*</span><span class="token number">1.5</span>  <span class="token comment" spellcheck="true"># 指针长度--宽 2.5倍</span>    src <span class="token operator">=</span> img<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    freq_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">361</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 算法</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> c_x<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>i <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">+</span> c_x        y <span class="token operator">=</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> c_x<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">+</span> c_y        temp <span class="token operator">=</span> src<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 备份</span>        cv2<span class="token punctuation">.</span>line<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token punctuation">(</span>c_x<span class="token punctuation">,</span> c_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 在temp上画线</span>        t1 <span class="token operator">=</span> img<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        t1<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>        c <span class="token operator">=</span> img<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">]</span>        points <span class="token operator">=</span> c<span class="token punctuation">[</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>        freq_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># cv2.imshow('d1', t1)</span>        cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># key = lambda x: float(x[0])</span>    <span class="token comment" spellcheck="true"># keytup = max(freq_list, key=key)</span>    <span class="token comment" spellcheck="true"># thrth = keytup[1]</span>    <span class="token comment" spellcheck="true"># print(f'当前角度:{thrth}度')</span>    <span class="token comment" spellcheck="true"># print('当前角度：',max(freq_list, key=key),'度')</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max<span class="token punctuation">(</span>freq_list<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./img/clock_re.png'</span><span class="token punctuation">)</span>imgc <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">165</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">getthr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thres <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 随机数范围</span>    <span class="token comment" spellcheck="true"># print(thres)</span>    imgfan <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>imgc<span class="token punctuation">,</span> thres<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    max <span class="token operator">=</span> get_pointer_rad<span class="token punctuation">(</span>imgfan<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># lt.cv_show('imgfan',imgfan)</span>    <span class="token comment" spellcheck="true"># print(max)</span>    <span class="token comment" spellcheck="true"># exit()</span>    thrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    thr <span class="token operator">=</span> max<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> thr<span class="token keyword">def</span> <span class="token function">get_averg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tol <span class="token operator">=</span> <span class="token number">0</span>    h <span class="token operator">=</span> <span class="token number">20</span>          <span class="token comment" spellcheck="true"># 统计次数</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>        thr <span class="token operator">=</span> getthr<span class="token punctuation">(</span><span class="token punctuation">)</span>        tol <span class="token operator">=</span> tol <span class="token operator">+</span> thr        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第{i+1}次的角度:{thr}'</span><span class="token punctuation">)</span>    averg <span class="token operator">=</span> tol <span class="token operator">/</span> h    <span class="token keyword">return</span> averg<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'角度的平均值：{get_averg()}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-初步完成核心"><a href="#2-初步完成核心" class="headerlink" title="2. 初步完成核心"></a>2. 初步完成<del>核心</del></h1><p><code>line_get.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 获取指针角度值</span><span class="token keyword">def</span> <span class="token function">get_pointer_rad</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    shape <span class="token operator">=</span> img<span class="token punctuation">.</span>shape    c_y<span class="token punctuation">,</span> c_x<span class="token punctuation">,</span> depth <span class="token operator">=</span> int<span class="token punctuation">(</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># h,w,cute</span>    x1<span class="token operator">=</span>c_x<span class="token operator">+</span>c_x<span class="token operator">*</span><span class="token number">1.5</span>  <span class="token comment" spellcheck="true"># 指针长度--宽 2.5倍</span>    src <span class="token operator">=</span> img<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    freq_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">361</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 算法</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> c_x<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>i <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">+</span> c_x        y <span class="token operator">=</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> c_x<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">+</span> c_y        temp <span class="token operator">=</span> src<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 备份</span>        cv2<span class="token punctuation">.</span>line<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token punctuation">(</span>c_x<span class="token punctuation">,</span> c_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 在temp上画线</span>        t1 <span class="token operator">=</span> img<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        t1<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>        c <span class="token operator">=</span> img<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">]</span>        points <span class="token operator">=</span> c<span class="token punctuation">[</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>        freq_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 可以展示匹配过程</span>        <span class="token comment" spellcheck="true"># cv2.imshow('d', temp)</span>        <span class="token comment" spellcheck="true"># cv2.imshow('d1', t1)</span>        <span class="token comment" spellcheck="true"># 如果要求固定检测时间不要太快，可以在这里调慢</span>        cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max<span class="token punctuation">(</span>freq_list<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getthr</span><span class="token punctuation">(</span>imgc<span class="token punctuation">)</span><span class="token punctuation">:</span>    thres <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 随机数范围</span>    imgfan <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>imgc<span class="token punctuation">,</span> thres<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    max <span class="token operator">=</span> get_pointer_rad<span class="token punctuation">(</span>imgfan<span class="token punctuation">)</span>    thr <span class="token operator">=</span> max<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> thr<span class="token keyword">def</span> <span class="token function">get_averg</span><span class="token punctuation">(</span>imgc<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>    tol <span class="token operator">=</span> <span class="token number">0</span>    h <span class="token operator">=</span> int<span class="token punctuation">(</span>h<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 统计次数</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>        thr <span class="token operator">=</span> getthr<span class="token punctuation">(</span>imgc<span class="token punctuation">)</span>        tol <span class="token operator">=</span> tol <span class="token operator">+</span> thr        <span class="token comment" spellcheck="true"># debug 看看角度是否正确统计</span>        <span class="token comment" spellcheck="true"># print(f'第{i+1}次的角度:{thr}')</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'、'</span><span class="token punctuation">)</span>    averg <span class="token operator">=</span> tol <span class="token operator">/</span> h    <span class="token keyword">return</span> averg<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./img/clock_re.png'</span><span class="token punctuation">)</span>    imgc <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token number">171</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'角度的平均值：{get_averg(imgc,5)}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>xlsx_get.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">import</span> openpyxl <span class="token keyword">as</span> xl<span class="token keyword">import</span> cv2<span class="token keyword">import</span> line_get <span class="token keyword">as</span> lg<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">get_xlsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 新建xlsx或打开已有xlsx</span>    filex <span class="token operator">=</span> <span class="token string">'data.xlsx'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filex<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--在result.xlsx中写入数据--'</span><span class="token punctuation">)</span>        wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 文件表单定位</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--新建一个data.xlsx--'</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 储存数据</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'指针角度'</span>    ws<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'转换角度'</span>    ws<span class="token punctuation">[</span><span class="token string">'C1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'测试时间'</span>    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./img/clock_re.png'</span><span class="token punctuation">)</span>    imgh <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">165</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">171</span><span class="token punctuation">]</span>    cishu <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入需要多少组数据--一直测则输入0--：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pingjun <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入多少组算一次平均值--推荐10--:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    row <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> cishu <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> cishu <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> row <span class="token operator">>=</span> cishu <span class="token punctuation">:</span>            maxrow <span class="token operator">=</span> sheet<span class="token punctuation">.</span>max_row            <span class="token comment" spellcheck="true"># print(f'excel中第{maxrow + 1}行输入数据-----')</span>            <span class="token comment" spellcheck="true"># 测几次来算平均值 imgh,10--10次</span>            thr <span class="token operator">=</span> lg<span class="token punctuation">.</span>get_averg<span class="token punctuation">(</span>imgh<span class="token punctuation">,</span>pingjun<span class="token punctuation">)</span>            ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>value<span class="token operator">=</span>thr<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第{row + 1}组-----角度平均值数据：{thr}，输入到第{maxrow + 1}行中'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> thr<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> thr<span class="token operator">&lt;=</span><span class="token number">45</span><span class="token punctuation">:</span>                cdu <span class="token operator">=</span> thr<span class="token operator">/</span><span class="token number">2.25</span> <span class="token operator">+</span><span class="token number">100</span>            <span class="token keyword">elif</span> thr<span class="token operator">>=</span><span class="token number">135</span> <span class="token operator">and</span> thr <span class="token operator">&lt;=</span> <span class="token number">360</span><span class="token punctuation">:</span>                cdu <span class="token operator">=</span> <span class="token punctuation">(</span>thr <span class="token operator">-</span> <span class="token number">135</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.25</span>            <span class="token keyword">else</span> <span class="token punctuation">:</span>                cdu <span class="token operator">=</span> <span class="token string">'故障'</span>            ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>value<span class="token operator">=</span>cdu<span class="token punctuation">)</span>            timed <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># %Y-%m-%d</span>            ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>value<span class="token operator">=</span>timed<span class="token punctuation">)</span>            row <span class="token operator">+=</span> <span class="token number">1</span>            wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'result.xlsx'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> row <span class="token operator">&lt;</span> cishu <span class="token punctuation">:</span>            maxrow <span class="token operator">=</span> sheet<span class="token punctuation">.</span>max_row            <span class="token comment" spellcheck="true"># print(f'excel中第{maxrow + 1}行输入数据-----')</span>            <span class="token comment" spellcheck="true"># 测几次来算平均值 imgh,10--10次</span>            thr <span class="token operator">=</span> lg<span class="token punctuation">.</span>get_averg<span class="token punctuation">(</span>imgh<span class="token punctuation">,</span>pingjun<span class="token punctuation">)</span>            ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>value<span class="token operator">=</span>thr<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第{row + 1}组-----角度平均值数据：{thr}，输入到第{maxrow + 1}行中'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> thr<span class="token operator">></span><span class="token number">0</span> <span class="token operator">and</span> thr<span class="token operator">&lt;=</span><span class="token number">45</span><span class="token punctuation">:</span>                cdu <span class="token operator">=</span> thr<span class="token operator">/</span><span class="token number">2.25</span> <span class="token operator">+</span><span class="token number">100</span>            <span class="token keyword">elif</span> thr<span class="token operator">>=</span><span class="token number">135</span> <span class="token operator">and</span> thr <span class="token operator">&lt;=</span> <span class="token number">360</span><span class="token punctuation">:</span>                cdu <span class="token operator">=</span> <span class="token punctuation">(</span>thr <span class="token operator">-</span> <span class="token number">135</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.25</span>            <span class="token keyword">else</span> <span class="token punctuation">:</span>                cdu <span class="token operator">=</span> <span class="token string">'故障'</span>            ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>value<span class="token operator">=</span>cdu<span class="token punctuation">)</span>            timed <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># %Y-%m-%d</span>            ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>value<span class="token operator">=</span>timed<span class="token punctuation">)</span>            row <span class="token operator">+=</span> <span class="token number">1</span>            wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_xlsx<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>keshihua_data.py</code><br><strong>主要运行文件</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> plotly<span class="token punctuation">.</span>offline <span class="token keyword">as</span> ptly<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>graph_objs <span class="token keyword">as</span> go<span class="token keyword">import</span> openpyxl <span class="token keyword">as</span> xl<span class="token keyword">import</span> xlsx_get <span class="token keyword">as</span> xgxg<span class="token punctuation">.</span>get_xlsx<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>activecdu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>        cdu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>timed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>        timed<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>trace1 <span class="token operator">=</span> go<span class="token punctuation">.</span>Scatter<span class="token punctuation">(</span>x <span class="token operator">=</span> timed<span class="token punctuation">,</span>                    y <span class="token operator">=</span> cdu<span class="token punctuation">,</span>                    mode <span class="token operator">=</span> <span class="token string">'lines+markers'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">#mode可选'markers','lines','lines+markers'</span>                    name <span class="token operator">=</span> <span class="token string">'data'</span><span class="token punctuation">,</span>                    marker <span class="token operator">=</span> dict<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">#若设为变量则可用散点大小表示变量大小</span>                                  color <span class="token operator">=</span> <span class="token string">'rgba(152, 0, 0, .8)'</span><span class="token punctuation">,</span>                                  line <span class="token operator">=</span> dict<span class="token punctuation">(</span>width <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>                                              color <span class="token operator">=</span> <span class="token string">'rgb(0, 0, 0)'</span>                                              <span class="token punctuation">)</span><span class="token punctuation">,</span>                                  opacity<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                                <span class="token punctuation">)</span>            <span class="token punctuation">)</span>data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>trace1<span class="token punctuation">)</span>layout <span class="token operator">=</span> go<span class="token punctuation">.</span>Layout<span class="token punctuation">(</span>font<span class="token operator">=</span>dict<span class="token punctuation">(</span>family<span class="token operator">=</span><span class="token string">'Courier New, monospace'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#3D3D3D'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   title<span class="token operator">=</span><span class="token string">'温度值'</span>    <span class="token punctuation">)</span>fig <span class="token operator">=</span> go<span class="token punctuation">.</span>Figure<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> layout<span class="token operator">=</span>layout<span class="token punctuation">)</span>ptly<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>fig<span class="token punctuation">,</span> filename <span class="token operator">=</span> <span class="token string">'data.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-进一步优化，直接再存到-excel-同时绘制图线，达到粗略得实时"><a href="#3-进一步优化，直接再存到-excel-同时绘制图线，达到粗略得实时" class="headerlink" title="3. 进一步优化，直接再存到 excel 同时绘制图线，达到粗略得实时"></a>3. 进一步优化，直接再存到 excel 同时绘制图线，达到粗略得实时</h1><p><code>keshihua_data_shishi.py</code></p><ul><li>1.实时显示，但不太美观，而且不丝滑</li><li>2.界面美观，但不会实时显示</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># import plotly.offline as ptly</span><span class="token comment" spellcheck="true"># import plotly.graph_objs as go</span><span class="token keyword">import</span> openpyxl <span class="token keyword">as</span> xl<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">import</span> line_get <span class="token keyword">as</span> lg<span class="token keyword">import</span> cv2<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">def</span> <span class="token function">save_xlsx</span><span class="token punctuation">(</span>thr<span class="token punctuation">,</span>cdu<span class="token punctuation">,</span>timed<span class="token punctuation">)</span><span class="token punctuation">:</span>    filex <span class="token operator">=</span> <span class="token string">'ssdata.xlsx'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filex<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'--在ssdata.xlsx中写入数据--'</span><span class="token punctuation">)</span>        wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'ssdata.xlsx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 文件表单定位</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--新建一个ssdata.xlsx--'</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'指针角度'</span>    ws<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'转换角度'</span>    ws<span class="token punctuation">[</span><span class="token string">'C1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'测试时间'</span>    maxrow <span class="token operator">=</span> sheet<span class="token punctuation">.</span>max_row <span class="token operator">+</span> <span class="token number">1</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>value<span class="token operator">=</span>thr<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>value<span class="token operator">=</span>cdu<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>value<span class="token operator">=</span>timed<span class="token punctuation">)</span>    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'ssdata.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_cts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filex <span class="token operator">=</span> <span class="token string">'ssdata.xlsx'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filex<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'--在ssdata.xlsx中写入数据--'</span><span class="token punctuation">)</span>        wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'ssdata.xlsx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 文件表单定位</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--新建一个ssdata.xlsx--'</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    cdu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            cdu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    timed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            timed<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> cdu<span class="token punctuation">,</span>timed<span class="token keyword">def</span> <span class="token function">get_shishi</span><span class="token punctuation">(</span>cishu<span class="token punctuation">,</span>pingjun<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./img/clock_re.png'</span><span class="token punctuation">)</span>    imgh <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">165</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">171</span><span class="token punctuation">]</span>    row <span class="token operator">=</span> <span class="token number">0</span>    cts <span class="token operator">=</span> get_cts<span class="token punctuation">(</span><span class="token punctuation">)</span>    cdus <span class="token operator">=</span> cts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    timeds <span class="token operator">=</span> cts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> row <span class="token operator">>=</span> cishu <span class="token punctuation">:</span>        thr <span class="token operator">=</span> lg<span class="token punctuation">.</span>get_averg<span class="token punctuation">(</span>imgh<span class="token punctuation">,</span>pingjun<span class="token punctuation">)</span>        <span class="token keyword">if</span> thr <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> thr <span class="token operator">&lt;=</span> <span class="token number">45</span><span class="token punctuation">:</span>            cdu <span class="token operator">=</span> thr <span class="token operator">/</span> <span class="token number">2.25</span> <span class="token operator">+</span> <span class="token number">100</span>        <span class="token keyword">elif</span> thr <span class="token operator">>=</span> <span class="token number">135</span> <span class="token operator">and</span> thr <span class="token operator">&lt;=</span> <span class="token number">360</span><span class="token punctuation">:</span>            cdu <span class="token operator">=</span> <span class="token punctuation">(</span>thr <span class="token operator">-</span> <span class="token number">135</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.25</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            cdu <span class="token operator">=</span> <span class="token string">'测试故障'</span>        cdus<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>cdu<span class="token punctuation">)</span><span class="token punctuation">)</span>        timed <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        timeds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>timed<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 保存数据</span>        save_xlsx<span class="token punctuation">(</span>thr<span class="token punctuation">,</span>cdu<span class="token punctuation">,</span>timed<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># plt.figure(1)</span>        plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 清空画布上的所有内容</span>        fig1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token string">'温度-时间'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">75</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'#FFFFFF'</span><span class="token punctuation">,</span> edgecolor<span class="token operator">=</span><span class="token string">'#0000FF'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Temp'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>timeds<span class="token punctuation">,</span> cdus<span class="token punctuation">,</span> <span class="token string">'r-s'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># plt.draw()  # 注意此函数需要调用</span>        <span class="token comment" spellcheck="true"># time.sleep(0.01)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>timeds<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">22</span><span class="token punctuation">:</span>            timeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            cdus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># # plotly 数据可视化 美观，可是不会动态</span>        <span class="token comment" spellcheck="true"># data = []</span>        <span class="token comment" spellcheck="true"># namee = str(round(cdu,1)) + '°C'</span>        <span class="token comment" spellcheck="true"># trace1 = go.Scatter(x=timeds,</span>        <span class="token comment" spellcheck="true">#                     y=cdus,</span>        <span class="token comment" spellcheck="true">#                     mode='lines+markers',  # mode可选'markers','lines','lines+markers'</span>        <span class="token comment" spellcheck="true">#                     name= namee,</span>        <span class="token comment" spellcheck="true">#                     marker=dict(size=10,  # 若设为变量则可用散点大小表示变量大小</span>        <span class="token comment" spellcheck="true">#                                 color='rgba(152, 0, 0, .8)',</span>        <span class="token comment" spellcheck="true">#                                 line=dict(width=2,</span>        <span class="token comment" spellcheck="true">#                                           color='rgb(0, 0, 0)'</span>        <span class="token comment" spellcheck="true">#                                           ),</span>        <span class="token comment" spellcheck="true">#                                 opacity=[]</span>        <span class="token comment" spellcheck="true">#                                 )</span>        <span class="token comment" spellcheck="true">#                     )</span>        <span class="token comment" spellcheck="true"># data.append(trace1)</span>        <span class="token comment" spellcheck="true"># axis_template = dict(</span>        <span class="token comment" spellcheck="true">#     showgrid=True,  # 网格</span>        <span class="token comment" spellcheck="true">#     zeroline=True,  # 是否显示基线,即沿着(0,0)画出x轴和y轴</span>        <span class="token comment" spellcheck="true">#     nticks=20,</span>        <span class="token comment" spellcheck="true">#     showline=True,</span>        <span class="token comment" spellcheck="true">#     title='Time',</span>        <span class="token comment" spellcheck="true">#     mirror='all',</span>        <span class="token comment" spellcheck="true">#     zerolinecolor="#FF0000"</span>        <span class="token comment" spellcheck="true"># )</span>        <span class="token comment" spellcheck="true"># ayis_template = dict(</span>        <span class="token comment" spellcheck="true">#     showgrid=True,  # 网格</span>        <span class="token comment" spellcheck="true">#     zeroline=True,  # 是否显示基线,即沿着(0,0)画出x轴和y轴</span>        <span class="token comment" spellcheck="true">#     nticks=20,</span>        <span class="token comment" spellcheck="true">#     showline=True,</span>        <span class="token comment" spellcheck="true">#     title='Temp',</span>        <span class="token comment" spellcheck="true">#     mirror='all',</span>        <span class="token comment" spellcheck="true">#     zerolinecolor="#FF0000"</span>        <span class="token comment" spellcheck="true"># )</span>        <span class="token comment" spellcheck="true"># layout = go.Layout(font=dict(family='Courier New, monospace', size=18, color='#3D3D3D'),</span>        <span class="token comment" spellcheck="true">#                    title='温度值' ,xaxis=axis_template,yaxis=ayis_template</span>        <span class="token comment" spellcheck="true">#                    )</span>        <span class="token comment" spellcheck="true"># fig = go.Figure(data=data, layout=layout)</span>        <span class="token comment" spellcheck="true"># ptly.plot(fig, filename='ssdata.html')</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_shishi<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>keshihua_shishi.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> keshihua_data_shishi <span class="token keyword">as</span> kdscishu <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true"># 0 - 一直测</span>pingjun <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入多少组算一次平均数--建议10组--:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    kds<span class="token punctuation">.</span>get_shishi<span class="token punctuation">(</span>cishu<span class="token punctuation">,</span>pingjun<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-粗糙的整合–待优化"><a href="#4-粗糙的整合–待优化" class="headerlink" title="4. 粗糙的整合–待优化"></a>4. 粗糙的整合–待优化</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> openpyxl <span class="token keyword">as</span> xl<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token keyword">import</span> cv2<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>offline <span class="token keyword">as</span> ptly<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>graph_objs <span class="token keyword">as</span> go<span class="token comment" spellcheck="true"># 获取指针角度值</span><span class="token keyword">def</span> <span class="token function">get_pointer_rad</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    shape <span class="token operator">=</span> img<span class="token punctuation">.</span>shape    c_y<span class="token punctuation">,</span> c_x<span class="token punctuation">,</span> depth <span class="token operator">=</span> int<span class="token punctuation">(</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># h,w,cute</span>    x1<span class="token operator">=</span>c_x<span class="token operator">+</span>c_x<span class="token operator">*</span><span class="token number">1.5</span>  <span class="token comment" spellcheck="true"># 指针长度--宽 2.5倍</span>    src <span class="token operator">=</span> img<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    freq_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">361</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 算法</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> c_x<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>i <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">+</span> c_x        y <span class="token operator">=</span> <span class="token punctuation">(</span>x1 <span class="token operator">-</span> c_x<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">+</span> c_y        temp <span class="token operator">=</span> src<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 备份</span>        cv2<span class="token punctuation">.</span>line<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token punctuation">(</span>c_x<span class="token punctuation">,</span> c_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 在temp上画线</span>        t1 <span class="token operator">=</span> img<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        t1<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>        c <span class="token operator">=</span> img<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">]</span>        points <span class="token operator">=</span> c<span class="token punctuation">[</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>        freq_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 可以展示匹配过程</span>        <span class="token comment" spellcheck="true"># cv2.imshow('d', temp)</span>        <span class="token comment" spellcheck="true"># cv2.imshow('d1', t1)</span>        <span class="token comment" spellcheck="true"># 如果要求固定检测时间不要太快，可以在这里调慢</span>        cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> max<span class="token punctuation">(</span>freq_list<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getthr</span><span class="token punctuation">(</span>imgc<span class="token punctuation">)</span><span class="token punctuation">:</span>    thres <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 随机数范围</span>    imgfan <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>imgc<span class="token punctuation">,</span> thres<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    max <span class="token operator">=</span> get_pointer_rad<span class="token punctuation">(</span>imgfan<span class="token punctuation">)</span>    thr <span class="token operator">=</span> max<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> thr<span class="token keyword">def</span> <span class="token function">get_averg</span><span class="token punctuation">(</span>imgc<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>    tol <span class="token operator">=</span> <span class="token number">0</span>    h <span class="token operator">=</span> int<span class="token punctuation">(</span>h<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 统计次数</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>        thr <span class="token operator">=</span> getthr<span class="token punctuation">(</span>imgc<span class="token punctuation">)</span>        tol <span class="token operator">=</span> tol <span class="token operator">+</span> thr        <span class="token comment" spellcheck="true"># debug 看看角度是否正确统计</span>        <span class="token comment" spellcheck="true"># print(f'第{i+1}次的角度:{thr}')</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'、'</span><span class="token punctuation">)</span>    averg <span class="token operator">=</span> tol <span class="token operator">/</span> h    <span class="token keyword">return</span> averg<span class="token keyword">def</span> <span class="token function">save_xlsx</span><span class="token punctuation">(</span>thr<span class="token punctuation">,</span>cdu<span class="token punctuation">,</span>timed<span class="token punctuation">)</span><span class="token punctuation">:</span>    filex <span class="token operator">=</span> <span class="token string">'ssdata.xlsx'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filex<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'--在ssdata.xlsx中写入数据--'</span><span class="token punctuation">)</span>        wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'ssdata.xlsx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 文件表单定位</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--新建一个ssdata.xlsx--'</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'指针角度'</span>    ws<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'转换角度'</span>    ws<span class="token punctuation">[</span><span class="token string">'C1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'测试时间'</span>    maxrow <span class="token operator">=</span> sheet<span class="token punctuation">.</span>max_row <span class="token operator">+</span> <span class="token number">1</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>value<span class="token operator">=</span>thr<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>value<span class="token operator">=</span>cdu<span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>maxrow<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>value<span class="token operator">=</span>timed<span class="token punctuation">)</span>    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'ssdata.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_cts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filex <span class="token operator">=</span> <span class="token string">'ssdata.xlsx'</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filex<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'--在ssdata.xlsx中写入数据--'</span><span class="token punctuation">)</span>        wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'ssdata.xlsx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 文件表单定位</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--新建一个ssdata.xlsx--'</span><span class="token punctuation">)</span>        sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet'</span><span class="token punctuation">]</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active    cdu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            cdu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    timed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> ws<span class="token punctuation">.</span>iter_rows<span class="token punctuation">(</span>min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>max_row<span class="token operator">=</span>sheet<span class="token punctuation">.</span>max_row <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">:</span>            timed<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> cdu<span class="token punctuation">,</span>timed<span class="token keyword">def</span> <span class="token function">get_shishi</span><span class="token punctuation">(</span>cishu<span class="token punctuation">,</span>pingjun<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># img = cv2.imread('./img/clock_re.png')</span>    imgh <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'frame.jpg'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># imgh = img[0:165,6:171]</span>    <span class="token comment" spellcheck="true"># 读取excle中数据</span>    cts <span class="token operator">=</span> get_cts<span class="token punctuation">(</span><span class="token punctuation">)</span>    cdus <span class="token operator">=</span> cts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    timeds <span class="token operator">=</span> cts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    row <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">while</span> row<span class="token punctuation">:</span>        thr <span class="token operator">=</span> get_averg<span class="token punctuation">(</span>imgh<span class="token punctuation">,</span>pingjun<span class="token punctuation">)</span>        <span class="token keyword">if</span> thr <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> thr <span class="token operator">&lt;=</span> <span class="token number">45</span><span class="token punctuation">:</span>            cdu <span class="token operator">=</span> thr <span class="token operator">/</span> <span class="token number">2.25</span> <span class="token operator">+</span> <span class="token number">100</span>        <span class="token keyword">elif</span> thr <span class="token operator">>=</span> <span class="token number">135</span> <span class="token operator">and</span> thr <span class="token operator">&lt;=</span> <span class="token number">360</span><span class="token punctuation">:</span>            cdu <span class="token operator">=</span> <span class="token punctuation">(</span>thr <span class="token operator">-</span> <span class="token number">135</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.25</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            cdu <span class="token operator">=</span> <span class="token string">'测试故障'</span>        cdus<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>cdu<span class="token punctuation">)</span><span class="token punctuation">)</span>        timed <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        timeds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>timed<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 保存数据</span>        save_xlsx<span class="token punctuation">(</span>thr<span class="token punctuation">,</span>cdu<span class="token punctuation">,</span>timed<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># # plotly 数据可视化 美观，可是不会动态</span>        <span class="token comment" spellcheck="true"># data = []</span>        <span class="token comment" spellcheck="true"># cdu1 = round(cdu ,1)</span>        <span class="token comment" spellcheck="true"># namee = str(cdu1) + '°C'</span>        <span class="token comment" spellcheck="true"># trace1 = go.Scatter(x=timeds,</span>        <span class="token comment" spellcheck="true">#                     y=cdus,</span>        <span class="token comment" spellcheck="true">#                     mode='lines+markers',  # mode可选'markers','lines','lines+markers'</span>        <span class="token comment" spellcheck="true">#                     name= namee,</span>        <span class="token comment" spellcheck="true">#                     marker=dict(size=10,  # 若设为变量则可用散点大小表示变量大小</span>        <span class="token comment" spellcheck="true">#                                 color='rgba(152, 0, 0, .8)',</span>        <span class="token comment" spellcheck="true">#                                 line=dict(width=2,</span>        <span class="token comment" spellcheck="true">#                                           color='rgb(0, 0, 0)'</span>        <span class="token comment" spellcheck="true">#                                           ),</span>        <span class="token comment" spellcheck="true">#                                 opacity=[]</span>        <span class="token comment" spellcheck="true">#                                 )</span>        <span class="token comment" spellcheck="true">#                     )</span>        <span class="token comment" spellcheck="true"># data.append(trace1)</span>        <span class="token comment" spellcheck="true"># axis_template = dict(</span>        <span class="token comment" spellcheck="true">#     showgrid=True,  # 网格</span>        <span class="token comment" spellcheck="true">#     zeroline=True,  # 是否显示基线,即沿着(0,0)画出x轴和y轴</span>        <span class="token comment" spellcheck="true">#     nticks=20,</span>        <span class="token comment" spellcheck="true">#     showline=True,</span>        <span class="token comment" spellcheck="true">#     title='Time',</span>        <span class="token comment" spellcheck="true">#     mirror='all',</span>        <span class="token comment" spellcheck="true">#     zerolinecolor="#FF0000"</span>        <span class="token comment" spellcheck="true"># )</span>        <span class="token comment" spellcheck="true"># ayis_template = dict(</span>        <span class="token comment" spellcheck="true">#     showgrid=True,  # 网格</span>        <span class="token comment" spellcheck="true">#     zeroline=True,  # 是否显示基线,即沿着(0,0)画出x轴和y轴</span>        <span class="token comment" spellcheck="true">#     nticks=20,</span>        <span class="token comment" spellcheck="true">#     showline=True,</span>        <span class="token comment" spellcheck="true">#     title='Temp',</span>        <span class="token comment" spellcheck="true">#     mirror='all',</span>        <span class="token comment" spellcheck="true">#     zerolinecolor="#FF0000"</span>        <span class="token comment" spellcheck="true"># )</span>        <span class="token comment" spellcheck="true"># layout = go.Layout(font=dict(family='Courier New, monospace', size=18, color='#3D3D3D'),</span>        <span class="token comment" spellcheck="true">#                    title='温度值' ,xaxis=axis_template,yaxis=ayis_template</span>        <span class="token comment" spellcheck="true">#                    )</span>        <span class="token comment" spellcheck="true"># fig = go.Figure(data=data, layout=layout)</span>        <span class="token comment" spellcheck="true"># ptly.plot(fig, filename='ssdata.html')</span>        <span class="token comment" spellcheck="true"># break</span>        <span class="token comment" spellcheck="true"># 实时数据，停不下来</span>        <span class="token comment" spellcheck="true"># plt.figure(1)</span>        plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 清空画布上的所有内容</span>        fig1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token string">'温度-时间'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">75</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'#FFFFFF'</span><span class="token punctuation">,</span> edgecolor<span class="token operator">=</span><span class="token string">'#0000FF'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Temp'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>timeds<span class="token punctuation">,</span> cdus<span class="token punctuation">,</span> <span class="token string">'r-s'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># plt.draw()  # 注意此函数需要调用</span>        <span class="token comment" spellcheck="true"># time.sleep(0.01)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>timeds<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">22</span><span class="token punctuation">:</span>            timeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            cdus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>            row <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">video_show</span><span class="token punctuation">(</span>video<span class="token punctuation">,</span>ci<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        ret1<span class="token punctuation">,</span>frame <span class="token operator">=</span> video<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> ret1<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"视频获取失败！"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        framegray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>        template <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./img/moban_c.jpg'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(template.shape)</span>        <span class="token comment" spellcheck="true"># exit()</span>        theight <span class="token punctuation">,</span> twidth <span class="token operator">=</span> template<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> template<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        result <span class="token operator">=</span> cv2<span class="token punctuation">.</span>matchTemplate<span class="token punctuation">(</span>frame<span class="token punctuation">,</span>template<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>TM_SQDIFF_NORMED<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span>result<span class="token punctuation">,</span>result<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>NORM_MINMAX<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        min_val<span class="token punctuation">,</span>max_val<span class="token punctuation">,</span>min_loc<span class="token punctuation">,</span>max_loc <span class="token operator">=</span> cv2<span class="token punctuation">.</span>minMaxLoc<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># # min_loc：矩形定点</span>        <span class="token comment" spellcheck="true"># # (min_loc[0]+twidth,min_loc[1]+theight)：矩形的宽高</span>        <span class="token comment" spellcheck="true"># # (0,0,225)：矩形的边框颜色；2：矩形边框宽度</span>        cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>frame <span class="token punctuation">,</span>min_loc <span class="token punctuation">,</span><span class="token punctuation">(</span>min_loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> twidth <span class="token punctuation">,</span>min_loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> theight<span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Video_show"</span><span class="token punctuation">,</span>frame<span class="token punctuation">)</span>        choose_data <span class="token operator">=</span> framegray<span class="token punctuation">[</span>min_loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">(</span>min_loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> twidth <span class="token punctuation">)</span><span class="token punctuation">,</span>min_loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>min_loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> theight<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># choose_datafan = cv2.threshold(choose_data ,110,255 ,cv2.THRESH_BINARY_INV)[1]</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"choose_video"</span><span class="token punctuation">,</span>choose_data<span class="token punctuation">)</span>        <span class="token keyword">if</span> i<span class="token operator">%</span>ci <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>f<span class="token string">'frame.jpg'</span><span class="token punctuation">,</span>choose_data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'照片已保存--frame.jpg--：'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    video<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span> <span class="token punctuation">:</span>    cishu <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 0 - 一直测</span>    <span class="token comment" spellcheck="true"># pingjun = int(input('请输入多少组算一次平均数--建议2组--:'))</span>    pingjun <span class="token operator">=</span> <span class="token number">5</span>    ci <span class="token operator">=</span> <span class="token number">100</span>    <span class="token comment" spellcheck="true"># ci = int(input('请输入多少时间换一组照片--100大概3.638s左右--：'))</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        video <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        video_show<span class="token punctuation">(</span>video <span class="token punctuation">,</span>ci<span class="token punctuation">)</span>        get_shishi<span class="token punctuation">(</span>cishu <span class="token punctuation">,</span>pingjun<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-进一步优化"><a href="#5-进一步优化" class="headerlink" title="5. 进一步优化"></a>5. 进一步优化</h1><h2 id="5-1-分析误差的准备"><a href="#5-1-分析误差的准备" class="headerlink" title="5.1 分析误差的准备"></a>5.1 分析误差的准备</h2><h3 id="5-1-1-构造一个桌面指针"><a href="#5-1-1-构造一个桌面指针" class="headerlink" title="5.1.1 构造一个桌面指针"></a>5.1.1 构造一个桌面指针</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> turtle <span class="token keyword">as</span> t<span class="token keyword">import</span> time<span class="token keyword">import</span> datetime <span class="token keyword">as</span> dt<span class="token keyword">def</span> <span class="token function">drawuse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># background</span>    game <span class="token operator">=</span> t<span class="token punctuation">.</span>Screen<span class="token punctuation">(</span><span class="token punctuation">)</span>    game<span class="token punctuation">.</span>bgcolor<span class="token punctuation">(</span><span class="token string">'#A4D3EE'</span><span class="token punctuation">)</span>    game<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    game<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    pen <span class="token operator">=</span> t<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>ht<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>    pen<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            pen<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 圆</span>            pen<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 刻度</span>            pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">225</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                pen<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>                pen<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">22.5</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 指针</span>            pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">225</span> <span class="token operator">-</span> i<span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token number">271</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> <span class="token number">0</span>            game<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drawgd</span><span class="token punctuation">(</span>thr<span class="token punctuation">)</span><span class="token punctuation">:</span>        pen<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 圆</span>        pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 刻度</span>        pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">225</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pen<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            pen<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">22.5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 指针</span>        pen<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">225</span> <span class="token operator">-</span> thr<span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>        pen<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>        game<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 模式一--动态</span>    draw<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># # 模式二--固定</span>    <span class="token comment" spellcheck="true"># thr = int(input("输入指针度数:--角度--"))</span>    <span class="token comment" spellcheck="true"># drawgd(thr)</span>    game<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-2-手机上下载一个模拟时钟"><a href="#5-1-2-手机上下载一个模拟时钟" class="headerlink" title="5.1.2 手机上下载一个模拟时钟"></a>5.1.2 手机上下载一个模拟时钟</h3><h3 id="5-1-3-获取两者数据对比来分析误差"><a href="#5-1-3-获取两者数据对比来分析误差" class="headerlink" title="5.1.3 获取两者数据对比来分析误差"></a>5.1.3 获取两者数据对比来分析误差</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Compete </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中Opencv库的学习</title>
      <link href="/2020/02/18/python-open-cv/"/>
      <url>/2020/02/18/python-open-cv/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0-基本知识的学习"><a href="#0-基本知识的学习" class="headerlink" title="0.基本知识的学习"></a>0.基本知识的学习</h1><h2 id="0-1-基本操作"><a href="#0-1-基本操作" class="headerlink" title="0.1 基本操作"></a>0.1 基本操作</h2><p>引用库<br><code>import cv2</code></p><p>cv2.IMREAD_COLOR:彩色图像 RGB 三通道<br>cv2.IMREAD_GRAYSCALE：灰度图像 灰度一个通道</p><ul><li><code>img = cv2.imread('1.jpg')</code>打开图像—-type(img) = numpy.ndarry</li><li><code>img = cv2.imread('1.jpg',cv2.IMREAD_GRAYSCALE)</code>打开为灰度图像</li><li><code>cv2.imshow('image',img)</code>展示图像，窗口 image</li><li><code>cv2.waitKey(0)</code>窗口停留时间毫秒级，0 表示按任意键退出</li><li><code>cv2.destroyALLWindows()</code>销毁窗口</li><li><code>cv2.imwrite('result.jpg',img)</code>保存图像，（文件名，图片）</li></ul><p><em>可以直接定义一个函数</em></p><pre class="line-numbers language-py"><code class="language-py">def cv_show(name,img):    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyALLWindows()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0-1-1-画直线"><a href="#0-1-1-画直线" class="headerlink" title="0.1.1 画直线"></a>0.1.1 画直线</h3><p>像素点坐标，左为零，上为零<br>左上角为坐标原点，而坐标系是从左到右 x 符合，从上到下，y 要取负</p><pre class="line-numbers language-py"><code class="language-py">img = np.zeros((320, 320, 3), np.uint8) #生成一个空灰度图像print(img.shape) # 输出：(320, 320, 3)def cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyAllWindows()# 图片，初始坐标，结束坐标，图线颜色，图线粗细cv2.line(img,(0,100),(100,0),(0,0,255),2)cv2.line(img,(0,200),(100,0),(0,255,0),2)cv_show('line',img)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0-1-2-调用笔记本摄像头"><a href="#0-1-2-调用笔记本摄像头" class="headerlink" title="0.1.2 调用笔记本摄像头"></a>0.1.2 调用笔记本摄像头</h3><pre class="line-numbers language-python"><code class="language-python">video <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 参数是0，表示打开笔记本的内置摄像头，参数是视频文件路径则打开视频，如cap = cv2.VideoCapture("../test.avi")</span>ret<span class="token punctuation">,</span>frame <span class="token operator">=</span> video<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ret,frame是获cap.read()方法的两个返回值。其中ret是布尔值，如果读取帧是正确的则返回True，如果文件读取到结尾，它的返回值就为False</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 如cv2.waitKey(0)只显示当前帧图像，相当于视频暂停</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 表示延时1ms切换到下一帧图像，对于视频而言</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 会因为延时过久而卡顿感觉到卡顿</span>cv2<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>调用release<span class="token punctuation">(</span><span class="token punctuation">)</span>释放摄像头，调用destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>关闭所有图像窗口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-2-基本属性-函数"><a href="#0-2-基本属性-函数" class="headerlink" title="0.2 基本属性/函数"></a>0.2 基本属性/函数</h2><p>img.shape # (414.500.3) (h,w,rgb=3)<br>img.size # h*w*rgb<br>img.dtype # uint8</p><h2 id="0-3-读取视频"><a href="#0-3-读取视频" class="headerlink" title="0.3 读取视频"></a>0.3 读取视频</h2><p>cv2.VideoCapture 捕获摄像头</p><ul><li><code>vc = cv2.VideoCapture('test.mp4')</code> 打开视频</li></ul><pre class="line-numbers language-py"><code class="language-py"># 检查是否正确打开if vc.isOpened():    open. frame = vc.read()else:    open = Falsewhile open:# 播放视频 循环每一帧while open:    ret, frame = vc.read()    if frame is None:        break    if ret == True:        gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)   #转化为灰度        cv2.namedWindow('result',0)        cv2.imshow('result',gray)        if cv2.waitKey(10) & 0xFF == 27: # 10刚刚好速度，27按esc退出            breakvc.release()cv2.destroyAllWindows()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-4-感兴趣区域"><a href="#0-4-感兴趣区域" class="headerlink" title="0.4 感兴趣区域"></a>0.4 感兴趣区域</h2><p>图像截取</p><pre class="line-numbers language-python"><code class="language-python">img <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'1.jpg'</span><span class="token punctuation">)</span>cat <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">]</span>cv<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span>cat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>图片截取，（识别技术将匹配到的数据展示）</p><pre class="line-numbers language-python"><code class="language-python">image_clip <span class="token operator">=</span> image_rgb<span class="token punctuation">[</span>int<span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>顺序为<span class="token punctuation">[</span>y0<span class="token punctuation">:</span>y1<span class="token punctuation">,</span> x0<span class="token punctuation">:</span>x1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0-5-特殊选取-切分通道"><a href="#0-5-特殊选取-切分通道" class="headerlink" title="0.5 特殊选取,切分通道"></a>0.5 特殊选取,切分通道</h2><p>b：::0<br>g：::1<br>r：::2</p><pre class="line-numbers language-py"><code class="language-py">b,g,r = cv2.split(img)  # 切分b.shape == g.shape == r.shapeimg = cv2.merge((b,g,r))    # 合并img.shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-6-边界填充"><a href="#0-6-边界填充" class="headerlink" title="0.6 边界填充"></a>0.6 边界填充</h2><p>图像的边界</p><pre class="line-numbers language-py"><code class="language-py"># 上下左右填充大小import cv2def cv_show(name,img):    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyALLWindows()img = cv2.imread('./img/1.jpg')# 定义边界大小top_size, bottom_size, left_size,right_size = (50,50,50,50)# 复制法，复制最边缘像素replicate = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_REPLICATE)# 反射法 对感兴趣的图像中的像素在两边进行复制  ba|abc|cbreflect = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_REFLECT)# 反射法   edcb|abcdefgh|gfedcreflect2 = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_REFLECT_101)# 外包装法  cdefgh|abcdefgh|abcdefwrap = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_WRAP)# 常量法   常数值补充constant = cv2.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,borderType = cv2.BORDER_CONSTANT)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-7-数值计算-图像融合-大小放缩"><a href="#0-7-数值计算-图像融合-大小放缩" class="headerlink" title="0.7 数值计算\图像融合\大小放缩"></a>0.7 数值计算\图像融合\大小放缩</h2><pre class="line-numbers language-py"><code class="language-py">img1 = cv2.imread('1.jpg')img2 = cv2.imread('2.jpg')img11 = img1 + 10  # [500,500,3] 中每一块都加10img1[:5,:,0].shape 只打印前五行img11[:5,:,0](img1+img11)[:5,:,0]    如果超出，则结果取余cv2.add(img1,img11)[:5,:,0] 如果超出255，则不取余直接用255# 图像融合img1+img2 #shape不同，则加不了img1.shape  # (414,500,3)img2.shape  # (419,499,3)img2 = cv2.resize(img2,(500,414))   # 改变大小img2.shape  # (414,500,3)res = cv2.addWeighted(img1,0.4,img2,0.6,0)# res = img1*0.4+img2*0.6+0     权重# 图像大小放缩res = cv2.resize(img,(0,0),fx=0.5,fy=2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-8-图像阈值"><a href="#0-8-图像阈值" class="headerlink" title="0.8 图像阈值"></a>0.8 图像阈值</h2><pre class="line-numbers language-py"><code class="language-py">cv2.threshold():参数：    img:图像对象，必须是灰度图    thresh:阈值 0~255   eg:127    maxval：最大值  255    type:        cv2.THRESH_BINARY:     小于阈值的像素置为0，大于阈值的置为maxval            超过阈值部分取最大值maxval=255 white，否则取0 black            亮的地方白，暗的地方黑        cv2.THRESH_BINARY_INV： 小于阈值的像素置为maxval，大于阈值的置为0            亮的地方黑，暗的地方白        cv2.THRESH_TRUNC：      小于阈值的像素不变，大于阈值的置为thresh            指定一个截断值，大于阈值部分变成阈值，小于的不变        cv2.THRESH_TOZERO       小于阈值的像素置0，大于阈值的不变            大于阈值部分不变，小于的全变为0        cv2.THRESH_TOZERO_INV   小于阈值的不变，大于阈值的像素置0            大于阈值变为0   ，小于阈值的不变返回两个值    ret:阈值    img：阈值化处理后的图像cv2.adaptiveThreshold() 自适应阈值处理，图像不同部位采用不同的阈值进行处理参数：    img: 图像对象，8-bit单通道图    maxValue:最大值    adaptiveMethod: 自适应方法        cv2.ADAPTIVE_THRESH_MEAN_C     ：阈值为周围像素的平均值        cv2.ADAPTIVE_THRESH_GAUSSIAN_C : 阈值为周围像素的高斯均值（按权重）    threshType:        cv2.THRESH_BINARY:     小于阈值的像素置为0，大于阈值的置为maxValuel        cv2.THRESH_BINARY_INV:  小于阈值的像素置为maxValue，大于阈值的置为0    blocksize: 计算阈值时，自适应的窗口大小,必须为奇数 （如3：表示附近3个像素范围内的像素点，进行计算阈值）    C： 常数值，通过自适应方法计算的值，减去该常数值(mean value of the blocksize*blocksize neighborhood of (x, y) minus C)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-9-图像平滑-去掉噪音点"><a href="#0-9-图像平滑-去掉噪音点" class="headerlink" title="0.9 图像平滑-去掉噪音点"></a>0.9 图像平滑-去掉噪音点</h2><pre class="line-numbers language-py"><code class="language-py">import cv2import numpy as npimg = cv2.imread('./img/1.jpg')def cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyALLWindows()# 均值滤波# 简单的平均卷积操作 # (3,3)卷积盒blur = cv2.blur(img,(3,3))  # （奇数，奇数） 中心的值根据周围数改变# 方框滤波# 与均值滤波相似   normalize 是否做归一化，true与均值一样#                                       false 会越界>255 ，所有越界值全为255box = cv2.boxFilter(img,-1,(3,3),normalize =True)# 高斯滤波# 高斯模糊---正态分布，离中心值越远，值越小aussian = cv2.GaussianBlur(img,(5,5),1)     # (5,5)的盒# 中值滤波# 中间的值median = cv2.medianBlur(img,5)# 展示所有的# 三张图片拼接在一起res = np.hstack((blur,aussian,median))resv = np.vstack((blur,aussian,median))cv_show('res',res)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-10-形态学-腐蚀操作-去掉毛刺"><a href="#0-10-形态学-腐蚀操作-去掉毛刺" class="headerlink" title="0.10 形态学-腐蚀操作-去掉毛刺"></a>0.10 形态学-腐蚀操作-去掉毛刺</h2><p>边界里的盒子如果有 0 有 255，则全变为 0</p><pre class="line-numbers language-py"><code class="language-py">import numpy as np# 去毛刺，r通道kernel = np.ones((5,5),np.uint8)    # （5，5）腐蚀大小erosion = cv2.erode(img,kernel,iterations = 2)  # iterations 做几次腐蚀<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-11-形态学-膨胀操作"><a href="#0-11-形态学-膨胀操作" class="headerlink" title="0.11 形态学-膨胀操作"></a>0.11 形态学-膨胀操作</h2><p><em>腐蚀后图像太细，使用膨胀</em><br>边界里的盒子如果有 0 有 255，则全变为 255 白</p><pre class="line-numbers language-py"><code class="language-py">kernel = np.ones((3,3),np.uint8)dilate = cv2.dilate(erosion,kernel,iterations=1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0-12-开运算与闭运算"><a href="#0-12-开运算与闭运算" class="headerlink" title="0.12 开运算与闭运算"></a>0.12 开运算与闭运算</h2><pre class="line-numbers language-py"><code class="language-py"># 开运算--先腐蚀后膨胀kernel = np.ones((5,5),np.uint8)opening = cv2.morphologyEx(img,cv2.MORPH_OPEN,KERNEL)# 闭运算--先膨胀后腐蚀kernel = np.ones((5,5),np.uint8)closing = cv2.morphologyEx(img,cv2.MORPH_CLOSE,kernel)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-13-梯度运算"><a href="#0-13-梯度运算" class="headerlink" title="0.13 梯度运算"></a>0.13 梯度运算</h2><pre class="line-numbers language-py"><code class="language-py"># 梯度运算 = 膨胀-腐蚀 = 轮廓kernel = np.ones((7,7),np.uint8)gradient = cv2.morphologyEx(img,cv2.MORPH_GRADIENT,kernel)  # 轮廓<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="0-14-礼帽-黑帽"><a href="#0-14-礼帽-黑帽" class="headerlink" title="0.14 礼帽 黑帽"></a>0.14 礼帽 黑帽</h2><pre class="line-numbers language-py"><code class="language-py"># 礼帽 = 原始输入 - 开运算 = 毛刺tophat = cv2.morphologyEx(img,cv2.MORPH_TOPHAT,kernel)# 黑帽 = 闭运算 - 原始输入 = 毛刺+更胖整体 - 毛刺blackhat = cv2.morphologyEx(img,cv2.MORPH_BLACKHAT,kernel)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-15-图像梯度-Sobel-算子"><a href="#0-15-图像梯度-Sobel-算子" class="headerlink" title="0.15 图像梯度-Sobel 算子"></a>0.15 图像梯度-Sobel 算子</h2><p><img src="/img/opencv/1.jpg" alt="sobel"><br>梯度：边缘位置的像素数值不同，数值差越大，梯度越大<br>边缘检测，物体分辨<br>右减左，下减上   从右到左，从下至上</p><pre class="line-numbers language-py"><code class="language-py"># dst = cv2.Sobel(img,ddepth,dx,dy,ksize)# ddepth:图像深度 -1# dx dy：水平，竖直 1 0# ksize：盒的大小sobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize = 3)# cv2.CV_64F 负数形式# 白-黑是正数，黑-白是负数，所有负数会被截断为0，所以要取绝对值sobelx = cv2.convertScaleAbs(sobelx)# 取绝对值sobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize = 3)# y方向sobely = cv2.convertScaleAbs(sobely)# x,y分别求出，再求和sobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)# 不建议直接计算，及dx，dy都为 1# 轮廓会更加的虚<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-16-图像梯度-Scharr-amp-amp-Laplacian-算子"><a href="#0-16-图像梯度-Scharr-amp-amp-Laplacian-算子" class="headerlink" title="0.16 图像梯度 Scharr&amp;&amp;Laplacian 算子"></a>0.16 图像梯度 Scharr&amp;&amp;Laplacian 算子</h2><p>scharr – 更敏感 – 描绘轮廓更细致<br><img src="/img/opencv/2.jpg" alt="sobel"></p><p>laplacian – 二阶导 – 更更敏感，对噪音点敏感，很少单独使用<br><img src="/img/opencv/3.png" alt="sobel"></p><pre><code>scharrx = cv2.Scharr(img,cv2.CV_64F,1,0)scharry = cv2.Scharr(img,cv2.CV_64F,0,1)scharrx = cv2.convertScaleAbs(scharrx)scharry = cv2.convertScaleAbs(scharry)scharrxy = cv2.addWeighted(scharrx,0.5,scharry,0.5,0)laplacian = cv2.Laplacian(img,cv2.CV_64F)laplacian = cv2.convertScaleAbs(laplacian)res = np.hstack((scharrxy,laplacian))</code></pre><p>三种算子区别<br><img src="/img/opencv/123%E5%8C%BA%E5%88%AB.png" alt="三种算子区别"></p><h2 id="0-17-Canny-边缘检测–综合"><a href="#0-17-Canny-边缘检测–综合" class="headerlink" title="0.17 Canny 边缘检测–综合"></a>0.17 Canny 边缘检测–综合</h2><ul><li>高斯滤波器，平滑处理，滤除噪声</li><li>计算图像中每个像素点的梯度强度和方向</li><li>应用非极大值抑制，消除小的不明显的地方<br>a 检测出目标可能性 90%，b 是 80%，则会抑制掉 b，把 b 丢掉</li><li>应用双阈值，检测来确定真实的和潜在的边缘</li><li>通过抑制孤立的弱边缘最终完成边缘检测</li></ul><p>① 高斯滤波器<br>归一化平滑处理<br>② 梯度和方向，Sobel 算子<br>③ 非极大值抑制<br>a. 线性插值法<br>b. 简便算法;八个方向分别比较<br>④ 双阈值检测<br>maxVal|minVal<br>梯度值&gt;maxVal 边界<br>minVal &lt; 梯度 &lt; maxVal 连有边界，保留，否则舍弃<br>梯度 &lt; minVal 舍弃<br>⑤ 最终结果<br>canny 函数</p><pre class="line-numbers language-py"><code class="language-py">img = cv2.imread('1.jpg',cv2.IMREAD_GRAYSCALE)v1 = cv2.Canny(img,80,150)  # minVal,maxValv2 = cv2.Canny(img,50,150)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-18-图像金字塔"><a href="#0-18-图像金字塔" class="headerlink" title="0.18 图像金字塔"></a>0.18 图像金字塔</h2><p>越往上走图像越小<br>图像 800*800 变为 400*400<br>各层分别提取</p><ul><li>高斯金字塔（高斯滤波）</li></ul><ol><li>向下采样，缩小，往金字塔顶走<br>将偶数行和列去掉，1234 去掉 24，行列变为原来的一半<br>4*4 — 2*2</li><li>向上采样，放大<br>将数据高斯分布给周边新加列行<br>2*2 — 4*4</li></ol><pre class="line-numbers language-py"><code class="language-py">img = cv2.imread('1.jpg')# 向上up = cv2.pyrUp(img)# 向下down = cv2.pyrDown(img)# 先上 再下，，会变模糊down_up = cv2.pyrDown(up)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/opencv/%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF.png" alt="拉普拉斯金字塔"></p><ul><li>拉普拉斯金字塔<br>原始 - 先 down 再 up = result<br>result - down up = reslt1</li></ul><pre class="line-numbers language-py"><code class="language-py">down = cv2.pyrDown(img)down_up = cv2.pyrUp(down)result = img - down_up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="0-19-图像轮廓"><a href="#0-19-图像轮廓" class="headerlink" title="0.19 图像轮廓"></a>0.19 图像轮廓</h2><p>图像边缘–零散<br>图像轮廓–完整<br>cv2.findContours(img,mode,method)</p><ul><li>mode:轮廓检测模式<br>RETR_EXTERNAL 只检测外轮廓<br>RETR_LIST 检索所有的轮廓，将其保存到一条链表中<br>RETR_CCOMP 检索所有轮廓，并将他们组织为两层，顶层是各部分的外部边界，第二层空洞边界<br>RETR_TREE（常用）检测所有轮廓，并重构嵌套轮廓的整个层次</li><li>method:轮廓逼近方法<br>CHAIN_APPROX_NONE：以 freeman 链码方式输出轮廓，其他方法输出多边形<br>CHAIN_APPROX_SIMPLE：压缩水平，垂直，斜的部分</li></ul><pre class="line-numbers language-py"><code class="language-py">img = cv2.imread('1.jpg')gray = cv2.cvColor(img,cv2.COLOR_BGR2GRAY)# 使用二值图像---更好的边缘检测ret, thresh = cv2.threshold(gray,122,255,cv2.THRESH_BINARY)# cv2.imshow('result',thresh)binary,contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)# binary 二值图像# contours 轮廓信息# hierarchy 层级# 绘制轮廓,必须先备份draw_img = img.copy()res = cv2.drawContours(draw_img,contours,-1,(0,0,255),2)# draw_img 原图像上绘制# contours 轮廓信息# -1 所有轮廓，（几个轮廓） 0 第一个轮廓外圈，1 轮廓里圈# (0,0,255) BGR 红色的线# 2 线条宽度--不能太大，能看出轮廓内外层差异# 轮廓得到以后,具体轮廓拿出来，contours为listcnt = contours[0]# 算面积cv2.contourArea(cnt)# 周长 true 闭合cu2.arcLength(cnt,True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>轮廓近似</strong></p><pre class="line-numbers language-py"><code class="language-py"># 轮廓近似，将轮廓变得规则起来# 用直线近似曲线,曲线上找一点，到直线的距离最大，# d<T 可以近似     d>T,不可以直接用一条直线近似，而是分割开来，继续判断img = cv2.imread('1.jpg')gray = cv2.cvColor(img,cv2.COLOR_BGR2GRAY)ret, thresh = cv2.threshold(gray,122,255,cv2.THRESH_BINARY)binary,contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)cnt = contours[0]draw_img = img.copy()res = cv2.drawContours(draw_img,[cnt],-1,(0,0,255),2)epsilon = 0.1*cv2.arcLength(cnt,True)   # 周长百分比做阈值# 0.1百分比，越大，轮廓变化越大approx = cv2.approxPolyDP(cnt,epsilon,True)draw_img = img.copy()res = cv2.drawContours(draw_img,[approx],-1,(0,0,255),2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>边界矩形(外接矩形)</p><pre class="line-numbers language-py"><code class="language-py">cnt = contours[0]# 外接矩形x,y,w,h = cv2.boundingRect(cnt)img = cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),2)# 矩形面积area = cv2.contourArea(cnt)x,y,w,h = cv2.boundingRect(cnt)rect_area = w*hextent = float(area) / rect_areaprint(f'轮廓面积与边界矩形比:{extent}')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外接圆</p><pre class="line-numbers language-py"><code class="language-py">(x,y).radius = cv2.minEnclosingCircle(cnt)center = (int(x),int(y))radius = int(radius)img = cv2.circle(img,center,radius,(0,255,0),2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-20-模板匹配—-匹配对象在另一个图像哪里"><a href="#0-20-模板匹配—-匹配对象在另一个图像哪里" class="headerlink" title="0.20 模板匹配—-匹配对象在另一个图像哪里"></a>0.20 模板匹配—-匹配对象在另一个图像哪里</h2><p>从左到右，从上到下，进行匹配<br>匹配计算方法</p><ul><li>TM_SQDIFF—-平方项匹配，值越小，越相关</li><li>TM_CCORR—–计算相关性，值越大，越相关</li><li>TM_CCOEFF—-计算相关系数，值越大，越相关</li><li>TM_SQDIFF_NORMED:计算归一化平方不同，越接近 0，越相关</li><li>TM_CCORR_NORMED:计算归一化相关性，越接近 1，越相关</li><li>TM_CCOEFF_NORMED:计算归一化的相关系数，越接近 1，越相关</li><li>最好用归一化的方法<br>返回结果<br>匹配的地方大小：<br>原图结果 A*B,模板大小 a*b,返回结果矩阵：(A-a+1)*(B-b+1)</li></ul><pre class="line-numbers language-py"><code class="language-py">img = cv2.imread('1.jpg',0)# (263,263)template = cv2.imread('11.jpg',0)# (110,85)h,w = template.shape[:2]res = cv2.matchTemplate(img,template,cv2.TM_SQDIFE)# (154,179)min_val,max_val,min_loc,max_loc = cv2.minMaxLoc(res)# 最小值，最大值，最小值位置，最大值位置# 该方法关注最小值位置 框左上角的点，根据res.shape画出图像# top_left & res.shape得到最好匹配结果top_left = min_locbottom_right = (top_left[0] + w,top_left[1] + h)img2 = img.copy()cv2.rectangle(img2,top_left,bottom_right,255,2)# 展示出来cv_show('res',img2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匹配多个对象</p><pre class="line-numbers language-py"><code class="language-py"># 匹配多个对象img_rgb = cv2.imread('1.jpg')img_gray = cv2.cvtColor(img_rgb,cv2.COLOR_BGR2GRAY)template = cv2.imread('11.jpg',0)h,w = template.shape[:2]res = cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED)threshold = 0.8# 取匹配程度大于0.8的坐标loc = np.where(res>= threshold)for pt in zip(*loc[::1]):   # * 表示可选参数    bottom_right = (pt[0]+w,pt[1]+h)    cv2.rectangle(img_rgb,pt,bootom_right,(0,0,255),2)cv2.imshow('img',img_rgb)cv2.waitKey(0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-21-直方图"><a href="#0-21-直方图" class="headerlink" title="0.21 直方图"></a>0.21 直方图</h2><p>图片像素的统计直方图<br>cv2.calcHist(img,channels,mask,histSize,ranges)<br>img – 图片<br>channels–通道 0 – 自动灰度图 ‘b’ ‘g’ ‘r’<br>mask–淹模图像，掩码，统计某一部分<br>创建掩码<br>mask = np.zeros(img,shape[:2],np.uint8)<br>选择掩码保存部分<br>mask[100:300,100:400] = 255 白色保存部分 # masked_img = cv2.bitwise_and(img,img,mask=mask)<br>hisSize – BIN 的数目，直方图范围<br>ranges – 像素值取值反围</p><p><code>hist = cv2.calcHist([img],[0],None,[256],[0,256])</code></p><pre class="line-numbers language-py"><code class="language-py">img =cv2.imread('1.jpg')hist = cv2.calcHist([img],[0],None,[256],[0,256])# 画出直方图plt.hist(img,ravel(),256):plt.show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直方图均衡化</p><pre class="line-numbers language-py"><code class="language-py"># 如果统计出来的直方图 不太平均# 平均化equ = cv2.equalizeHist(img)plt.hist(equ,ravel(),256)plt.show# 结果更加的明显# 一个部分分给其他部分，进行均衡# 分模块进行均衡化# 但有的图会出现边界<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自适应直方图均衡化</p><pre class="line-numbers language-py"><code class="language-py">clahe = cv2.createCLAHE(clipLimit = 2.0,tileGridSize = (8，8))res_clahe = clahe.apply(img)cv2.imshow('result',res_clahe)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="0-22-傅里叶变换"><a href="#0-22-傅里叶变换" class="headerlink" title="0.22 傅里叶变换"></a>0.22 傅里叶变换</h2><p>现实中的事物都是运动的<br>而傅里叶的频域中一切都是静止的，现实中的东西在频域中分为高频，低频</p><ul><li>高频：变化剧烈的灰度分量，eg：边界</li><li>低频：变化缓慢的灰度变量，eg：一片大海<br><img src="/img/opencv/%E5%82%85%E9%87%8C%E5%8F%B6.png" alt="傅里叶"><br>滤波<br>低通滤波器：只保留低频，图像变得模糊<br>高通滤波器：只保留高频，图像细节增强</li></ul><p>在 频域中处理，更加方便</p><pre class="line-numbers language-py"><code class="language-py">cv2.dft()# 逆变换cv2.idft()import numpy as npimport cv2from matplotlib import pyplot as pltimg = cv2.imread('1.jpg',0)# 输入图像必须先转换成float32格式img_float32 = np.float32(img)# 得到的结果中 频率为0的部分在左上角，通常要转换到中心位置，用shift变换dft = cv2.dft(img_float32,flags = cv2.DFT_COMPLEX_OUTPUT)dft_shift = np.fft.fftshift(dft)# cv2.dft()返回结果是双通道的，通常还要转换为图像格式magnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>低通：</p><pre class="line-numbers language-py"><code class="language-py">import numpy as npimport cv2from matplotlib import pyplot as pltdef cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyAllWindows()img = cv2.imread('./img/clock1.jpg',0)# 输入图像必须先转换成float32格式img_float32 = np.float32(img)# 得到的结果中 频率为0的部分在左上角，通常要转换到中心位置，用shift变换dft = cv2.dft(img_float32,flags = cv2.DFT_COMPLEX_OUTPUT)dft_shift = np.fft.fftshift(dft)# cv2.dft()返回结果是双通道的，通常还要转换为图像格式# magnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))rows,cols = img.shapecrow,ccol = int(rows/2) , int(cols/2)# 要magn里面# 创建一个掩码  zeros 全为0 全不要mask = np.zeros((rows,cols,2),np.uint8)mask[crow-30:crow+30,ccol-30:ccol+30] = 1   # 中间为低频，低频要fshift = dft_shift*mask# shift 回去f_ishift = np.fft.ifftshift(fshift)img_back = cv2.idft(f_ishift)img_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])plt.subplot(121), plt.imshow(img,cmap = 'gray')plt.title('input image'), plt.xticks([]),plt.yticks([])plt.subplot(122), plt.imshow(img_back, cmap = 'gray')plt.title('magnitude spectrum'), plt.xticks([]),plt.yticks([])plt.show()图像模糊<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>高通</p><pre class="line-numbers language-py"><code class="language-py">import numpy as npimport cv2from matplotlib import pyplot as pltdef cv_show(name,img):    cv2.namedWindow(name,0)    cv2.imshow(name,img)    cv2.waitKey(0)    cv2.destroyAllWindows()img = cv2.imread('./img/clock1.jpg',0)# 输入图像必须先转换成float32格式img_float32 = np.float32(img)# 得到的结果中 频率为0的部分在左上角，通常要转换到中心位置，用shift变换dft = cv2.dft(img_float32,flags = cv2.DFT_COMPLEX_OUTPUT)dft_shift = np.fft.fftshift(dft)# cv2.dft()返回结果是双通道的，通常还要转换为图像格式# magnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))rows,cols = img.shapecrow,ccol = int(rows/2) , int(cols/2)# 全为1 全要mask = np.ones((rows,cols,2),np.uint8)mask[crow-30:crow+30,ccol-30:ccol+30] = 0   # 中间为0，中间不要，即低频不要fshift = dft_shift*mask# shift 回去f_ishift = np.fft.ifftshift(fshift)img_back = cv2.idft(f_ishift)img_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])# 展示plt.subplot(121), plt.imshow(img,cmap = 'gray')plt.title('input image'), plt.xticks([]),plt.yticks([])plt.subplot(122), plt.imshow(img_back, cmap = 'gray')plt.title('magnitude spectrum'), plt.xticks([]),plt.yticks([])plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0-23-摄像头获取视频或图片获取感兴趣部分"><a href="#0-23-摄像头获取视频或图片获取感兴趣部分" class="headerlink" title="0.23 摄像头获取视频或图片获取感兴趣部分"></a>0.23 摄像头获取视频或图片获取感兴趣部分</h2><pre class="line-numbers language-py"><code class="language-py">import cv2def video_show():    choose_video = False    while True:        ret1,frame = video.read()        if not ret1:            print("视频获取失败！")            break        cv2.imshow("Video_show",frame)        if cv2.waitKey(1) & 0xff == ord("q"):            # rects = []            # fromCenter = False            # Select multiple rectangles            # select_data = cv2.selectROI("Image", frame, rects, fromCenter)            select_data = cv2.selectROI("Video_show",frame)            choose_video = True        if choose_video :            #获取选择框内的图像            choose_data = frame[select_data[1]:select_data[1]+select_data[3],select_data[0]:select_data[0]+select_data[2]]            cv2.imshow("choose_video",choose_data)        if cv2.waitKey(1) & 0xff == ord("p"):            break    video.release()    # cv2.destroyAllWindows()    return choose_dataif __name__ == "__main__":    video = cv2.VideoCapture(0)    video_show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0-23-1-选取-roi-区域定义"><a href="#0-23-1-选取-roi-区域定义" class="headerlink" title="0.23.1 选取 roi 区域定义"></a>0.23.1 选取 roi 区域定义</h3><pre class="line-numbers language-py"><code class="language-py"># 方法1：使用表示矩形区域的Rect，参数有矩形左上角坐标、矩形的长和宽# Mat imageROI;imageROI = image(Rect(500,250,logo.cols,logo.rows));# 方法2：指定感兴趣的行或列的范围（Range），Range是指从起始索引到终止索引（不包括终止索引）的一段连续序列# Mat imageROI;imageROI = image(Range(250,250+logoImage.rows),Range(200,200+logoImage.cols));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1-图像识别相关"><a href="#1-图像识别相关" class="headerlink" title="1. 图像识别相关"></a>1. 图像识别相关</h1><h2 id="1-1-两张图片对比"><a href="#1-1-两张图片对比" class="headerlink" title="1.1 两张图片对比"></a>1.1 两张图片对比</h2><p><strong>返回一张对比后的图片</strong></p><p>轮子安装<br><code>pip install pillow</code><br><code>pip install PIL</code></p><pre class="line-numbers language-py"><code class="language-py">from PIL import Imagefrom PIL import ImageChopsdef compare_images(path_one, path_two, diff_save_location):    """    比较图片，如果有不同则生成展示不同的图片    @参数一: path_one: 第一张图片的路径    @参数二: path_two: 第二张图片的路径    @参数三: diff_save_location: 不同图的保存路径    """    image_one = Image.open(path_one)    image_two = Image.open(path_two)    try:        diff = ImageChops.difference(image_one, image_two)        if diff.getbbox() is None:            # 图片间没有任何不同则直接退出            print("【+】We are the same!")        else:            diff.save(diff_save_location)    except ValueError as e:        text = ("表示图片大小和box对应的宽度不一致，参考API说明：Pastes another image into this image."                "The box argument is either a 2-tuple giving the upper left corner, a 4-tuple defining the left, upper, "                "right, and lower pixel coordinate, or None (same as (0, 0)). If a 4-tuple is given, the size of the pasted "                "image must match the size of the region.使用2纬的box避免上述问题")        print("【{0}】{1}".format(e, text))if __name__ == '__main__':    name1 = './对比图片/' + input('输入要对比的图片名字---带后缀格式----：')    name2 = './对比图片/' + input('第二张图片的名字：')    name = '对比结果' + input('你的对比结果后缀是什么：')    compare_images(name1, name2, name)    print('-------已完成-------')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.cnblogs.com/botoo/p/8416315.html" target="_blank" rel="noopener">参考教程</a></p></blockquote><h1 id="2-根据数据生成表格，图线"><a href="#2-根据数据生成表格，图线" class="headerlink" title="2. 根据数据生成表格，图线"></a>2. 根据数据生成表格，图线</h1><p><strong><a href="https://yq010105.github.io/2020/02/22/python-openpyxl/">openpyxl</a> and <a href="https://yq010105.github.io/2020/02/22/python-plotly/">plotly</a> or <a href="https://yq010105.github.io/2020/02/21/python-plt/">plt</a></strong></p><h1 id="3-慢慢学-opencv"><a href="#3-慢慢学-opencv" class="headerlink" title="3. 慢慢学 opencv"></a>3. 慢慢学 opencv</h1><p><a href="https://www.cnblogs.com/silence-cho/p/10926248.html" target="_blank" rel="noopener">先行教程</a></p><h2 id="3-1-在新窗口打开图片，保存图片，基操"><a href="#3-1-在新窗口打开图片，保存图片，基操" class="headerlink" title="3.1 在新窗口打开图片，保存图片，基操"></a>3.1 在新窗口打开图片，保存图片，基操</h2><pre class="line-numbers language-py"><code class="language-py">import cv2img_path = './img/' + input('输入图像路径：--带后缀--')# 读取图片h = cv2.imread(img_path,cv2.IMREAD_GRAYSCALE)# 创建一个窗口cv2.namedWindow('printwindow')cv2.namedWindow('window',0)    # 0 自由改变窗口大小# 改变图片颜色imgviewx = cv2.cvtColor(imgviewx,cv2.COLOR_BGR2GRAY)# 显示图片，（窗口名，读入的图像）cv2.imshow('printwindow',h)# 窗口等待任意键盘按键输入，0为一直等待cv2.waitKey(0)# 保存图片cv2.imwrite('./img/result.jpg',imgviewx)# 销毁窗口cv2.destroyAllWindows()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-图像阈值化"><a href="#3-2-图像阈值化" class="headerlink" title="3.2 图像阈值化"></a>3.2 图像阈值化</h2><p><strong>参数说明：</strong></p><pre class="line-numbers language-py"><code class="language-py">cv2.threshold():参数：    img:图像对象，必须是灰度图    thresh:阈值    maxval：最大值    type:        cv2.THRESH_BINARY:     小于阈值的像素置为0，大于阈值的置为maxval        cv2.THRESH_BINARY_INV： 小于阈值的像素置为maxval，大于阈值的置为0        cv2.THRESH_TRUNC：      小于阈值的像素不变，大于阈值的置为thresh        cv2.THRESH_TOZERO       小于阈值的像素置0，大于阈值的不变        cv2.THRESH_TOZERO_INV   小于阈值的不变，大于阈值的像素置0返回两个值    ret:阈值    img：阈值化处理后的图像cv2.adaptiveThreshold() 自适应阈值处理，图像不同部位采用不同的阈值进行处理参数：    img: 图像对象，8-bit单通道图    maxValue:最大值    adaptiveMethod: 自适应方法        cv2.ADAPTIVE_THRESH_MEAN_C     ：阈值为周围像素的平均值        cv2.ADAPTIVE_THRESH_GAUSSIAN_C : 阈值为周围像素的高斯均值（按权重）    threshType:        cv2.THRESH_BINARY:     小于阈值的像素置为0，大于阈值的置为maxValuel        cv2.THRESH_BINARY_INV:  小于阈值的像素置为maxValue，大于阈值的置为0    blocksize: 计算阈值时，自适应的窗口大小,必须为奇数 （如3：表示附近3个像素范围内的像素点，进行计算阈值）    C： 常数值，通过自适应方法计算的值，减去该常数值(mean value of the blocksize*blocksize neighborhood of (x, y) minus C)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子</strong></p><pre class="line-numbers language-py"><code class="language-py">import cv2imgpath = './img/' + input('输入图像路径')imgviewx = cv2.imread(imgpath)# 将图像转化为灰度imgviewx = cv2.cvtColor(imgviewx,cv2.COLOR_BGR2GRAY)# 边界设置imgresult = cv2.copyMakeBorder(imgviewx,20,20,20,20,cv2.BORDER_DEFAULT)ret,threl = cv2.threshold(imgviewx,127,255,cv2.THRESH_BINARY)cv2.namedWindow('window2',0)cv2.imshow('window2',threl)cv2.waitKey(0)cv2.destroyALLWindows()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-图像形状变化"><a href="#3-3-图像形状变化" class="headerlink" title="3.3 图像形状变化"></a>3.3 图像形状变化</h2><h3 id="3-3-1-cv2-resize-图像缩放"><a href="#3-3-1-cv2-resize-图像缩放" class="headerlink" title="3.3.1 cv2.resize() 图像缩放"></a>3.3.1 cv2.resize() 图像缩放</h3><p>参数</p><pre class="line-numbers language-py"><code class="language-py">cv2.resize() 放大和缩小图像    参数：        src: 输入图像对象        dsize：输出矩阵/图像的大小，为0时计算方式如下：dsize = Size(round(fx*src.cols),round(fy*src.rows))        fx: 水平轴的缩放因子，为0时计算方式：  (double)dsize.width/src.cols        fy: 垂直轴的缩放因子，为0时计算方式：  (double)dsize.heigh/src.rows        interpolation：插值算法            cv2.INTER_NEAREST : 最近邻插值法            cv2.INTER_LINEAR   默认值，双线性插值法            cv2.INTER_AREA        基于局部像素的重采样（resampling using pixel area relation）。对于图像抽取（image decimation）来说，这可能是一个更好的方法。但如果是放大图像时，它和最近邻法的效果类似。            cv2.INTER_CUBIC        基于4x4像素邻域的3次插值法            cv2.INTER_LANCZOS4     基于8x8像素邻域的Lanczos插值    cv2.INTER_AREA 适合于图像缩小， cv2.INTER_CUBIC (slow) & cv2.INTER_LINEAR 适合于图像放大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-py"><code class="language-py">import cv2import numpy as np# 缩小图像为原来的一半img = cv2.imread('messi5.jpg')res = cv2.resize(img,None,fx=2, fy=2, interpolation = cv2.INTER_CUBIC)# 或者height, width = img.shape[:2]res = cv2.resize(img,(2*width, 2*height), interpolation = cv2.INTER_CUBIC)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2-仿射变换"><a href="#3-3-2-仿射变换" class="headerlink" title="3.3.2 仿射变换"></a>3.3.2 仿射变换</h3><p>仿射变换（从二维坐标到二维坐标之间的线性变换，且保持二维图形的“平直性”和“平行性”。仿射变换可以通过一系列的原子变换的复合来实现，包括平移，缩放，翻转，旋转和剪切）<br><strong>参数</strong></p><pre class="line-numbers language-py"><code class="language-py">cv2.warpAffine()   仿射变换（从二维坐标到二维坐标之间的线性变换，且保持二维图形的“平直性”和“平行性”。仿射变换可以通过一系列的原子变换的复合来实现，包括平移，缩放，翻转，旋转和剪切）    参数：        img: 图像对象        M：2*3 transformation matrix (转变矩阵)        dsize：输出矩阵的大小,注意格式为（cols，rows）  即width对应cols，height对应rows        flags：可选，插值算法标识符，有默认值INTER_LINEAR，               如果插值算法为WARP_INVERSE_MAP, warpAffine函数使用如下矩阵进行图像转dst(x,y)=src(M11*x+M12*y+M13,M21*x+M22*y+M23)        borderMode：可选， 边界像素模式，有默认值BORDER_CONSTANT        borderValue:可选，边界取值，有默认值Scalar()即0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Compete </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>厚墨书源学习如何制作</title>
      <link href="/2020/02/18/learn-selector-jsoup/"/>
      <url>/2020/02/18/learn-selector-jsoup/</url>
      
        <content type="html"><![CDATA[<p><strong>Jsoup 中 Selector 选择器用法</strong><br>暂时不学了先，事情太多了</p><a id="more"></a><blockquote><p><a href="https://blog.csdn.net/syt_boss/article/details/82863990" target="_blank" rel="noopener">Jsoup Selector</a> &gt; <a href="https://jsoup.org/apidocs/org/jsoup/select/Selector.html" target="_blank" rel="noopener">官方文档</a></p></blockquote><h1 id="1-Selector-选择器概述"><a href="#1-Selector-选择器概述" class="headerlink" title="1. Selector 选择器概述"></a>1. Selector 选择器概述</h1><ul><li>tagname: 通过标签查找元素，比如：a</li><li>ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 <a href="fb:name">fb:name</a> 元素</li><li>#id: 通过 ID 查找元素，比如：#logo</li><li>.class: 通过 class 名称查找元素，比如：.masthead</li><li>[attribute]: 利用属性查找元素，比如：[href]</li><li>[^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有 HTML5 Dataset 属性的元素</li><li>[attr=value]: 利用属性值来查找元素，比如：[width=500]</li><li>[attr^=value], [attr$=value], [attr<em>=value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href\</em>=/path/]</li><li>[attr~=regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~=(?i).(png|jpe?g)]</li><li>*: 这个符号将匹配所有元素</li></ul><h1 id="2-Selector-选择器组合使用"><a href="#2-Selector-选择器组合使用" class="headerlink" title="2. Selector 选择器组合使用"></a>2. Selector 选择器组合使用</h1><ul><li>el#id: 元素+ID，比如： div#logo</li><li>el.class: 元素+class，比如： div.masthead</li><li>el[attr]: 元素+class，比如： a[href]</li><li>任意组合，比如：a[href].highlight</li><li>ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在”body”元素下的所有 p 元素</li><li>parent &gt; child: 查找某个父元素下的直接子元素，比如：可以用 div.content &gt; p 查找 p 元素，也可以用 body &gt; * 查找 body 标签下所有直接子元素</li><li>siblingA + siblingB: 查找在 A 元素之前第一个同级元素 B，比如：div.head + div</li><li>siblingA ~ siblingX: 查找 A 元素之前的同级 X 元素，比如：h1 ~ p</li><li>el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo</li></ul><h1 id="3-伪选择器-selectors"><a href="#3-伪选择器-selectors" class="headerlink" title="3. 伪选择器 selectors"></a>3. 伪选择器 selectors</h1><ul><li>:lt(n): 查找哪些元素的同级索引值（它的位置在 DOM 树中是相对于它的父节点）小于 n，比如：td:lt(3) 表示小于三列的元素</li><li>:gt(n):查找哪些元素的同级索引值大于 n，比如： div p:gt(2)表示哪些 div 中有包含 2 个以上的 p 元素</li><li>:eq(n): 查找哪些元素的同级索引值与 n 相等，比如：form input:eq(1)表示包含一个 input 标签的 Form 元素</li><li>:has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些 div 包含了 p 元素</li><li>:not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class=logo 元素的所有 div 列表</li><li>:contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)</li><li>:containsOwn(text): 查找直接包含给定文本的元素</li><li>:matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)</li><li>:matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素</li><li>注意：上述伪选择器索引是从 0 开始的，也就是说第一个元素索引值为 0，第二个元素 index 为 1 等</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些奇怪的想象</title>
      <link href="/2020/02/18/yq-imagination/"/>
      <url>/2020/02/18/yq-imagination/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-音乐"><a href="#1-音乐" class="headerlink" title="1. 音乐"></a>1. 音乐</h1><h2 id="1-1-一款可以根据自己想象力，而自动播放音乐的耳机"><a href="#1-1-一款可以根据自己想象力，而自动播放音乐的耳机" class="headerlink" title="1.1 一款可以根据自己想象力，而自动播放音乐的耳机"></a>1.1 一款可以根据自己想象力，而自动播放音乐的耳机</h2><p>人脑电波识别技术<br>人脑电波信号破译<del>人脑信号的研究，人脑的本质</del></p><h2 id="1-2-AI唱片"><a href="#1-2-AI唱片" class="headerlink" title="1.2 AI唱片"></a>1.2 AI唱片</h2><p>由人工智能通过分析很多音乐的数据，然后生成了一首歌<br>这个可能已经实现了，让我百度一下，可能真的已经实现了，毕竟音乐也只是数据而已，通过AI生成的音乐，我也是突然看到了《自卑与超越》，然后想到了骨头社的周年巨作里就有用AI作曲的东西<br>AI作曲：Algorithmic Composition – 算法作曲，OpenAI发布了新的可以在线作曲的工具MuseNet</p><blockquote><p><a href="https://baijiahao.baidu.com/s?id=1632208319890143854&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">详情看这篇文章</a><br><a href="https://zhuanlan.zhihu.com/p/80860774" target="_blank" rel="noopener">还有知乎上这个头像是傻夸的臭DD</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 想象力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
            <tag> Imagination </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用python解决问题</title>
      <link href="/2020/02/17/q-spython/"/>
      <url>/2020/02/17/q-spython/</url>
      
        <content type="html"><![CDATA[<p><strong>这篇主要是记录一些生活学习中遇到的一些难题,想不通,就用 python 模拟出来</strong><br><em>虽然模拟出来了，但不会有可能还是不会 hhh</em></p><a id="more"></a><h1 id="1-概率类问题"><a href="#1-概率类问题" class="headerlink" title="1. 概率类问题"></a>1. 概率类问题</h1><h2 id="1-1-24-个朋友生日问题"><a href="#1-1-24-个朋友生日问题" class="headerlink" title="1.1 24 个朋友生日问题"></a>1.1 24 个朋友生日问题</h2><p>一道小题，材料力学老师引出</p><pre><code>一年中同一天收到2个或2个以上朋友生日聚会邀请的概率A 、小于10%  B、20%  C、40%  D、大于50%</code></pre><p><em>将其大致概括就是：身边有 24 个朋友，他们中有两个人或两个以上的人同一天生日的概率是多少</em><br><strong>为了简单，就只算两个人生日相同的概率</strong></p><pre class="line-numbers language-py"><code class="language-py">import randomdef get_same():    ris = []    for i in range(24):  # 24个人，生成24个随机数        ri = random.randint(1, 365)  # 随机数范围则是一年365天        ris.append(ri)    d = 0    for j in range(24):     # 循环来比较随机数        for k in range(j+1, 24):            if ris[j] == ris[k]:                d += 1                # print(ris[k])            else:                continue    return d        # 如果有相同，不管有几个，d都不是0    # 即如果d=0，说明这24个人里无同一天生日def get_gailv():    su = 0      # 总次数    suancal = 0  # 无相同，即d=0的次数    for h in range(0, 10000):   # 10000次        # print(h)        suan = get_same()        if suan == 0:   # 如果suan为0，说明生日都不同            suancal = suancal + 1        su += 1    return suancal/su    # 24 人生日都不同的概率gailvs = []for j in range(10):     # 重复10次获得概率    gailv = get_gailv()    gailvs.append(gailv)print(gailvs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果为</strong><br><strong>[0.4609, 0.4626, 0.4719, 0.4608, 0.4528, 0.4607, 0.467, 0.4575, 0.4549, 0.4577]</strong></p><p><em>可以发现没有超过 0.5 的概率，说明生日都不相同的概率是大于 0.5 的，也就是说这 24 个人有超过 50%的概率是有两个或两个以上生日是同一天的</em><br><strong>接下来分析原因：</strong><br>不难猜想出，如果只有两个人，这两个人生日同一天概率很小，随着人数的增多，出现生日相同的概率越来越大<br>可以反过来思考，计算每个人生日都不同的概率<br>两个人不同：364/365<br>三个人不同：364/365 _ 363/365<br>四个人不同：364/365 _ 363/365 * 362/365<br>以此类推：当 24 个人生日不同时的概率：</p><pre class="line-numbers language-py"><code class="language-py">total = 1j = 365ren = int(input('请输入人数：'))    # 24人for i in range(ren-1):    j = j - 1    total = j * totalfenmu = 365 ** (ren-1)print(total/fenmu) # 0.4616557420854712<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以计算出概率为 0.46，即可以得出有两人或两人以上的概率为 0.54</p><h2 id="1-2-三门问题"><a href="#1-2-三门问题" class="headerlink" title="1.2 三门问题"></a>1.2 三门问题</h2><p>概率论与数理统计上课问题–无 python 代码，需要思考<br><a href="https://baike.baidu.com/item/%E4%B8%89%E9%97%A8%E9%97%AE%E9%A2%98/1242689?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p><p><strong>问题大概</strong></p><p>三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目 Let’s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率？如果严格按照上述的条件，即主持人清楚地知道，自己打开的那扇门后是羊，那么答案是会。不换门的话，赢得汽车的几率是 1/3。换门的话，赢得汽车的几率是 2/3</p><p><strong>解答</strong></p><ul><li>第一次选的空门 1（概率 1/3），之后主持人开另一个空门，换门，得到汽车。事件总概率 1/3。</li><li>第一次选的空门 2（概率 1/3），之后主持人开另一个空门，换门，得到汽车。事件总概率 1/3。</li><li>第一次选的汽车（概率 1/3），之后主持人开另一个空门 1（概率 1/2）<br>不换门，得到汽车 这个事件总概率 1/3 * 1/2 = 1/6</li><li>第一次选的汽车（概率 1/3），之后主持人开另一个空门 2（概率 1/2）<br>不换门，得到汽车 这个事件总概率 1/3 * 1/2 = 1/6</li></ul><p>所以换门赢得汽车的概率更大</p><p><strong>概率存在于被给予的条件下，概率不能寄托在实际的物体上</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Questions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VB-Note</title>
      <link href="/2020/02/16/note-vb/"/>
      <url>/2020/02/16/note-vb/</url>
      
        <content type="html"><![CDATA[<p><strong>VB 语言学习笔记</strong></p><blockquote><p><a href="https://www.vbtutor.net/chinese/vbtutor_Chinese.html" target="_blank" rel="noopener">参考教程</a> _ Visual Basic 是一种相当容易学习的高阶程序语言，它可使你编写几乎任何的程序_</p></blockquote><a id="more"></a><h1 id="1-第一个-VB-程序Hello-World"><a href="#1-第一个-VB-程序Hello-World" class="headerlink" title="1. 第一个 VB 程序Hello World"></a>1. 第一个 VB 程序<code>Hello World</code></h1><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Form_Load ( )Form1.showPrint "Hello World"End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-1-几个小例子"><a href="#1-1-几个小例子" class="headerlink" title="1.1 几个小例子"></a>1.1 几个小例子</h2><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Form_Activate ( )Print 20 + 10Print 20 - 10Print 20 * 10Print 20 / 10End Sub# orPrivate Sub Form_Activate ( )Print 20 + 10, 20 ?10, 20 * 10, 20 / 10End Sub# orPrivate Sub Form_Activate ( )x = 20y = 10Print x + yPrint x - yPrint x * yPrint x / yEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-让程序窗口固定不变"><a href="#1-2-让程序窗口固定不变" class="headerlink" title="1.2 让程序窗口固定不变"></a>1.2 让程序窗口固定不变</h2><table><thead><tr><th align="center">属性窗口</th><th align="center">设置为</th></tr></thead><tbody><tr><td align="center">BorderStyle</td><td align="center">Fixed Single</td></tr><tr><td align="center">MaxButton</td><td align="center">False</td></tr><tr><td align="center">minButton</td><td align="center">True</td></tr></tbody></table><h1 id="2-控件-amp-控件的属性"><a href="#2-控件-amp-控件的属性" class="headerlink" title="2. 控件&amp;控件的属性"></a>2. 控件&amp;控件的属性</h1><h2 id="2-1-控件的属性"><a href="#2-1-控件的属性" class="headerlink" title="2.1 控件的属性"></a>2.1 控件的属性</h2><ul><li>可以在属性窗口里修改<br><img src="/img/VB/VB2_1.jpg" alt="属性窗口"></li><li>也可以在代码中实现修改</li></ul><pre class="line-numbers language-VB"><code class="language-VB">Private Sub Form_Load()Form1.ShowForm1.BackColor = &H000000FF&End Sub## 窗口背景颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Form_Load()Shape1.Shape = 3End Sub## shape控件形状<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-常见控件"><a href="#2-2-常见控件" class="headerlink" title="2.2 常见控件"></a>2.2 常见控件</h2><p><img src="/img/VB/VB2_2.jpg" alt="控件介绍"></p><h3 id="2-2-1-文本框-TextBox"><a href="#2-2-1-文本框-TextBox" class="headerlink" title="2.2.1 文本框(TextBox)"></a>2.2.1 文本框(TextBox)</h3><p>文本框是是用来接收用户输入的控件，以及作为显示器输出。它可以处理字符串（纯文字）和数字数据，但不能处理图象或图片。一个文本框中的文字可以用 Val 函数来转换为数字和数据</p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Command1_Click()‘把文本框1和文本框2的值加起来Sum = Val(Text1.Text) + Val(Text2.Text)‘中标签上显示答案Label1.Caption = SumEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-标签-Label"><a href="#2-2-2-标签-Label" class="headerlink" title="2.2.2 标签(Label)"></a>2.2.2 标签(Label)</h3><ul><li>标签是一个非常有用处的控件，因为它不仅是用来提供指示和指导，它也可以被用来显示输出。它的一个最重要的特性是标题</li><li>利用语法 Label.Caption ，它可以显示文字和数字数据。你可以在属性窗口或在运行时改变它的标题</li></ul><h3 id="2-2-3-命令按钮-CommandButton"><a href="#2-2-3-命令按钮-CommandButton" class="headerlink" title="2.2.3 命令按钮(CommandButton)"></a>2.2.3 命令按钮(CommandButton)</h3><p>命令按钮是一个很重要的控件，因为它被户点击它时可以执行命令去运作一个程序</p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Command1_Click ()StatementsEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-4-图片框-PictureBox"><a href="#2-2-4-图片框-PictureBox" class="headerlink" title="2.2.4 图片框(PictureBox)"></a>2.2.4 图片框(PictureBox)</h3><p>图片框可用来处理图形。你可以下载一个图片，在设计阶段就在属性窗口从选定的文件夹选择图片。您也可以在程序运行时加载图片，其指令是 LoadPicture</p><pre class="line-numbers language-vb"><code class="language-vb">Picture1.Picture=LoadPicture ("C:\VB program\Images\grape.gif")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-5-图像方框-Image"><a href="#2-2-5-图像方框-Image" class="headerlink" title="2.2.5 图像方框(Image)"></a>2.2.5 图像方框(Image)</h3><p>图像方框 是另一个处理图象和照片的控件。它和图片框的功能几乎是相同的。不过，其中有一个重大的区别，它可以调整大小,它也可以用 LoadPicture 方法来加载图片</p><h3 id="2-2-6-列表框-ListBox"><a href="#2-2-6-列表框-ListBox" class="headerlink" title="2.2.6 列表框(ListBox)"></a>2.2.6 列表框(ListBox)</h3><p>列表框的功能是陈列一个项目清单以便用户可以通过点击来选择项目。如果要增加项目，我们可以利用 additem 方法</p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Form_Load ( )List1.AddItem “第一课”List1.AddItem “第二课”List1.AddItem “第三课”List1.AddItem “第四课”End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-7-组合框-ComboBox"><a href="#2-2-7-组合框-ComboBox" class="headerlink" title="2.2.7 组合框(ComboBox)"></a>2.2.7 组合框(ComboBox)</h3><p>组合框展现一个下拉式项目清单。用户可以通过点击来选择项目，从名单上。为了增添项目名单，我们可以利用 AddItem `这方法</p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Form_Load ( )Combo1.AddItem “Item1”Combo1.AddItem “Item2”Combo1.AddItem “Item3”Combo1.AddItem “Item4”End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-8-复选框-CheckBox"><a href="#2-2-8-复选框-CheckBox" class="headerlink" title="2.2.8 复选框(CheckBox)"></a>2.2.8 复选框(CheckBox)</h3><ul><li>复选框让用户可以选择或取消选择一个选项。当复选框被选中时，其值是设定为 1。如不被选中，其值设定为 0_</li><li>你可以用程序来设定复选框的属性，如键入 check1.value = 1 ，就表示它被选中，check1.value = 0 就表示它不被选中，并用它来执行某些动作</li></ul><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Check1_Click ()If Check1.Value = 0 ThenForm1.BackColor = vbRedElseIf Check1.Value = 1 ThenForm1.BackColor = vbBlueEnd IfEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-9-选项框-OptionButton"><a href="#2-2-9-选项框-OptionButton" class="headerlink" title="2.2.9 选项框(OptionButton)"></a>2.2.9 选项框(OptionButton)</h3><p>选项框也可以让用户自由选择一个项目。但是，在同一时间中只有一个选项框可被选择。当一个选项框被选定时，其价值被设定为”True”时，反之则其价值被设定为”False</p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Option1_Click ( )Shape1.Shape = 0End SubPrivate Sub Option2_Click()Shape1.Shape = 1End SubPrivate Sub Option3_Click()Shape1.Shape = 2End SubPrivate Sub Option4_Click()Shape1.Shape = 3End SubPrivate Sub Option5_Click()Shape1.Shape = 4End SubPrivate Sub Option6_Click()Shape1.Shape = 5End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-10-驱动器列表框-DriveListBox"><a href="#2-2-10-驱动器列表框-DriveListBox" class="headerlink" title="2.2.10 驱动器列表框(DriveListBox)"></a>2.2.10 驱动器列表框(DriveListBox)</h3><p>驱动器列表框，是用来显示在您的计算机上所有的驱动器。当你把这个控件纳入表格然后去运行程序，你将能够选择不同的驱动器</p><h3 id="2-2-11-目录列表框-DirListBox"><a href="#2-2-11-目录列表框-DirListBox" class="headerlink" title="2.2.11 目录列表框(DirListBox)"></a>2.2.11 目录列表框(DirListBox)</h3><p>目录列表框是用来显示清单目录或文件夹中选择一个驱动器。当你把这个控件纳入表格然后去运行程序，你将能够从所选驱动器中选择不同的目录</p><h3 id="2-2-12-文件列表框-FileListBox"><a href="#2-2-12-文件列表框-FileListBox" class="headerlink" title="2.2.12 文件列表框(FileListBox)"></a>2.2.12 文件列表框(FileListBox)</h3><p>文件列表框是用来显示文件列表在选定的目录或文件夹。当你把这个控件纳入表格然后去运行程序，你将能够从文件的列表中选择一个目录</p><h1 id="3-编写-VB-的程序代码"><a href="#3-编写-VB-的程序代码" class="headerlink" title="3. 编写 VB 的程序代码"></a>3. 编写 VB 的程序代码</h1><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Command1_Click  程序代码End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>Sub 实际上是整个程序的一部分, 也称为子程序</em><br>用来设定一个对象的属性或传递价值于它的语法是：<code>object.property</code> <em>对象和属性是以一个点来分开</em><br>举例</p><ul><li>form1.show 的意思是显示表 1</li><li>label1.visible =true 的意思是把 label1 设置为可被显示</li><li>Text1.text = “ VB6” ，目的就是要把 VB6 显示于 text1 的文本框中</li><li>Text2.text = 100 ，是把 100 的数目显示于 text2 文本框中</li><li>Timer1.enabled =false，是要禁用 Timer1 计时器</li></ul><p><strong>几个例子</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Command1_clickLabel1.Visible=falseLabel2.Visible=TrueText1.Text=”你是正确的!”End sub----Private Sub Command1_clickLabel1.Caption=” 欢迎”Image1.visible=trueEnd sub----Private Sub Command1_clickPictuire1.Show=trueTimer1.Enabled=TrueLable1.Caption=”开始计数“End sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>两个重要的 VB 函数：VAL 和 STR</strong><br><em>VAL 的作用把键入文本框的文字转换成数值， 而 STR 刚好相反，它是把数值转换成字串</em></p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Form_Activate()  Text3.text=text1.text+text2.textEnd Sub# 输入 12 ， 3# 得到 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Form_Activate()  Text3.text=val(text1.text)+val(text2.text)End Sub# 输入 12 ，3# 得到 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-VB-数据处理"><a href="#4-VB-数据处理" class="headerlink" title="4. VB 数据处理"></a>4. VB 数据处理</h1><h2 id="4-1-VB-基本数据"><a href="#4-1-VB-基本数据" class="headerlink" title="4.1 VB 基本数据"></a>4.1 VB 基本数据</h2><h3 id="4-1-1-数字数据"><a href="#4-1-1-数字数据" class="headerlink" title="4.1.1 数字数据"></a>4.1.1 数字数据</h3><p>数字数据是由数目构成的数据，可以进行数字运算，如加，减，乘，除等</p><table><thead><tr><th align="center">类型</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">Byte</td><td align="center">0 至 255</td></tr><tr><td align="center">Integer</td><td align="center">-32,768 至 32,767</td></tr><tr><td align="center">Long</td><td align="center">-2,147,483,648 至 2,147,483,648</td></tr><tr><td align="center">Single</td><td align="center">-3.402823E+38 至 -1.401298E-45 负 &amp;&amp;&amp;&amp; 1.401298E-45 至 3.402823E+38 正数.</td></tr><tr><td align="center">Double</td><td align="center">-1.79769313486232e+308 至 -4.94065645841247E-324 负数 &amp;&amp;&amp;&amp; 4.94065645841247E-324 至 1.79769313486232e+308 正数.</td></tr><tr><td align="center">Currency</td><td align="center">-922,337,203,685,477.5808 至 922,337,203,685,477.5807</td></tr><tr><td align="center">Decimal</td><td align="center">+/- 79,228,162,514,264,337,593,543,950,335 如果没有小数点 &amp;&amp;&amp;&amp; +/- 7.9228162514264337593543950335 (28 个小数点）.</td></tr></tbody></table><h3 id="4-1-2-非数据类型"><a href="#4-1-2-非数据类型" class="headerlink" title="4.1.2 非数据类型"></a>4.1.2 非数据类型</h3><table><thead><tr><th align="center">类型</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">String(fixed length)</td><td align="center">1 to 65,400 字符</td></tr><tr><td align="center">String(variable length)</td><td align="center">0 to 20 亿 字符</td></tr><tr><td align="center">Date</td><td align="center">公元 100 年正月一日至 9999 年十二月三十一日</td></tr><tr><td align="center">Boolean</td><td align="center">True 或 False（对或错）</td></tr><tr><td align="center">Object</td><td align="center">任何嵌入对象</td></tr><tr><td align="center">Variant(numeric)</td><td align="center">任何价值大如 Double</td></tr><tr><td align="center">Variant(text)</td><td align="center">与 variable-length string 相同</td></tr></tbody></table><h3 id="4-1-3-后缀文的符号"><a href="#4-1-3-后缀文的符号" class="headerlink" title="4.1.3 后缀文的符号"></a>4.1.3 后缀文的符号</h3><p>后缀文是让你把数字转让给一个数据. 在某些情况下，我们需要在一个字的后面增加一个后缀文，使 VB 可以计算得更准确</p><table><thead><tr><th align="center">后缀</th><th align="center">数据类型</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">Long</td></tr><tr><td align="center">!</td><td align="center">Single</td></tr><tr><td align="center">#</td><td align="center">Double</td></tr><tr><td align="center">@</td><td align="center">Currency</td></tr></tbody></table><p>此外，我们需要把字符串文字用开关引号 “ “ 围起来，日期和时间则用#标志围起来。字符串可以包含任何字符，包括数字</p><pre class="line-numbers language-vb"><code class="language-vb">memberName="Turban, John."TelNumber="1800-900-888-777"LastDay=#31-Dec-00#ExpTime=#12:00 am#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-变数的管理-变量"><a href="#4-2-变数的管理-变量" class="headerlink" title="4.2 变数的管理(变量)"></a>4.2 变数的管理(变量)</h2><h3 id="4-2-1-变数名称"><a href="#4-2-1-变数名称" class="headerlink" title="4.2.1 变数名称"></a>4.2.1 变数名称</h3><p><strong>为变数命名时的规则</strong></p><ul><li>它必须小于 255 个字符</li><li>不得有间隔</li><li>不能以号码来开始</li><li>不能用点</li></ul><h3 id="4-2-2-变数的宣示"><a href="#4-2-2-变数的宣示" class="headerlink" title="4.2.2 变数的宣示"></a>4.2.2 变数的宣示</h3><p><code>Dim variableName as DataType</code></p><pre class="line-numbers language-vb"><code class="language-vb">Dim password As StringDim yourName As StringDim firstnum As IntegerDim secondnum As IntegerDim total As IntegerDim doDate As Date# orDim password As String,  yourName As String, firstnum As Integer,.............<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如我们没有特别指明数据类型， VB 将自动宣告变数的类型<br>要宣示字符串，有两种可能的方式，一为可变长度的字符串，另一个为固定长度字符串。为可变长度的字符串，只是用同样的格式<br>对于固定长度字符串，你必须使用如下的格式:Dim VariableName as String _ n<br>如：<code>Dim yourName as String _ 10</code></p><h2 id="4-3-VB-的常数和变数"><a href="#4-3-VB-的常数和变数" class="headerlink" title="4.3 VB 的常数和变数"></a>4.3 VB 的常数和变数</h2><h3 id="4-3-1-常数"><a href="#4-3-1-常数" class="headerlink" title="4.3.1 常数"></a>4.3.1 常数</h3><p>常数代表固定不变的数据，它可能是数字或文字。在使用常数时，我们必须预先宣示它们<br>宣示常数的格式是：<code>Const constantname As datatype=initializer</code><br>constantname 是我们自己制定的名称，datatype 是资料类型而 initializer 则是初始设定值</p><p>如下例子</p><pre class="line-numbers language-vb"><code class="language-vb">Const  Num  As Integer = 9.8Const Pi As Single  = 3.142Const SchoolName As String  = "中华中学“<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2-变数"><a href="#4-3-2-变数" class="headerlink" title="4.3.2 变数"></a>4.3.2 变数</h3><p>变数是在程序运送时会改变的数据，而常数在运算时是固定不变的。虽然我们在开始时可给于变数一个数值（初始值），但在程序运作时它的数值是可以改变的<br>变数的宣告格式如下：<code>Dim VariableName as Datatype[=initializer]</code></p><p>如下例字</p><pre class="line-numbers language-vb"><code class="language-vb">Dim Num As Single=1.234Dim Num1,Num2  As IntegerDim yourName As StringDim starName As String="刘翔”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 Dim 宣告各种变数 之后, 我们可以用以下的格式 赋值于这些变数 Variable=Expression</p><p>变数可以是一个已宣布的变数或控件的属性值. 它也可以是一个数学表达式, 一个字符串, 一个 布尔值 (对或错) 等等</p><h3 id="4-3-3-VB-运算符"><a href="#4-3-3-VB-运算符" class="headerlink" title="4.3.3 VB 运算符"></a>4.3.3 VB 运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">数学函数</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">指数</td></tr><tr><td align="center">*</td><td align="center">乘法</td></tr><tr><td align="center">/</td><td align="center">除法</td></tr><tr><td align="center">Mod</td><td align="center">整除后的余数</td></tr><tr><td align="center">\</td><td align="center">整数除法 19\4=4</td></tr><tr><td align="center">+or&amp;</td><td align="center">字串串连”v”&amp;”b”=”vb”</td></tr></tbody></table><p><strong>几个例子</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Dim firstName As StringDim secondName As StringDim yourName As StringPrivate Sub Command1_Click()firstName = Text1.TextsecondName = Text2.TextyourName = secondName + "  " + firstNameLabel1.Caption = yourNameEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vb"><code class="language-vb">Dim number1, number2, number3 as IntegerDim total, average as variantPrivate sub Form_Clicknumber1=val(Text1.Text)number2=val(Text2.Text)number3= val(Text3.Text)Total=number1+number2+number3Average=Total/5Label1.Caption=TotalLabel2.Caption=AverageEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h1 id="5-正式学习"><a href="#5-正式学习" class="headerlink" title="5. 正式学习"></a>5. <strong>正式学习</strong></h1><h2 id="5-1-基础知识（零碎）"><a href="#5-1-基础知识（零碎）" class="headerlink" title="5.1 基础知识（零碎）"></a>5.1 基础知识（零碎）</h2><p>对象：数据和数据操作方式的综合体，如窗体、控件</p><p>对象三要素：属性、事件、方法</p><ul><li><p>属性：<br><code>对象.属性= 属性值</code></p></li><li><p>事件：</p></li></ul><pre class="line-numbers language-vb"><code class="language-vb">Private Sub 对象名_事件过程名[参数列表]' click load ----End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>方法：</li></ul><pre><code>对象.方法[参数名表]Form1.Print "avb"Text1.SetFocus</code></pre><p>暂停程序 Stop<br>结束程序 End</p><p>命令按钮改变背景必须变两个属性-bg 和 style<br>其他的只需改变 bg 就行了</p><h3 id="If-判断结构"><a href="#If-判断结构" class="headerlink" title="If 判断结构"></a>If 判断结构</h3><pre class="line-numbers language-vb"><code class="language-vb">if 表达式 then  语句1else  语句2end if<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>example：密码输入，限制输入 3 次</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Dim i As Integer ' 定义一个整型变量Private Sub Command2_Click()    If Text1 = "buct" Then        Text2.Visible = True        Label2.Visible = True        Command1.Visible = True        Text1.Visible = False        Label1.Visible = False        Command2.Visible = False        Label3.Visible = False        Text2.SetFocus    Else       ' Text1 = ""       ' Label3.Visible = True       ' Label3 = "密码错误，请重新输入"       ' Text1.SetFocus        i = i +1        If i >= 3 Then End        Text1 = ""        Text1.SetFocus        MsgBox "密码输入错误，请重新输入" ' 弹出一个框    End IfEnd SubPrivate Sub Form_Load()    Text2.Visible = False    Label2.Visible = False    Command1.Visible = False    Label3.Visible = FalseEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-VB-的语言成分"><a href="#5-2-VB-的语言成分" class="headerlink" title="5.2 VB 的语言成分"></a>5.2 VB 的语言成分</h2><p>编码规则：</p><ul><li>不区分字母大小写</li><li>语句书写自由:同一行可以写多条语句用<code>:</code>分开、一条语句多行写用<code>_</code>连接</li><li>代码注释： <code>'</code>或者<code>Rem</code>引导注释内容、快注释-视窗-工具栏-编辑-快注释</li><li>VB 的命名约定：字母或汉字开头，长度不超过 255 个字符，控件不超过 40 个字符<ul><li>不用 VB 关键字:<code>if loop</code></li><li>不能包含空格，小数点，其他声明字符<code>$ % &amp;</code></li></ul></li></ul><h3 id="5-2-1-基本数据类型"><a href="#5-2-1-基本数据类型" class="headerlink" title="5.2.1 基本数据类型"></a>5.2.1 基本数据类型</h3><p><img src="/img/VB/sjlx.png" alt="VB数据类型"></p><h3 id="5-2-2-直接常量"><a href="#5-2-2-直接常量" class="headerlink" title="5.2.2 直接常量"></a>5.2.2 直接常量</h3><p><img src="/img/VB/zjcl.png" alt="VB直接常量"></p><h3 id="5-2-3-变量"><a href="#5-2-3-变量" class="headerlink" title="5.2.3 变量"></a>5.2.3 变量</h3><ol><li>变量隐式声明：使用的变量未作声明，所有变量均为 Variant 类型</li><li>变量显式声明：</li></ol><ul><li>使用类型标示符直接声明变量 <code>MyName$ ="David"</code>–字符串型</li><li>使用 Dim 语句<ul><li>格式 1：Dim 变量名 As 数据类型[,变量名 As 数据类型，…..0]</li><li>格式 2：Dim 变量名 + 类型标识符</li></ul></li></ul><pre class="line-numbers language-vb"><code class="language-vb">Dim A As Integer, B As DoubleDim A%,B#Dim MyName1 As String , Myname2 As String*5 '字符串只能是五个字符Dim Vp1, Vp2 As Single<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>变量的强制声明：在每个模块开始处自动加一条”Option Explicit”语句，所有变量需要指定数据类型</li></ol><p>工具菜单- 选项命令 - 选中编辑器中的要求变量声明</p><h3 id="5-2-4-模块"><a href="#5-2-4-模块" class="headerlink" title="5.2.4 模块"></a>5.2.4 模块</h3><p>VB 代码存储在模块中<br>三种模块：窗体模块、标准模块、类模块<br><img src="/img/VB/mk.png" alt="VB模块"></p><h3 id="5-2-5-变量的作用域"><a href="#5-2-5-变量的作用域" class="headerlink" title="5.2.5 变量的作用域"></a>5.2.5 变量的作用域</h3><ul><li>全局变量：在窗体或标准模块中声明 Public<ul><li><code>Public 变量名 As 数据类型</code></li></ul></li><li>模块级变量：在模块的声明部分使用 Dim 或 Private 声明<ul><li><code>Dim 变量名 As 数据类型</code></li></ul></li><li>局部变量：在过程中由 Dim 或 Static 关键字声明<ul><li><code>Static 变量名 As 数据类型</code></li></ul></li></ul><p>变量的作用域<br><img src="/img/VB/zyy.png" alt="变量的作用域及使用规则"></p><ul><li>内部常量：控件常量、语言常量、对象常量、用户界面常量</li><li>用户定义常量：用 Const 语句和赋值</li></ul><pre class="line-numbers language-vb"><code class="language-vb">Const PI As Double = 3.14159265...Private Const Msg As String = "hello world"Public Const Msg As String = "天安门"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>静态变量：每次调用一个过程时保留上次的调用值</li></ul><p><code>Static 变量名 As 数据类型,变量名 As 数据类型....</code></p><h3 id="5-2-6-变量类型检查"><a href="#5-2-6-变量类型检查" class="headerlink" title="5.2.6 变量类型检查"></a>5.2.6 变量类型检查</h3><p><img src="/img/VB/bllxjc.png" alt="变量的类型检查"></p><p><img src="/img/VB/sjlxflpd.png" alt="数据类型分类判断"></p><h3 id="5-2-7-运算符"><a href="#5-2-7-运算符" class="headerlink" title="5.2.7 运算符"></a>5.2.7 运算符</h3><p><img src="/img/VB/ysf.png" alt="运算符"></p><h3 id="5-2-8-常用内部函数"><a href="#5-2-8-常用内部函数" class="headerlink" title="5.2.8 常用内部函数"></a>5.2.8 常用内部函数</h3><p><img src="/img/VB/cyhs.png" alt="常用内部函数、数学函数"><br><img src="/img/VB/cyzhhs.png" alt="常用转换函数"><br><img src="/img/VB/zfchs.png" alt="字符串函数"></p><p><img src="/img/VB/sszfclz.png" alt="字符串函数例子"></p><h3 id="5-2-9-日期函数"><a href="#5-2-9-日期函数" class="headerlink" title="5.2.9 日期函数"></a>5.2.9 日期函数</h3><pre class="line-numbers language-vb"><code class="language-vb">'Time Date Now DateDiff DateAddPrivate Sub Command1_Click()    Dim d1 As Date, d2 As Date    Print Now, Date, Time    Print Time, Hour(Time), Minute(Time), Second(Time)    Print Date, Year(Date), Month(Date), Day(Date)    Print "=---------------------="    Print DateDiff("d", Now, #10/1/2009#); #10/1/2009# - Date    Print Date + Time; "***"; DateAdd("h", 5, Now); "***";    Print DateAdd("s", 5, Time), vbCrLf    d1 = "2004-07-16 05:00:00"    d2 = "2004-08-20 23:00:00"    Print #8/20/2004# - #7/16/2004#, d2 - d1, (d2 - d1) * 24End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/VB/rqlz.png" alt="日期函数例子"></p><p><strong>格式输出函数</strong><br><code>Format$(表达式[,格式字符串])</code></p><blockquote><p>关于日期的格式详情，参考<a href="https://blog.csdn.net/bigheadsheep/article/details/12013267" target="_blank" rel="noopener">Format 函数</a>这篇文章</p></blockquote><p><strong>Shell 函数</strong><br><img src="/img/VB/shellhs.png" alt="shell函数"></p><h3 id="5-2-10-基本语句"><a href="#5-2-10-基本语句" class="headerlink" title="5.2.10 基本语句"></a>5.2.10 基本语句</h3><h4 id="5-2-10-1-赋值语句"><a href="#5-2-10-1-赋值语句" class="headerlink" title="5.2.10.1 赋值语句"></a>5.2.10.1 赋值语句</h4><pre class="line-numbers language-vb"><code class="language-vb">Let 变量名 = 表达式  '普通变量Set 变量名 = 表达式  ' 对象型变量Let A = 5Set Obj1 = Command1Text1.text = "ok"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-10-2-快速输入输出函数"><a href="#5-2-10-2-快速输入输出函数" class="headerlink" title="5.2.10.2 快速输入输出函数"></a>5.2.10.2 快速输入输出函数</h4><p><img src="/img/VB/kssrschs.png" alt="InputBox函数"></p><p><img src="/img/VB/msgbox.png" alt="MsgBox函数"></p><p><img src="/img/VB/msgboxlz.png" alt="MsgBox例子"></p><h2 id="5-3-控制结构与算法"><a href="#5-3-控制结构与算法" class="headerlink" title="5.3 控制结构与算法"></a>5.3 控制结构与算法</h2><h3 id="5-3-1-顺序结构"><a href="#5-3-1-顺序结构" class="headerlink" title="5.3.1 顺序结构"></a>5.3.1 顺序结构</h3><p>语句 1→→→ 语句 2→→→ 语句 3</p><h3 id="5-3-2-选择结构"><a href="#5-3-2-选择结构" class="headerlink" title="5.3.2 选择结构"></a>5.3.2 选择结构</h3><h4 id="5-3-2-1-if"><a href="#5-3-2-1-if" class="headerlink" title="5.3.2.1 if"></a>5.3.2.1 if</h4><p><strong>1</strong><code>if 表达式 then 语句</code></p><pre class="line-numbers language-vb"><code class="language-vb">2if 表达式 then    语句块end if3if 表达式 then    语句块1else    语句块2end if4if 表达式 then    语句块else : 语句end if5if 表达式 then 语句1 else 语句26if 表达式1 then    语句块1elseif 表达式2 then    语句块2else    语句块end if<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子：</strong><br><img src="/img/VB/cfex.png" alt="摄氏度与华氏度提示"></p><h4 id="5-3-2-2-select"><a href="#5-3-2-2-select" class="headerlink" title="5.3.2.2 select"></a>5.3.2.2 select</h4><pre class="line-numbers language-vb"><code class="language-vb">select case 变量或表达式    case 表达式列表1    'is 关系运算表达式        语句块1    case 表达式列表2        语句块2    case else        语句块end select<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子：</strong></p><p><img src="/img/VB/yex.png" alt="求函数Y的值"></p><h3 id="5-3-3-循环结构"><a href="#5-3-3-循环结构" class="headerlink" title="5.3.3 循环结构"></a>5.3.3 循环结构</h3><pre class="line-numbers language-vb"><code class="language-vb">for 循环变量=初值 to 终值 [step步长]    语句块    [exit for]    语句块next 循环变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vb"><code class="language-vb">for each 元素变量 in 数组或集合    语句块next 元素变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vb"><code class="language-vb">先判断后执行do while 条件    语句块loopdo until 条件    语句块loop先执行后判断do    语句块loop while 条件do    语句块loop until 条件exit do 退出循环体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-3-1-for-next-循环"><a href="#5-3-3-1-for-next-循环" class="headerlink" title="5.3.3.1 for next 循环"></a>5.3.3.1 for next 循环</h4><ul><li>循环变量是数之变量</li><li>初值、终值、步长可以是数之表达式</li><li>步长可正可负，但不能为 0 、为 1 是省略</li><li>exit for 退出循环，经常放到条件语句中</li><li>next 后的循环变量应与 for 语句中的循环变量一致，可以省略</li></ul><pre class="line-numbers language-vb"><code class="language-vb">for 循环变量=初值 to 终值 [step步长]    语句块    [exit for]    语句块next 循环变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vb"><code class="language-vb">'--求1+2+3+4+...+n--private sub command1_click()    dim n as integer , i as integer , s as integer    n = val(text1.text)    s = 0    for i = 1 to n        s = s + i    next i    label3.caption = send sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>for each ... in ... next 循环</code></p><p>For Each…In…Next 循环结构中元素变量是 变体型变量</p><pre class="line-numbers language-vb"><code class="language-vb">for each 元素变量 in 数组或集合    语句块next 元素变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/img/VB/foreach.png" alt="控件颜色"></p><h4 id="5-3-3-2-do…loop-循环结构"><a href="#5-3-3-2-do…loop-循环结构" class="headerlink" title="5.3.3.2 do…loop 循环结构"></a>5.3.3.2 do…loop 循环结构</h4><pre class="line-numbers language-vb"><code class="language-vb">do while 条件    语句组1    exit do    语句组2loop细节------------------先判断后执行---当do while 条件    语句块loopdo until 条件    语句块loop先执行后判断---直到do    语句块loop while 条件do    语句块loop until 条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>while true 则循环<br>until false 则循环</p><pre class="line-numbers language-vb"><code class="language-vb">' 1^2+2^2+....小于n的最大值private sub command1_click()    dim n as long , s as long, i as integer    n = val(text1.text)    i = 0    s = 0    do while s < n        i = i + 1        s = s + i * i    loop    text2.text = s - i * iend sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-3-3-循环嵌套"><a href="#5-3-3-3-循环嵌套" class="headerlink" title="5.3.3.3 循环嵌套"></a>5.3.3.3 循环嵌套</h4><pre class="line-numbers language-vb"><code class="language-vb">'----------eg:for i = 1 to 3    for j = 5 to 7        print i , j    next jnext iornext j,i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-4-goto-语句"><a href="#5-3-4-goto-语句" class="headerlink" title="5.3.4 goto 语句"></a>5.3.4 goto 语句</h3><p><code>goto{标号|行号}</code></p><p><img src="/img/VB/gotoex.png" alt="goto例子"></p><h2 id="5-4-数组"><a href="#5-4-数组" class="headerlink" title="5.4 数组"></a>5.4 数组</h2><h3 id="5-4-1-数组"><a href="#5-4-1-数组" class="headerlink" title="5.4.1 数组"></a>5.4.1 数组</h3><p><img src="/img/VB/szgn.png" alt="数组概念"></p><p>如：<code>A(8)</code>,<code>B(I)</code>,<code>A(A(5))</code><br><code>a(1,3)</code>-二维数组</p><h3 id="5-4-2-数组定义"><a href="#5-4-2-数组定义" class="headerlink" title="5.4.2 数组定义"></a>5.4.2 数组定义</h3><p><code>Public|Private|Dim 数组名 维数定义 AS 类型</code><br><code>Dim A(-4 TO 10) As Integer</code><br><code>Dim A(0 TO 8,0 to 3) As Integer</code> = <code>Dim a(8,3) as integer</code></p><h4 id="5-4-2-1-定义形式"><a href="#5-4-2-1-定义形式" class="headerlink" title="5.4.2.1 定义形式"></a>5.4.2.1 定义形式</h4><p><code>dim 数组名 ([下界 to]上界) as 数据类型</code><br>下界默认为 0，也可以在 <code>option base n</code> 来修改默认下界</p><h4 id="5-4-2-2-动态数组的建立与使用"><a href="#5-4-2-2-动态数组的建立与使用" class="headerlink" title="5.4.2.2 动态数组的建立与使用"></a>5.4.2.2 动态数组的建立与使用</h4><p><code>dim 数组名() [as 数据类型]</code>先不给大小<br><code>redim 数组名 (8,8,)</code>具体使用时在给出大小<br><code>redim preserve 数组名(8,newvalue)</code>改变数组大小，可用 preserve 保留原来的数据</p><h4 id="5-4-2-3-控件数组"><a href="#5-4-2-3-控件数组" class="headerlink" title="5.4.2.3 控件数组"></a>5.4.2.3 控件数组</h4><p>在窗体上画出控件，进行属性设置</p><ul><li>复制粘贴，建立控件数组</li><li>编程时哟个 load 方法</li></ul><p><img src="/img/VB/dtszdsy.png" alt="动态数组的使用"></p><p><img src="/img/VB/fxsc.png" alt="输入10个单词，反序输出"><br><img src="/img/VB/fxsc1.png" alt="输出10个单词，反序输出2"><br><img src="/img/VB/fxsc2.png" alt="输出10个单词，反序输出3"></p><pre class="line-numbers language-vb"><code class="language-vb">array 数组输入数组下界到数组上界ubound(A) to lbound(A)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2-4-数组元素的复制"><a href="#5-4-2-4-数组元素的复制" class="headerlink" title="5.4.2.4 数组元素的复制"></a>5.4.2.4 数组元素的复制</h4><pre class="line-numbers language-vb"><code class="language-vb">option base 1    dim a(15),b(3,5)    for i = 1 to 3        for j = 1 to 5        b(i,j) = a((i-1) * 5 +j)        next j    next i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2-5-for-each-…-next"><a href="#5-4-2-5-for-each-…-next" class="headerlink" title="5.4.2.5 for each … next"></a>5.4.2.5 for each … next</h4><pre class="line-numbers language-vb"><code class="language-vb">打印一堆数组x中所有元素dim x(15)for each a in x    print a;next a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vb"><code class="language-vb">求二维数组y的所有元素之和dim y(10,10)for each a in y    sum = sum + anext aprint sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/VB/blsznr.png" alt="保留动态数组的内容"></p><h3 id="5-4-3-数组应用举例"><a href="#5-4-3-数组应用举例" class="headerlink" title="5.4.3 数组应用举例"></a>5.4.3 数组应用举例</h3><h4 id="5-4-3-1-例子-1"><a href="#5-4-3-1-例子-1" class="headerlink" title="5.4.3.1 例子 1"></a>5.4.3.1 例子 1</h4><p>例:生成 20 个 10 到 100 之间的随机整数,存于一维整型数组 A 中,同时显示于第一个文本框中,单击窗体将这 20 个数以相反的次序显示于另一个文本框中<br><img src="/img/VB/szlz.png" alt="数组应用"></p><h4 id="5-4-3-2-例子-2"><a href="#5-4-3-2-例子-2" class="headerlink" title="5.4.3.2 例子 2"></a>5.4.3.2 例子 2</h4><p><img src="/img/VB/szlz1.png" alt="控件数组"></p><h2 id="5-5-过程"><a href="#5-5-过程" class="headerlink" title="5.5 过程"></a>5.5 过程</h2><ul><li>过程的引入:使同类的操作不重复(操作方法相同、参数不同)</li><li>过程:完成一段独立功能,可供其他过程使用(调用)。过程又称为子程序</li><li>调用过程:调用其他过程的过程</li></ul><p>过程：</p><ul><li>sub 子过程</li><li>function 函数过程</li><li>property 属性过程</li><li>event 事件过程</li></ul><h3 id="5-5-1-子过程和函数过程"><a href="#5-5-1-子过程和函数过程" class="headerlink" title="5.5.1 子过程和函数过程"></a>5.5.1 子过程和函数过程</h3><p><img src="/img/VB/zgchsgc.png" alt="子过程和函数过程"></p><p>调用：</p><ul><li><p>子过程名[参数列表]</p></li><li><p>Call 子过程名 (参数列表)</p></li><li><p>变量名 = 函数过程名([参数列表])</p></li><li><p>public 所有模块的所有其他过程</p></li><li><p>private 只有本模块的其他过程</p></li><li><p>static 过程中所有的局部变量都为静态变量</p></li><li><p>函数过程名：function 过程的名称</p></li><li><p>形参表：调用时要传递给 function 的参数变量列表</p></li></ul><p><img src="/img/VB/gclz.png" alt="过程例子"></p><pre class="line-numbers language-vb"><code class="language-vb">定义求阶乘的函数FactFunction Fact(n As Integer) As Double    Dim F As Double, i As Integer    F=1    For i=1 To n        F=F * i    Next i    Fact =FEnd functionPrivate Sub Command1_Click()    Dim m As Integer, n As Integer, c As Double    m= Val(TextI.Text)    n= Val(Text2.Text)    c=Fact(m)/(Fact(n)*(Fact(m-n)))'调用Fact    Text3.Text= Trim(Str(c))End sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>◆Sub 过程的建立方法与 Function 过程的建立方法相同。</li><li>◆&lt;过程名&gt;不具有值的意义,在 Sub 过程中不能给&lt;过程名&gt;赋<br>值,也不能给&lt;过程名&gt;定义类型。</li><li>◆Sub 过程通过&lt;形参表&gt;中的参数返回值。</li></ul><p><img src="/img/VB/subgclz.png" alt="sub过程"></p><h3 id="5-5-2-参数的传递"><a href="#5-5-2-参数的传递" class="headerlink" title="5.5.2 参数的传递"></a>5.5.2 参数的传递</h3><p><img src="/img/VB/cscd.png" alt="参数传递"></p><h3 id="5-5-3-代码模块"><a href="#5-5-3-代码模块" class="headerlink" title="5.5.3 代码模块"></a>5.5.3 代码模块</h3><p><img src="/img/VB/dmmk.png" alt="代码模块"></p><h4 id="5-5-3-1-窗体模块"><a href="#5-5-3-1-窗体模块" class="headerlink" title="5.5.3.1 窗体模块"></a>5.5.3.1 窗体模块</h4><p>事件过程、通用过程、通用声明</p><h4 id="5-5-3-2-标准模块"><a href="#5-5-3-2-标准模块" class="headerlink" title="5.5.3.2 标准模块"></a>5.5.3.2 标准模块</h4><p><img src="/img/VB/bzmk.png" alt="标准模块"></p><h4 id="5-5-3-3-类模块"><a href="#5-5-3-3-类模块" class="headerlink" title="5.5.3.3 类模块"></a>5.5.3.3 类模块</h4><p>在类模块中编写代码建立新对象</p><h3 id="5-5-4-过程的作用域"><a href="#5-5-4-过程的作用域" class="headerlink" title="5.5.4 过程的作用域"></a>5.5.4 过程的作用域</h3><p><img src="/img/VB/gczyy.png" alt="过程作用域"></p><p><img src="/img/VB/gczyylz.png" alt="过程作用域例子"><br><img src="/img/VB/gczyylz1.png" alt="过程作用域例子"></p><p><img src="/img/VB/gczyysygz.png" alt="过程作用域及使用规则"></p><h2 id="5-6-用户界面设计"><a href="#5-6-用户界面设计" class="headerlink" title="5.6 用户界面设计"></a>5.6 用户界面设计</h2><h3 id="5-6-1-单选按钮和复选框"><a href="#5-6-1-单选按钮和复选框" class="headerlink" title="5.6.1 单选按钮和复选框"></a>5.6.1 单选按钮和复选框</h3><p>单选框只能选一个（Option）<br>复选框可以选多个（Check）<br><code>click动作</code><br><code>check.value = true</code> 则为被选中</p><p><img src="/img/VB/checklz.png" alt="例子"></p><h3 id="5-6-2-框架-Frame"><a href="#5-6-2-框架-Frame" class="headerlink" title="5.6.2 框架 Frame"></a>5.6.2 框架 Frame</h3><p>框架之间可以隔开单选按钮<br><code>fontname</code> <code>fontsize</code> <code>forecolor</code><br>属性</p><h3 id="5-6-3-滚动条"><a href="#5-6-3-滚动条" class="headerlink" title="5.6.3 滚动条"></a>5.6.3 滚动条</h3><p>HScroll Bar 、 VScroll Bar<br>水平、竖直滚动条</p><ul><li>属性<br>MIN 默认 0<br>MAX 默认 32767</li></ul><p>Value ：设置滚动块在滚动条中的位置值<br>Smallchange ：最小变动值属性<br>Largechange ：最大——</p><ul><li>事件<br>Scroll ：当鼠标拖动滚动块时，触发<br>Change ： 当改变 value 值时出发</li></ul><p>eg：在 text 中显示最大最小值</p><pre class="line-numbers language-vb"><code class="language-vb">text1 = HScroll1.Mintext2 = HScroll2.Maxtext3 = HScroll3.ValueHScroll ' 横向VScroll ' 纵向<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RGB 函数：<br>颜色值的取间是 0~255</p><p>随机数 Rnd() 返回小于 1 大于或等于 0 的值<br>Rnd[()]</p><pre class="line-numbers language-vb"><code class="language-vb">private sub form_click()    text1.forecolor = RGB(255 * Rnd , 255 * Rnd , 255 * Rnd)    form1.backcolor = RGB(255 * Rnd , 255 * Rnd , 255 * Rnd)end sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>返回小于 1 但大于或等于 0 的值。 Number 的值决定了 Rnd 生成随机数的方式。<br>在调用 Rnd 之前,先使用无参数的 Randomize 语句初始化随机函数生成器,该<br>生成器具有根据系统计时器得到的种子。<br>如果 number 的值是 Randomize 生成。<br>小于 0,每次都使用 number 作为随机数种子得到相同结果<br>大于 0,以上一个随机数为种子产生下一个随机数;<br>等于 0,产生与最近生成的随机数相同的随机数。<br>省略,以上一个随机数为种子产生下一个随机数<br>例,Int((上限下限+1)*Rnd+下限),生成上限与下限之间的随机整数。</p><h3 id="5-6-4-列表框"><a href="#5-6-4-列表框" class="headerlink" title="5.6.4 列表框"></a>5.6.4 列表框</h3><p>只能在程序中设置的属性：<br>Listindex 执行时选中的列表项的序号<br>Listcount 项目数量 从 0 开始<br>Selected True 表示选中相应的项<br>Text 表示选中列表项文本内容</p><p>Additem ： 增加项<br>Removeitem ： 删除项<br>Clear ： 清除</p><p>属性 style : 1 时为多选框<br>属性 columns: 几列</p><pre class="line-numbers language-vb"><code class="language-vb">List1.AddItem "1"List1.AddItem "2"province = Array("a","b") ' 一维数组Province(List1.ListIndex) '数组中数据List1.List(List.ListIndex) = text1' 判断是否选中if list1.selected(i) Then<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-5-组合框"><a href="#5-6-5-组合框" class="headerlink" title="5.6.5 组合框"></a>5.6.5 组合框</h3><p>style 属性：<br>0 下拉式<br>1 简单组合框<br>2 下拉式列表框</p><h3 id="5-6-6-驱动器列表框、目录列表框、文件列表框"><a href="#5-6-6-驱动器列表框、目录列表框、文件列表框" class="headerlink" title="5.6.6 驱动器列表框、目录列表框、文件列表框"></a>5.6.6 驱动器列表框、目录列表框、文件列表框</h3><p>DriveListBox<br>DirectoryListBox<br>FileListBox</p><pre class="line-numbers language-vb"><code class="language-vb">select case index    case 0        语句1    case 1        语句2end select' 打开程序Retval = shell(dir1.path + "\" + file1.filename,1)Retval = shell("C:\user\..",1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-7-通用对话框"><a href="#5-6-7-通用对话框" class="headerlink" title="5.6.7 通用对话框"></a>5.6.7 通用对话框</h3><p>打开、另存为、颜色、字体、打印机、帮助<br>工程–部件–Microsoft Comm Dialog Control 6.0 选择通用对话框</p><p><code>对象.Action = 1</code> 打开文件对话框<br><code>对象.ShowOpen</code> 打开文件对话框</p><p><img src="/img/VB/tongyong.png" alt="通用对话框例子"></p><h3 id="5-6-8-菜单设计"><a href="#5-6-8-菜单设计" class="headerlink" title="5.6.8 菜单设计"></a>5.6.8 菜单设计</h3><p>普通的菜单设计<br>工具–菜单编辑器–逐一填写</p><p>弹出菜单<br>对象.PopupMenu 菜单名，标值，x，y<br><code>PopupMenu Cal2,2</code></p><h3 id="5-6-9-多重窗体"><a href="#5-6-9-多重窗体" class="headerlink" title="5.6.9 多重窗体"></a>5.6.9 多重窗体</h3><p>工程–添加窗体–打开<br>load 窗体名称 将窗体装入内存，但不显示<br>unload 窗体名称</p><p>窗体名称.show 显示窗体<br>窗体名称.hide 隐藏窗体<br><code>form2.show</code>显示 form1 窗体</p><h3 id="5-6-10-鼠标-键盘事件"><a href="#5-6-10-鼠标-键盘事件" class="headerlink" title="5.6.10 鼠标/键盘事件"></a>5.6.10 鼠标/键盘事件</h3><p><img src="/img/VB/sbsj.png" alt="鼠标事件"></p><p>键盘事件：KeyPress ， KeyUp ， KeyDown</p><h3 id="5-6-11-对象拖放与-OLE-拖放"><a href="#5-6-11-对象拖放与-OLE-拖放" class="headerlink" title="5.6.11 对象拖放与 OLE 拖放"></a>5.6.11 对象拖放与 OLE 拖放</h3><p>对象拖放：用鼠标将对象从一个地方拖动到另一个地方</p><p>拖放方式属性：DragMode 为 1 自动 0 手动<br>拖放图标属性可以在设计时设置，也可在程序中设置<br><code>控件名.DragIcon = 图像控件.picture</code><br><code>控件名.DragIcon = LoadPicture("C:\Icons\mail.ico")</code></p><p>拖放事件</p><pre class="line-numbers language-vb"><code class="language-vb">sub form_dragdrop(source as control , x as single , y as single)    source.move x,yend sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>OLE 拖放 ：将数据从一个控件或应用程序中移动到另一个控件或应用程序。<br><strong>OLEDragMode</strong>属性—决定是自动还是手动实现“拖”操作<br><strong>OLEDropMode</strong>属性—决定是自动还是手动实现“放”操作<br>注:并不是所有的控件都有此二属性,有的只有其一。</p><ul><li>OLEDragDrop 事件—在目标控件上进行“放”操作时发生的事件。</li><li>OLEStartDrag 事件一源控件 OLEDrag 方法被执行或用户做“拖”，操作时发生的事件</li><li>OLEDragOver 事件—在拖动时,经某控件时在该控件上发生的事件</li></ul><h2 id="5-7-Active-X-控件"><a href="#5-7-Active-X-控件" class="headerlink" title="5.7 Active X 控件"></a>5.7 Active X 控件</h2><h3 id="5-7-1-SSTab选项卡控件"><a href="#5-7-1-SSTab选项卡控件" class="headerlink" title="5.7.1 SSTab选项卡控件"></a>5.7.1 SSTab选项卡控件</h3><p>工程–部件–选中Microsoft Tabbed Dialog Control 6.0</p><p>style属性：选项卡样式–0/1：office风格/windows风格<br>Tabs 属性：控制控件上选项卡的数目<br>Tab 属性 ：决定控件上当前被选定的项</p><h3 id="5-7-2-ProgressBar进度条控件"><a href="#5-7-2-ProgressBar进度条控件" class="headerlink" title="5.7.2 ProgressBar进度条控件"></a>5.7.2 ProgressBar进度条控件</h3><p>工程–部件–选中Microsoft Windows Common Control 6.0</p><p>Max 属性：进度条上限<br>Min 属性：进度条下限<br>Value ：进度值<br>Scrolling ： 卷动方向形式<br>Orientation ： 纵横滚动定位<br>MousePoint ：鼠标指针</p><h3 id="5-7-3-Slide滑动条控件"><a href="#5-7-3-Slide滑动条控件" class="headerlink" title="5.7.3 Slide滑动条控件"></a>5.7.3 Slide滑动条控件</h3><p>工程–部件–选中Microsoft Windows Common Control 6.0</p><p>TickStyle ： 决定控件上滑块及刻度的显示样式<br>TickFrequency ： 决定控件上刻度点的疏密<br>ToolTipText：指针停在该控件上时显示提示信息<br>Orientation ：决定控件在窗体上水平或垂直放置</p><h3 id="5-7-4-MS-Chart控件"><a href="#5-7-4-MS-Chart控件" class="headerlink" title="5.7.4 MS Chart控件"></a>5.7.4 MS Chart控件</h3><p>工程–部件–选中Microsoft Chart Control 6.0(OLEDB)</p><p>BorderStyle ： 决定图表是否有外框线<br>ColumnCount ： 每一格的列数<br>RowCount ： 每一行的列数<br>ChartType ： 选择图表类型<br>TitleText ： 图题<br>ChartData 返回一个数组，该数组包含将要被该图表显示的值</p><p><code>MSChart1.ChartData = 数组</code></p><p><img src="/img/VB/tubiao.png" alt="图表控件"></p><h3 id="5-7-5-UpDown控件"><a href="#5-7-5-UpDown控件" class="headerlink" title="5.7.5 UpDown控件"></a>5.7.5 UpDown控件</h3><p>工程–部件–选中Microsoft Windows Common Control-2 6.0</p><p>一对箭头按钮控件，单击按钮，增减数值<br>UpDown通常与Textbox绑定</p><p>Max/Min 最大值最小值<br>Increment 指定每次单击上箭头或下箭头时Value的变化量</p><pre class="line-numbers language-vb"><code class="language-vb">private sub updown1_downclick()    text1.updown1.valueend subprivate sub updow n1_upclick()    text1.updown1.valueend sub <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-6-ActiveX控件的创建"><a href="#5-7-6-ActiveX控件的创建" class="headerlink" title="5.7.6 ActiveX控件的创建"></a>5.7.6 ActiveX控件的创建</h3><p>ActiveX是 Microsoft对于一系列策略性面向对象程序技术和工具称呼,其中主要的技术是组件对象模型(COM)。</p><p><img src="/img/VB/activex.png" alt="ActiveX的三种表现形式"></p><p>ActiveX部件：可执行代码：exe、dll、ocx文件</p><p>ActiveX控件标准和非标准文件：以ocx后缀保存在Windows\System目录下<br>ActiveX控件分为：控件和插入对象 、可插入对象就是一个应用程序，如MIcrosoft Word</p><p>创造自己的ActiveX控件</p><ul><li>启动VB，打开 ActiveX控件</li><li>UserControl对象，为AX控件名称，在此进行控件制作</li><li>在代码窗口利用工具中的添加过程，为新的ActiveX控件添加共有的属性、时间等</li><li>界面与代码设计好后，在指定目录生成指定的ocx，完成自制AX控件的工作</li><li>另打开VB，通过增加部件找到所自制的AX控件，放在工具箱上即可使用</li></ul><h2 id="5-8-文件"><a href="#5-8-文件" class="headerlink" title="5.8 文件"></a>5.8 文件</h2><p><img src="/img/VB/file.png" alt="基本概念"></p><h3 id="5-8-1-顺序文件"><a href="#5-8-1-顺序文件" class="headerlink" title="5.8.1 顺序文件"></a>5.8.1 顺序文件</h3><p>ASCII文件，由任何字处理文件建立，在VB中建立，只能按顺序存取记录</p><p>打开文件–读或写文件–关闭文件</p><h4 id="5-8-1-1-顺序文件打开"><a href="#5-8-1-1-顺序文件打开" class="headerlink" title="5.8.1.1 顺序文件打开"></a>5.8.1.1 顺序文件打开</h4><p>格式 Open &lt;文件名&gt; for 方式 as  [#]&lt;文件号&gt;</p><p>Input 只读 / Output 写 / Append 添加方式</p><p>文件号 1 到511 之间的整数</p><p><code>opnn "C:\Data\Stud.dat" For Output As #1</code></p><h4 id="5-8-1-2-顺序文件关闭"><a href="#5-8-1-2-顺序文件关闭" class="headerlink" title="5.8.1.2 顺序文件关闭"></a>5.8.1.2 顺序文件关闭</h4><p>Close 文件号列表</p><p><code>Close #1</code><br><code>Close #1,2,#8</code><br><code>Close</code> 关闭所有</p><h4 id="5-8-1-3-顺序文件的读写"><a href="#5-8-1-3-顺序文件的读写" class="headerlink" title="5.8.1.3 顺序文件的读写"></a>5.8.1.3 顺序文件的读写</h4><p><strong>①写</strong></p><ol><li>Write #文件号,[输出列表]</li></ol><p><code>Write #1,A1,A2,A3</code></p><p>说明</p><ul><li>&lt;输出列表&gt;中各项之间要用逗号分开</li><li>&lt;输出列表&gt;每一项可以是常量、变量或表达式</li><li>写到文件中的各数据间自动插入逗号,字符串自动加上双引号</li><li>所有数据写完后,在最后加入一个回车换行符</li><li>不含&lt;输出列表&gt;时,将在文件中写入一空行</li></ul><p><strong>学号、姓名、成绩1、2</strong>保存到文件中</p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitDim no, na, g1, g2 As VariantPrivate Sub Command1_Click()    no = Text1.Text: na = Text2.Text    g1 = Val(Text3.Text): g2 = Val(Text4.Text)    Write #2, no, na, g1, g2    Text1.Text = "": Text2.Text = "": Text3.Text = "": Text4.Text = ""End SubPrivate Sub Command2_Click()    Close #2    EndEnd SubPrivate Sub Form_Load()    CommonDialog1.ShowSave    Open CommonDialog1.FileName For Append As #2End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>print #文件号，输出列表</li></ol><p><code>print #2, no ,na, g1, g2</code><br><code>print #2, no; na; g1; g2</code></p><p>将输出列表中的内容写入指定文件<br>说明</p><ul><li>当&lt;输出列表&gt;用逗号分隔时,采用分区格式输出</li><li>当&lt;输出列表&gt;用分号分隔时,采用紧凑格式输出</li><li>所有项将在一行内输出,输出后将自动换行</li><li>可以使用Spc()函数和Tab()函数</li></ul><p><img src="/img/VB/writeprint.png" alt="两者区别"></p><p><strong>②读</strong></p><ol><li>input #文件号,变量列表</li><li>Line input #文件号，变量名</li><li>eof(文件号) 函数</li></ol><p><strong>读取文件中的程序，计算平均成绩</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitDim num, nam, s1, s2, avePrivate Sub Command1_Click()    CommonDialog1.ShowOpen    Open CommonDialog1.FileName For Input As #3    Text1.Text = ""    Do While Not EOF(3)   ' 装入用Wite# 语句生成的文件        Input #3, num, nam, s1, s2        ave = (s1 + s2) / 2        Text1.Text = Text1.Text & num & "   " & nam _                        & "   " & Str(s1) & "    " & Str(s2) & _                        "  " & Str(ave) & Chr(13) & Chr(10)    Loop    Close #3End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>计算每个同学的平均成绩，并同时将结果与原数据保存到另一个文件</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitDim num(100) As String, nam(100) As StringDim g(100, 2) As Integer, n As Integer, ave, sum1, sum2, iPrivate Sub Command1_Click()    CommonDialog1.ShowOpen    Open CommonDialog1.FileName For Input As #3        n = 0        Do While Not EOF(3)            n = n + 1            Input #3, num(n), nam(n), g(n, 1), g(n, 2)        Text1.Text = Text1.Text & "   " & num(n) & _        "   " & nam(n) & "    " & Str(g(n, 1)) & _        "   " & Str(g(n, 2)) & "    " & Chr(13) & Chr(10)        LoopEnd SubPrivate Sub Command2_Click()    CommonDialog1.ShowSave    Open CommonDialog1.FileName For Output As #4    sum1 = 0    sum2 = 0    Text2.Text = ""    For i = 1 To n        ave = (g(i, 1) + g(i, 2)) / 2        Write #4, num(i), nam(i), g(i, 1), g(i, 2), ave        Text2.Text = Text2.Text & "   " & num(i) & _        "   " & nam(i) & "   " & Str(g(i, 1)) & "   " & _        Str(g(i, 2)) & "   " & Str(ave) & vbCrLf        sum1 = sum1 + g(i, 1): sum2 = sum2 + g(i, 2)    Next i    Text2.Text = Text2.Text & "average" & " " & _    Str(sum1 / n) & "   " & Str(sum2 / n)    Write #4, "总平均", sum1 / n, sum2 / nEnd SubPrivate Sub Command3_Click()    Close #3, #4    EndEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-8-2-随机文件"><a href="#5-8-2-随机文件" class="headerlink" title="5.8.2 随机文件"></a>5.8.2 随机文件</h3><p>读写次序任意，记录长度相等，随机文件中的记录常定义为用户自定义类型</p><p><strong>自定义数据类型操作</strong></p><pre class="line-numbers language-vb"><code class="language-vb">private/public type 自定义类型名    元素名 下标 as 类型end type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/img/VB/sjwjsm1.png" alt=""><br><img src="/img/VB/sjwjsm2.png" alt="说明"></p><p><img src="/img/VB/sjwjex.png" alt="例子"><br><img src="/img/VB/sjwjex1.png" alt="例子"></p><h4 id="5-8-2-1-随机文件打开"><a href="#5-8-2-1-随机文件打开" class="headerlink" title="5.8.2.1 随机文件打开"></a>5.8.2.1 随机文件打开</h4><p><code>open 文件名 [for random] as 文件号 len= 记录长度</code><br>for random 可以省略<br>记录长度：就是自定义类型的大小，可以用len获得<br>若文件不存在，则建立新的文件</p><h4 id="5-8-2-2-随机文件关闭"><a href="#5-8-2-2-随机文件关闭" class="headerlink" title="5.8.2.2 随机文件关闭"></a>5.8.2.2 随机文件关闭</h4><p><code>close #2</code></p><h4 id="5-8-2-3-随机文件写"><a href="#5-8-2-3-随机文件写" class="headerlink" title="5.8.2.3 随机文件写"></a>5.8.2.3 随机文件写</h4><p><code>put 文件号，记录号，变量名</code></p><p><img src="/img/VB/sjwjxie.png" alt="写文件"></p><h4 id="5-8-2-4-随机文件读"><a href="#5-8-2-4-随机文件读" class="headerlink" title="5.8.2.4 随机文件读"></a>5.8.2.4 随机文件读</h4><p><code>get #文件号， 记录号， 变量名</code><br>功能： 将一个一打开的随机文件读入一个变量之中</p><p><img src="/img/VB/sjwjdxex0.png" alt="例子"></p><p><img src="/img/VB/sjwjdxex.png" alt="例子"><br><img src="/img/VB/sjwjdxex1.png" alt="例子"></p><h3 id="5-8-3-总结"><a href="#5-8-3-总结" class="headerlink" title="5.8.3 总结"></a>5.8.3 总结</h3><p><img src="/img/VB/filezongjie.png" alt="文件操作总结"></p><p>开闭 写读</p><ul><li>open 语句</li><li>close 语句</li><li>write\print 语句</li><li>input\line input语句 ， input函数</li></ul><hr><ul><li>open 语句</li><li>close 语句</li><li>put 语句</li><li>get 语句</li></ul><h1 id="6-课程学习过程中练习"><a href="#6-课程学习过程中练习" class="headerlink" title="6. 课程学习过程中练习"></a>6. 课程学习过程中练习</h1><p>第几次课.第几道练习</p><h2 id="2-1-勾选要求变量声明（初学）"><a href="#2-1-勾选要求变量声明（初学）" class="headerlink" title="2.1 勾选要求变量声明（初学）"></a>2.1 勾选要求变量声明（初学）</h2><p>然后每次使用必须先定义变量</p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitPrivate Sub Command1_Click()    Dim B As Integer, A As Integer    B = 10    A = A + B    Print B, AEnd Sub'10 10'10 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitPrivate Sub Command1_Click()    Static B As Integer, A As Integer     '静态变量    B = 10    A = A + B    Print B, AEnd Sub'10 10'10 20'10 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dim 和 Static 都是局部变量可以将其拉到窗体级全局变量</p><pre class="line-numbers language-vb"><code class="language-vb">Option Explicit    Dim B As Integer, A As IntegerPrivate Sub Command1_Click()    B = 10    A = A + B    Print B, AEnd SubPrivate Sub Command2_Click()    Print B, AEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-字符判断"><a href="#2-2-字符判断" class="headerlink" title="2.2 字符判断"></a>2.2 字符判断</h2><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Text1_Change()    If Not IsNumeric(Text1) Then        MsgBox "Text1 输入非法数字，请重新输入"        Text1.Text = ""    End IfEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-inputbox-amp-keypress"><a href="#2-3-inputbox-amp-keypress" class="headerlink" title="2.3 inputbox &amp; keypress"></a>2.3 inputbox &amp; keypress</h2><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitPrivate Sub Label2_Click()    Text3 = Val(Text1) + Val(Text2)End SubPrivate Sub Text1_KeyPress(KeyAscii As Integer)    If KeyAscii = 13 Then Text2 = InputBox("请输入")End SubPrivate Sub Text3_GotFocus()    Text1 = ""    Text2 = ""    Text3 = ""    Text1.SetFocusEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-1-DIY"><a href="#3-1-DIY" class="headerlink" title="3.1 DIY"></a>3.1 DIY</h2><p><strong>换行 text 的 multline 属性要为 true</strong><br><code>chr(13) + chr(10)</code><br><code>vbcrlf</code></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitDim ID As BooleanPrivate Sub Command1_Click()    ID = True    Timer1.Interval = 600    Text1 = "DIY" + Chr(13) + Chr(10) + "程序设计"  '回车换行End SubPrivate Sub Command2_Click()    ID = False    Text1.Alignment = 0 '居左    Text1.FontSize = 50    Text1 = "1111" & vbCrLf _    & "fads" + vbCrLf _    & "7777" + Chr(13) + Chr(10)  '回车加换行End SubPrivate Sub Timer1_Timer()    Dim A As Integer    Randomize    A = Rnd * 4      'rnd 0-1    Text1.ForeColor = RGB(Rnd * 250, Rnd * 250, Rnd * 250)    If ID Then        Text1.FontSize = Rnd * 260        Text1.FontBold = True   '粗体字        Select Case A        Case 0            Text1.FontName = "隶书"            Text1.Alignment = 0        Case 1            Text1.FontName = "黑体"            Text1.Alignment = 1        Case 2            Text1.FontName = "楷体"            Text1.Alignment = 2        End Select    End IfEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-for"><a href="#3-2-for" class="headerlink" title="3.2 for"></a>3.2 for</h2><p><code>cls</code>清屏</p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitPrivate Sub Command1_Click()    Dim i As Integer, j As Integer    For i = 1 To 3        For j = 5 To 7            Print i, j        Next j        Print "---------"    Next iEnd SubPrivate Sub Command2_Click()    Dim a       '必须用变体    For Each a In Form1.Controls        a.BackColor = vbRed    Next aEnd SubPrivate Sub Command3_Click()    ClsEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-for-与-if-可以互换"><a href="#3-3-for-与-if-可以互换" class="headerlink" title="3.3 for 与 if 可以互换"></a>3.3 for 与 if 可以互换</h2><p><code>goto 111</code></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitPrivate Sub Command1_Click()    'Dim i As Integer, s As Integer    Dim i, a, j, b    For i = 0 To 100        a = a + i    Next i111 If j <= 100 Then        b = b + j        j = j + 1        GoTo 111    E    Print a    Print bEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-1-求积"><a href="#4-1-求积" class="headerlink" title="4.1 求积"></a>4.1 求积</h2><p><img src="/img/VB/kclx4_1.png" alt="例子"></p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Form DblClick    Dim a (1 To 5) As integer, b (3 To 8)As Integer    Dim i As Integer    For i=1 to 5        a(i) = i        picture3.Print a(i)    For i=3 to 8        b(i) = i        Picture4.Print b(i)    Next i    MsgBox"开始计算"    Text1= tim(a())    Text2= tim(b())End subFunction tim(x() As Integer)    Dim t As double, i As Integer    t=1    For i= LBound (x) To UBound(x)        t= t*x(i)    Next i    tim = tEnd function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-控件数组–将五个-shape-从上到下移动"><a href="#4-2-控件数组–将五个-shape-从上到下移动" class="headerlink" title="4.2 控件数组–将五个 shape 从上到下移动"></a>4.2 控件数组–将五个 shape 从上到下移动</h2><p>设置好属性—复制，粘贴，名称一样的控件数组</p><p>shape1 重命名为 S1</p><pre class="line-numbers language-vb"><code class="language-vb">Option Explicit    Dim i As IntegerPrivate Sub Command1_Click()    Timer1.Interval = 50End SubPrivate Sub Timer1_Timer()    For i = 0 To 4        ' 改变颜色  ---不同颜色        ' S1(i).BackColor = RGB(Rnd * 250, Rnd * 250, Rnd * 250)        ' S1(i).BorderColor = RGB(Rnd * 250, Rnd * 250, Rnd * 250)        If S1(i).Top + S1(i).Height > Form1.ScaleHeight Then            S1(i).Top = 0        Else            S1(i).Top = S1(i).Top + 100        End If    Next iEnd SubOption Explicit    Dim i As IntegerPrivate Sub Command1_Click()    Timer1.Interval = 50End SubPrivate Sub Timer1_Timer()    Dim A    A = RGB(Rnd * 250, Rnd * 250, Rnd * 250)  ' 相同颜色    For i = 0 To 4        S1(i).BackColor = A        S1(i).BorderColor = A        ' S1(i).BackColor = RGB(Rnd * 250, Rnd * 250, Rnd * 250)        ' S1(i).BorderColor = RGB(Rnd * 250, Rnd * 250, Rnd * 250)        If S1(i).Top + S1(i).Height > Form1.ScaleHeight Then            S1(i).Top = 0        Else            S1(i).Top = S1(i).Top + 100        End If    Next iEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-所有控件的移动"><a href="#4-3-所有控件的移动" class="headerlink" title="4.3 所有控件的移动"></a>4.3 所有控件的移动</h2><pre class="line-numbers language-vb"><code class="language-vb">Option Explicit    Dim i As Variant  ' 变体型变量Private Sub Command1_Click()    For Each i In Form1.Controls        If i.Top + i.Height > Form1.ScaleHeight Then            i.Top = 0        Else            i.Top = i.Top + 500        End If    Next iEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-模块、多窗口"><a href="#4-4-模块、多窗口" class="headerlink" title="4.4 模块、多窗口"></a>4.4 模块、多窗口</h2><p><code>form2.show</code>打开 form2<br>新建 module，然后将子过程放入 module，可以在 form1 中调用</p><pre class="line-numbers language-vb"><code class="language-vb">' module1:Option ExplicitSub fact(n As Integer, f As Long)    Dim i As Integer    f = 1    For i = 1 To n        f = f * i    Next iEnd Sub' form1Option ExplicitPrivate Sub Command1_Click()    Dim s As Long        Call fact(Val(Text1), s)        Print Val(Text1); s        Text1.SetFocus        Text1 = ""End SubPrivate Sub Command2_Click()    Form2.ShowEnd Sub' form2Option ExplicitPrivate Sub Command1_Click()    Dim s As Long    Call fact(8, s)    Print 8; sEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-学习作业"><a href="#7-学习作业" class="headerlink" title="7. 学习作业"></a>7. 学习作业</h1><h2 id="7-1-第一次作业"><a href="#7-1-第一次作业" class="headerlink" title="7.1 第一次作业"></a>7.1 第一次作业</h2><h3 id="1-倒计时控件"><a href="#1-倒计时控件" class="headerlink" title="1. 倒计时控件"></a>1. 倒计时控件</h3><p><img src="/img/VB/zy/zy1_1.png" alt="第一次作业"></p><p><strong>作业代码</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Command1_Click()    Timer1.Interval = 50End SubPrivate Sub Command2_Click()    EndEnd SubPrivate Sub Timer1_Timer()    Text2.Text = Format(Now(), "yyyy/MM/dd hh:mm:ss")    Text3.Text = #10/1/2020# - Date & "天"    Text1.Text = "2020-10-01"End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下的随便改改 bg，caption，font 等等的</p><p>小知识点：</p><ul><li>Access Key: 再名称前加&amp;  <code>即&amp;s</code></li><li>关于日期的格式，参考<a href="https://blog.csdn.net/bigheadsheep/article/details/12013267" target="_blank" rel="noopener">Format 函数</a>这篇文章</li></ul><p>小问题：</p><ul><li>怎么把输入的日期格式化为计算数据,不会更高级的输入转化，只能先死输入</li></ul><p>解决：</p><ul><li>使用 CDate 函数将字符串转化为日期</li></ul><p>新的问题：</p><ul><li>在重新输到<code>2020-10-</code> 的时候会报错</li></ul><p>解决：</p><ul><li>添加一行代码</li></ul><p>完全版代码</p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Command1_Click()    Timer1.Interval = 50End SubPrivate Sub Command2_Click()    EndEnd SubPrivate Sub Text1_Click()    Text1 = ""End SubPrivate Sub Timer1_Timer()    Text2.Text = Format(Now(), "yyyy/MM/dd hh:mm:ss")    yy = Val(Left$(Text1.Text$, 4))   '  text1中的年    mon = Val(Mid$(Text1.Text$, 6, 2)) '          月    dday = Val(Right$(Text1.Text$, 2))  '         日    If Text1.Text = "" Then        Text3.Text = ""    Else                      ' 加入判断 让到 - 的时候自动补全        If Text1.Text = yy & "-" & mon & "-" Then            t1 = Text1.Text & "01"            Text3.Text = CDate(t1) - Date & "天"        Else            Text3.Text = CDate(Text1.Text) - Date & "天"        End If    End IfEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-加法运算器"><a href="#2-加法运算器" class="headerlink" title="2. 加法运算器"></a>2. 加法运算器</h3><p><img src="/img/VB/zy/zy1_2.png" alt="第一次作业2"></p><p><strong>作业代码</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Private Sub Command1_Click(Index As Integer)    Text3.Text = Val(Text1.Text) + Val(Text2.Text)End SubPrivate Sub Command2_Click(Index As Integer)    Text1.Text = ""    Text2.Text = ""    Text3.Text = ""    Text1.SetFocusEnd SubPrivate Sub Command3_Click()    EndEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识点：</p><ul><li><code>Text1.SetFocus</code>按下按钮后将鼠标指针重新指回<code>Text1</code>的位置，即使焦点回到加数 A 框</li><li>val 将字符型数据转换为数值型数据，str 将数值型转换为字符型</li></ul><h2 id="7-2-第二次作业"><a href="#7-2-第二次作业" class="headerlink" title="7.2 第二次作业"></a>7.2 第二次作业</h2><h3 id="1-华氏度与摄氏度的转换"><a href="#1-华氏度与摄氏度的转换" class="headerlink" title="1. 华氏度与摄氏度的转换"></a>1. 华氏度与摄氏度的转换</h3><p><img src="/img/VB/zy/zy2_1.png" alt="第二次作业1"></p><p><strong>作业代码</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitDim C As Variant, F As Variant, CI As Double, FI As DoublePrivate Sub Form_Load()    Label4.Enabled = False    Timer1.Interval = 50End SubPrivate Sub label3_click()    C = Text1.Text    If IsNumeric(C) Then        CI = Val(C)        FI = Round(9 / 5 * CI + 32, 1)        Text2.Text = FI    Else        MsgBox "摄氏度不是数"        Text1.Text = ""    End IfEnd SubPrivate Sub Label4_Click()    F = Text2.Text    If IsNumeric(F) Then        FI = Val(F)        CI = Round(5 / 9 * (FI - 32), 1)        Text1.Text = CI    Else        MsgBox "华氏度不是数"        Text2.Text = ""    End IfEnd SubPrivate Sub Text1_Click()    Label3.Enabled = True: Label4.Enabled = False    Text1.Text = "": Text2.Text = ""End SubPrivate Sub Text1_KeyPress(KeyAscii As Integer)    If KeyAscii = 13 Then label3_clickEnd SubPrivate Sub Text2_Click()    Label4.Enabled = True: Label3.Enabled = False    Text1.Text = "": Text2.Text = ""End SubPrivate Sub Text2_KeyPress(KeyAscii As Integer)    If KeyAscii = 13 Then Label4_ClickEnd SubPrivate Sub Timer1_Timer()    C = Text1.Text: F = Text2.Text    If C <> "" Or F <> "" Then        label3_click        Label4_Click    End IfEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识点：</p><ul><li>VB 中的不等于<code>&lt;&gt;</code></li><li>enabled 可以让控件是否响应用户，如正向转换时，关闭逆向开关；逆向转换时，关闭正向开关</li></ul><h3 id="2-二次方程根的求解"><a href="#2-二次方程根的求解" class="headerlink" title="2. 二次方程根的求解"></a>2. 二次方程根的求解</h3><p><img src="/img/VB/zy/zy2_2.png" alt="第二次作业2"></p><p><strong>作业代码</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitDim a As Variant, b As Variant, c As Variant, x1 As Variant, x2 As VariantDim ai As Double, bi As Double, ci As Double, dta As Double, xs1 As Double, xs2 As Double, xx1 As Double, xx2 As DoublePrivate Sub Command1_Click()    a = Text1.Text: b = Text2.Text: c = Text3.Text    If IsNumeric(a) And IsNumeric(b) And IsNumeric(c) Then        ai = Val(a): bi = Val(b): ci = Val(c)        dta = bi ^ 2 - 4 * ai * ci        If dta > 0 Then            x1 = (-bi + Sqr(dta)) / (2 * ai)            x2 = (-bi - Sqr(dta)) / (2 * ai)            Text4.Text = x1            Text5.Text = x2        ElseIf dta = 0 Then            x1 = (-bi) / (2 * ai)            x2 = (-bi) / (2 * ai)            Text4.Text = x1            Text5.Text = x2        Else            xs1 = Round((-bi) / (2 * ai), 2)            xx1 = Round(Sqr(-dta) / (2 * ai), 2)            Text4.Text = Str(xs1) & "+" & Str(xx1) & "i"            xs2 = Round((-bi) / (2 * ai), 2)            xx2 = Round(Sqr(-dta) / (2 * ai), 2)            Text5.Text = Str(xs2) & "-" & Str(xx2) & "i"        End If    Else        MsgBox "abc不全是数字"    End IfEnd SubPrivate Sub Command2_Click()    Text1.Text = ""    Text2.Text = ""    Text3.Text = ""    Text4.Text = ""    Text5.Text = ""    Text1.SetFocusEnd SubPrivate Sub Command3_Click()    EndEnd SubPrivate Sub Text1_KeyPress(KeyAscii As Integer)    If KeyAscii = 13 Then Command1_ClickEnd SubPrivate Sub Text2_KeyPress(KeyAscii As Integer)    If KeyAscii = 13 Then Command1_ClickEnd SubPrivate Sub Text3_KeyPress(KeyAscii As Integer)    If KeyAscii = 13 Then Command1_ClickEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识点：</p><ul><li>Dim 声明</li><li>ElseIf 的使用</li><li>MsgBox 的使用 <code>MsgBox "提示信息"</code></li><li>Round(x,2) 约到小数点后几位</li><li>keypress 的应用，可以执行事件</li></ul><h2 id="7-3-第三次作业"><a href="#7-3-第三次作业" class="headerlink" title="7.3 第三次作业"></a>7.3 第三次作业</h2><h3 id="所有水仙花数"><a href="#所有水仙花数" class="headerlink" title="所有水仙花数"></a>所有水仙花数</h3><p><img src="/img/VB/zy/zy3.png" alt="第三次作业"></p><p><strong>作业代码</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitPrivate Sub Command1_Click()    Dim a, b, c, num    For num = 100 To 999        a = num Mod 10        b = num \ 10 Mod 10        c = num \ 100        If a ^ 3 + b ^ 3 + c ^ 3 = num Then Print num    Next numEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识点：</p><ul><li><code>15 mod 10</code>取余数 5</li><li><code>15 \ 10</code>整数相除得整数 1</li></ul><h2 id="7-4-第四次作业"><a href="#7-4-第四次作业" class="headerlink" title="7.4 第四次作业"></a>7.4 第四次作业</h2><h3 id="1-sub-子过程计算和"><a href="#1-sub-子过程计算和" class="headerlink" title="1. sub 子过程计算和"></a>1. sub 子过程计算和</h3><p><img src="/img/VB/zy/zy4_1.png" alt="第四次作业1"></p><p><strong>作业代码</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitPrivate Sub Command1_Click()    Dim sr As Integer, j As Integer, s As Long, f As Long    sr = Text1.Text    s = 0    For j = 1 To sr        Call Tim(j, f)        s = s + f    Next j    Text2.Text = sEnd SubSub Tim(k As Integer, f As Long)    Dim i As Integer        f = 0        For i = 1 To k            f = f + i        Next iEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识点：</p><ul><li>sub 子过程的编写和调用：call 函数名(参数，返回结果)</li></ul><h3 id="2-奖学金等级"><a href="#2-奖学金等级" class="headerlink" title="2. 奖学金等级"></a>2. 奖学金等级</h3><p><img src="/img/VB/zy/zy4_2.png" alt="第四次作业2"></p><p><strong>作业代码</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitPrivate Sub Command1_Click()    Dim m1 As Long, m2 As Long, m3 As Long, jg As Long    m1 = Text1.Text: m2 = Text2.Text: m3 = Text3.Text    Call pd(m1, m2, m3, jg)    If jg = 1 Then        Text4.Text = "一等奖"    ElseIf jg = 2 Then        Text4.Text = "二等奖"    ElseIf jg = 3 Then        Text4.Text = "三等奖"    Else        Text4.Text = "没有奖"    End IfEnd SubSub pd(f1 As Long, f2 As Long, f3 As Long, jg As Long)    Dim fpj As Long, p1 As Integer, p2 As Integer, p3 As Integer    Dim f(1 To 3) As Integer, i As Variant    fpj = (f1 + f2 + f3) / 3    f(1) = f1: f(2) = f2: f(3) = f3    p1 = 0: p2 = 0: p3 = 0    For Each i In f        If i = 100 Then            p1 = p1 + 1        End If        If i >= 80 Then            p2 = p2 + 1        End If        If i >= 75 Then            p3 = p3 + 1        End If    Next i    If (fpj > 95) Or (p1 >= 2 And p2 = 3) Then        jg = 1    ElseIf (fpj > 90) Or (p1 >= 1 And p3 = 3) Then        jg = 2    ElseIf p3 = 3 Then        jg = 3    End IfEnd SubPrivate Sub Text4_Click()    Text1.Text = "": Text2.Text = "": Text3.Text = "": Text4.Text = ""End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点注意：</p><ul><li><code>for each a in f</code> 中的 a 必须是变体型变量</li></ul><h2 id="7-5-第五次作业"><a href="#7-5-第五次作业" class="headerlink" title="7.5 第五次作业"></a>7.5 第五次作业</h2><h3 id="1-RGB-三色调色板"><a href="#1-RGB-三色调色板" class="headerlink" title="1. RGB 三色调色板"></a>1. RGB 三色调色板</h3><p><img src="/img/VB/zy/zy5_1.png" alt="第五次作业1"></p><p><strong>作业代码</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitDim r As Integer, g As Integer, b As IntegerPrivate Sub Command1_Click()    Text2.ForeColor = Text1.BackColorEnd SubPrivate Sub Command2_Click()    Text2.BackColor = Text1.BackColorEnd SubPrivate Sub HScroll1_Change()    r = HScroll1.Value: g = HScroll2.Value: b = HScroll3.Value    Text1.BackColor = RGB(r, g, b)End SubPrivate Sub HScroll2_Change()    r = HScroll1.Value: g = HScroll2.Value: b = HScroll3.Value    Text1.BackColor = RGB(r, g, b)End SubPrivate Sub HScroll3_Change()    r = HScroll1.Value: g = HScroll2.Value: b = HScroll3.Value    Text1.BackColor = RGB(r, g, b)End Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识点：</p><ul><li>hscroll1.value 横向滚动条的值</li><li>hscroll1_change() 判断横向滚动条的值是否发生变化,变化时执行的程序</li><li>RGB()函数的使用</li></ul><h3 id="2-成绩合计-amp-密码验证"><a href="#2-成绩合计-amp-密码验证" class="headerlink" title="2. 成绩合计 &amp; 密码验证"></a>2. 成绩合计 &amp; 密码验证</h3><p><img src="/img/VB/zy/zy5_2.png" alt="第五次作业2"></p><p><strong>作业代码 1</strong></p><pre class="line-numbers language-vb"><code class="language-vb">Option ExplicitDim i As Integer, t As IntegerPrivate Sub Command1_Click()    t = 0    For i = 0 To 4        If Check1(i).Value Then            t = t + Val(Text1(i).Text)        End If    Next i    Text2.Text = tEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识点：</p><ul><li>控件数组的使用</li><li>check1.value 为 true 直接判断</li></ul><p><strong>作业代码 2</strong></p><pre class="line-numbers language-vb"><code class="language-vb">' Form2Option ExplicitDim reval As IntegerPrivate Sub bl_Click()    reval = Shell("C:\Users\20180\Desktop\bz-live.bat", 2)End SubPrivate Sub fb_Click()    reval = Shell("C:\Users\20180\Desktop\fund.bat", 2)End SubPrivate Sub Form_Click()    PopupMenu b, 2End SubPrivate Sub sc_Click()    reval = Shell("C:\Users\20180\Desktop\scrcpy.bat", 2)End SubPrivate Sub tc_Click()    reval = Shell("C:\Users\20180\Desktop\timecal.bat", 2)End Sub'Form1Option ExplicitPrivate Sub Command1_Click()    If Text1.Text = "123" Then        Form1.Hide        Form2.Show    Else        Label2.Visible = True        Label2.Caption = "password error"        Text1.Text = ""    End IfEnd SubPrivate Sub Form_Load()    Label2.Visible = FalseEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识点：</p><ul><li>主要是菜单的编辑，工具–菜单编辑器</li><li>form1.hide &amp; form2.show 窗体的隐藏和显示</li><li><code>reval = shell("C:\Users\20180\Desktop\fund.bat",2)</code>调用程序</li></ul><h2 id="7-6-第六次作业"><a href="#7-6-第六次作业" class="headerlink" title="7.6 第六次作业"></a>7.6 第六次作业</h2><h3 id="学生成绩的录入、统计图表输出应用程序"><a href="#学生成绩的录入、统计图表输出应用程序" class="headerlink" title="学生成绩的录入、统计图表输出应用程序"></a>学生成绩的录入、统计图表输出应用程序</h3><p><img src="/img/VB/zy/zy6.png" alt="第六次作业"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> VB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Note</title>
      <link href="/2020/02/15/note-java/"/>
      <url>/2020/02/15/note-java/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><blockquote><p><a href="https://www.runoob.com/java/java-basic-syntax.html" target="_blank" rel="noopener">java 参考学习教程</a></p></blockquote><h2 id="1-java-基础语法"><a href="#1-java-基础语法" class="headerlink" title="1. java 基础语法"></a>1. java 基础语法</h2><ul><li>_对象_：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等</li><li><em>类</em>：类是一个模板，它描述一类对象的行为和状态</li><li>_方法_：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的</li><li>_实例变量_：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定</li></ul><h3 id="1-1-java-程序HelloWorld-java"><a href="#1-1-java-程序HelloWorld-java" class="headerlink" title="1.1 java 程序HelloWorld.java"></a>1.1 java 程序<code>HelloWorld.java</code></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 第一个Java程序     * 它将打印字符串 Hello World     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印 Hello World</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># Hello World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>cmd 窗口</strong><br><code>javac HelloWorld.java --调试</code><br><code>java Helloworld --运行</code></p><h3 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h3><ul><li>大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的</li><li>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass</li><li>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写</li><li>源文件名.java：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）</li><li>主方法入口：所有的 Java 程序由 <code>public static void main(String []args)</code> 方法开始执行</li></ul><h3 id="1-3-java-标识符"><a href="#1-3-java-标识符" class="headerlink" title="1.3 java 标识符"></a>1.3 java 标识符</h3><p><em>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符</em></p><ul><li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ul><h3 id="1-4-java-修饰符"><a href="#1-4-java-修饰符" class="headerlink" title="1.4 java 修饰符"></a>1.4 java 修饰符</h3><p><em>像其他语言一样，Java 可以使用修饰符来修饰类中方法和属性。主要有两类修饰符</em></p><ul><li>访问控制修饰符 : default, public , protected, private</li><li>非访问控制修饰符 : final, abstract, static, synchronized</li></ul><h3 id="1-5-java-变量"><a href="#1-5-java-变量" class="headerlink" title="1.5 java 变量"></a>1.5 java 变量</h3><ul><li>局部变量</li><li>类变量–静态变量</li><li>成员变量–非静态变量</li></ul><h3 id="1-6-java-数组"><a href="#1-6-java-数组" class="headerlink" title="1.6 java 数组"></a>1.6 java 数组</h3><p><em>数组是储存在堆上的对象，可以保存多个同类型变量</em></p><h3 id="1-7-java-枚举"><a href="#1-7-java-枚举" class="headerlink" title="1.7 java 枚举"></a>1.7 java 枚举</h3><p><em>Java 5.0 引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug</em><br><em>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FreshJuice</span> <span class="token punctuation">{</span>   <span class="token keyword">enum</span> FreshJuiceSize<span class="token punctuation">{</span> SMALL<span class="token punctuation">,</span> MEDIUM <span class="token punctuation">,</span> LARGE <span class="token punctuation">}</span>   FreshJuiceSize size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreshJuiceTest</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>      FreshJuice juice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FreshJuice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      juice<span class="token punctuation">.</span>size <span class="token operator">=</span> FreshJuice<span class="token punctuation">.</span>FreshJuiceSize<span class="token punctuation">.</span>MEDIUM  <span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-1-java-关键字-不可以用于变量"><a href="#1-7-1-java-关键字-不可以用于变量" class="headerlink" title="1.7.1 java 关键字(不可以用于变量)"></a>1.7.1 java 关键字(不可以用于变量)</h3><table><thead><tr><th align="center">类别</th><th align="center">关键字</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">访问控制</td><td align="center">private</td><td align="center">私有的</td></tr><tr><td align="center"></td><td align="center">protected</td><td align="center">受保护的</td></tr><tr><td align="center"></td><td align="center">public</td><td align="center">公共的</td></tr><tr><td align="center">类、方法和变量修饰符</td><td align="center">abstract</td><td align="center">声明抽象</td></tr><tr><td align="center"></td><td align="center">class</td><td align="center">类</td></tr><tr><td align="center"></td><td align="center">extends</td><td align="center">扩充，继承</td></tr><tr><td align="center"></td><td align="center">final</td><td align="center">最终值，不可改变的</td></tr><tr><td align="center"></td><td align="center">implements</td><td align="center">实现（接口）</td></tr><tr><td align="center"></td><td align="center">interface</td><td align="center">接口</td></tr><tr><td align="center"></td><td align="center">native</td><td align="center">本地，原生方法</td></tr><tr><td align="center"></td><td align="center">new</td><td align="center">新，创建</td></tr><tr><td align="center"></td><td align="center">static</td><td align="center">静态</td></tr><tr><td align="center"></td><td align="center">strictfp</td><td align="center">严格，精准</td></tr><tr><td align="center"></td><td align="center">synchronized</td><td align="center">线程，同步</td></tr><tr><td align="center"></td><td align="center">transient</td><td align="center">短暂</td></tr><tr><td align="center"></td><td align="center">volatile</td><td align="center">易失的</td></tr><tr><td align="center">程序控制语句</td><td align="center">break</td><td align="center">跳出循环</td></tr><tr><td align="center"></td><td align="center">case</td><td align="center">定义一个值供 switch 选择</td></tr><tr><td align="center"></td><td align="center">continue</td><td align="center">继续</td></tr><tr><td align="center"></td><td align="center">default</td><td align="center">默认</td></tr><tr><td align="center"></td><td align="center">do</td><td align="center">运行</td></tr><tr><td align="center"></td><td align="center">else</td><td align="center">否则</td></tr><tr><td align="center"></td><td align="center">for</td><td align="center">循环</td></tr><tr><td align="center"></td><td align="center">if</td><td align="center">如果</td></tr><tr><td align="center"></td><td align="center">instanceof</td><td align="center">实例</td></tr><tr><td align="center"></td><td align="center">return</td><td align="center">返回</td></tr><tr><td align="center"></td><td align="center">switch</td><td align="center">根据值选择执行</td></tr><tr><td align="center"></td><td align="center">while</td><td align="center">循环</td></tr><tr><td align="center">错误处理</td><td align="center">assert</td><td align="center">断言表达式是否为真</td></tr><tr><td align="center"></td><td align="center">catch</td><td align="center">捕捉一场</td></tr><tr><td align="center"></td><td align="center">finally</td><td align="center">有没有异常都执行</td></tr><tr><td align="center"></td><td align="center">throw</td><td align="center">抛出一个异常对象</td></tr><tr><td align="center"></td><td align="center">throws</td><td align="center">声明一个异常可能被抛出</td></tr><tr><td align="center"></td><td align="center">try</td><td align="center">捕获异常</td></tr><tr><td align="center">包相关</td><td align="center">impot</td><td align="center">引入</td></tr><tr><td align="center"></td><td align="center">package</td><td align="center">包</td></tr><tr><td align="center">基本类型</td><td align="center">boolean</td><td align="center">布尔型</td></tr><tr><td align="center"></td><td align="center">byte</td><td align="center">字节型</td></tr><tr><td align="center"></td><td align="center">char</td><td align="center">字符型</td></tr><tr><td align="center"></td><td align="center">double</td><td align="center">双精度浮点</td></tr><tr><td align="center"></td><td align="center">float</td><td align="center">单精度浮点</td></tr><tr><td align="center"></td><td align="center">int</td><td align="center">整型</td></tr><tr><td align="center"></td><td align="center">long</td><td align="center">长整型</td></tr><tr><td align="center"></td><td align="center">short</td><td align="center">短整型</td></tr><tr><td align="center">变量引用</td><td align="center">super</td><td align="center">父类。超类</td></tr><tr><td align="center"></td><td align="center">this</td><td align="center">本类</td></tr><tr><td align="center"></td><td align="center">void</td><td align="center">无返回值</td></tr><tr><td align="center">保留关键字</td><td align="center">goto</td><td align="center">是关键字，但不能使用</td></tr><tr><td align="center"></td><td align="center">const</td><td align="center">是关键字，但不能使用</td></tr><tr><td align="center"></td><td align="center">null</td><td align="center">空</td></tr></tbody></table><h3 id="1-8-java-注释"><a href="#1-8-java-注释" class="headerlink" title="1.8 java 注释"></a>1.8 java 注释</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*多行*注释*/</span><span class="token comment" spellcheck="true">// 单行注释</span><span class="token comment" spellcheck="true">/*单行注释*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-9-java-空行—-忽略"><a href="#1-9-java-空行—-忽略" class="headerlink" title="1.9 java 空行—-忽略"></a>1.9 java 空行—-忽略</h3><h3 id="1-10-继承"><a href="#1-10-继承" class="headerlink" title="1.10 继承"></a>1.10 继承</h3><ul><li>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类</li><li>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）</li></ul><h3 id="1-11-接口"><a href="#1-11-接口" class="headerlink" title="1.11 接口"></a>1.11 接口</h3><ul><li>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色</li><li>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类</li></ul><h3 id="1-12-java-源程序与编译型运行区别"><a href="#1-12-java-源程序与编译型运行区别" class="headerlink" title="1.12 java 源程序与编译型运行区别"></a>1.12 java 源程序与编译型运行区别</h3><p><img src="/img/java/java.png" alt="java_pic"></p><h2 id="2-对象和类"><a href="#2-对象和类" class="headerlink" title="2. 对象和类"></a>2. 对象和类</h2><p><em>一个群体中有很多 boy 和 girl</em><br><em>其中 boy 和 girl 为类 class，而具体的每个人为该类的对象</em></p><h3 id="2-1-java-中的类"><a href="#2-1-java-中的类" class="headerlink" title="2.1 java 中的类"></a>2.1 java 中的类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>  String breed<span class="token punctuation">;</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  String color<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">barking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">sleeping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个类中可以包含一下类型的变量：</p><ul><li>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁</li><li>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问</li><li>类变量：类变量也声明在类中，方法体之外，但必须声明为 static 类型<br>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和 sleeping()都是 Dog 类的方法</li></ul><h3 id="2-2-构造方法"><a href="#2-2-构造方法" class="headerlink" title="2.2 构造方法"></a>2.2 构造方法</h3><ul><li>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。</li><li>在创建一个对象的时候，至少要调用一个构造方法</li><li>构造方法的名称必须与类同名，一个类可以有多个构造方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Puppy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Puppy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Puppy</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个构造器仅有一个参数：name</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-创建对象"><a href="#2-3-创建对象" class="headerlink" title="2.3 创建对象"></a>2.3 创建对象</h3><p><em>对象是根据类创建的。在 Java 中，使用关键字 new 来创建一个新的对象</em></p><ul><li>声明：声明一个对象，包括对象名称和对象类型</li><li>实例化：使用关键字 new 来创建一个对象</li><li>初始化：使用 new 创建对象时，会调用构造方法初始化对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Puppy</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">Puppy</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//这个构造器仅有一个参数：name</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗的名字是 : "</span> <span class="token operator">+</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 下面的语句将创建一个Puppy对象</span>      Puppy myPuppy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Puppy</span><span class="token punctuation">(</span> <span class="token string">"tommy"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bilibili提供的一些api</title>
      <link href="/2020/02/15/tools-bilibili-api/"/>
      <url>/2020/02/15/tools-bilibili-api/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="1-up-信息，名字，等级，视频总播放量，文章总浏览数"><a href="#1-up-信息，名字，等级，视频总播放量，文章总浏览数" class="headerlink" title="1. up 信息，名字，等级，视频总播放量，文章总浏览数"></a>1. up 信息，名字，等级，视频总播放量，文章总浏览数</h2><p><code>https://api.bilibili.com/x/space/upstat?mid=uid&amp;jsonp=jsonp</code></p><h2 id="2-up-信息，关注数，黑名单，粉丝数"><a href="#2-up-信息，关注数，黑名单，粉丝数" class="headerlink" title="2. up 信息，关注数，黑名单，粉丝数"></a>2. up 信息，关注数，黑名单，粉丝数</h2><p><code>https://api.bilibili.com/x/relation/stat?vmid=UID&amp;jsonp=jsonp</code></p><h2 id="3-bilibili-某视频评论区的信息"><a href="#3-bilibili-某视频评论区的信息" class="headerlink" title="3. bilibili 某视频评论区的信息"></a>3. bilibili 某视频评论区的信息</h2><p><code>http://api.bilibili.com/x/v2/reply?jsonp=jsonp&amp;;pn=页数&amp;type=1&amp;oid=av号</code></p><h2 id="4-bilibili-主页各个分区信息（信息量巨大）"><a href="#4-bilibili-主页各个分区信息（信息量巨大）" class="headerlink" title="4. bilibili 主页各个分区信息（信息量巨大）"></a>4. bilibili 主页各个分区信息（信息量巨大）</h2><p><code>https://www.bilibili.com/index/ding.json</code></p><h2 id="5-bilibili-视频-av-号，弹幕，评论，收藏，硬币，分享，喜欢等基本信息"><a href="#5-bilibili-视频-av-号，弹幕，评论，收藏，硬币，分享，喜欢等基本信息" class="headerlink" title="5. bilibili 视频 av 号，弹幕，评论，收藏，硬币，分享，喜欢等基本信息"></a>5. bilibili 视频 av 号，弹幕，评论，收藏，硬币，分享，喜欢等基本信息</h2><p><code>http://api.bilibili.com/archive_stat/stat?aid=av号&amp;type=jsonp</code></p><h2 id="6-bilibili-主站"><a href="#6-bilibili-主站" class="headerlink" title="6. bilibili 主站"></a>6. bilibili 主站</h2><p><code>https://api.bilibili.com/x/web-interface/online?&amp;;jsonp=jsonp</code></p><h2 id="7-up-的粉丝数量，但有限制，最对-250-个"><a href="#7-up-的粉丝数量，但有限制，最对-250-个" class="headerlink" title="7. up 的粉丝数量，但有限制，最对 250 个"></a>7. up 的粉丝数量，但有限制，最对 250 个</h2><p><code>https://api.bilibili.com/x/relation/followers?vmid=uid&amp;pn=5&amp;ps=0&amp;order=desc&amp;jsonp=jsonp</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 资源力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bilibili </tag>
            
            <tag> Api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Python写的一些获取b站信息的小程序</title>
      <link href="/2020/02/14/example-bilibili/"/>
      <url>/2020/02/14/example-bilibili/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>bilibili 提供的 api 接口(一串 json 字符)</strong><br><em>让基于 bilibili 的开发更简单</em><br><strong>我基于 python 写的几个使用 api 获取信息的例子</strong></p><!--more--><h1 id="1-bilibili-用户基本信息-name，level，关注，粉丝-获取"><a href="#1-bilibili-用户基本信息-name，level，关注，粉丝-获取" class="headerlink" title="1. bilibili 用户基本信息(name，level，关注，粉丝)获取"></a>1. bilibili 用户基本信息(name，level，关注，粉丝)获取</h1><p><code>https://api.bilibili.com/x/space/upstat?mid=UUID&amp;jsonp=jsonp</code><em>up 信息，名字，等级，视频总播放量，文章总浏览数</em><br><code>https://api.bilibili.com/x/relation/stat?vmid=UUID&amp;jsonp=jsonp</code><em>up 信息，关注数，黑名单，粉丝数</em></p><p><strong>简单的代码获取 up 信息</strong></p><pre class="line-numbers language-py"><code class="language-py">import jsonimport requestsmid = input('输入要查询的up的uid：')url_space = 'https://api.bilibili.com/x/space/acc/info?mid=' + midurl_relation = 'https://api.bilibili.com/x/relation/stat?vmid='+midspace = requests.get(url_space).content.decode()relation =requests.get(url_relation).content.decode()# print(type(html))dict_space = json.loads(space)dict_rela = json.loads(relation)# print(dict)up_name = dict_space["data"]["name"]up_level = dict_space['data']['level']up_following_num = dict_rela['data']['following']up_follower_num = dict_rela['data']['follower']print(f'up名字是:{up_name}')print(f'up等级达到:{up_level}级')if int(up_level)>=5:    print('----哇是个大佬！！！----')print(f'up关注了{up_following_num}个人')if int(up_following_num)>=700:    print('----铁定是个dd！！！----')print(f'up有{up_follower_num}个粉丝')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-py"><code class="language-py">输入要查询的up的uid：2up名字是:碧诗up等级达到:6级----哇是个大佬！！！----up关注了191个人up有804598个粉丝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-bilibili-统计某视频评论区，并生成词云"><a href="#2-bilibili-统计某视频评论区，并生成词云" class="headerlink" title="2. bilibili 统计某视频评论区，并生成词云"></a>2. bilibili 统计某视频评论区，并生成词云</h1><ul><li><strong>获取某视频评论区评论</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">import jsonimport requestsfrom multiprocessing.dummy import Poolimport reimport osav = input('请输入视频的av号:')p_total = input('请输入评论要几页:')def get_urls():    urls = []    p = 1    while p <= int(p_total):        url = 'http://api.bilibili.com/x/v2/reply?jsonp=jsonp&;pn=' + str(p) + '&type=1&oid=' + av        urls.append(url)        p += 1    return urlsdef get_name_con(url):    html = requests.get(url).content.decode()    yh_names = re.findall(r'"uname":"(.*?)","sex":',html,re.S)    yh_contents = re.findall(r'"message":"(.*?)","plat"',html,re.S)    del yh_contents[0]    yh_contents2 = []    for yh_content in yh_contents:        yh_contents2.append(yh_content.replace('\\n',' '))    # print(yh_contents2)    # exit()    return yh_names,yh_contents2def get_names_cons():    pool = Pool(5)    urls = get_urls()    namecons = pool.map(get_name_con,urls)    names = []    cons = []    for namecon in namecons:        name = namecon[0]        for n in name :            names.append(n)        con = namecon[1]        for c in con:            cons.append(c)    return names,consdef save():    tumple = get_names_cons()    namelst = tumple[0]    conlst = tumple[1]    # print(len(conlst))    # # print(type(namelst))    # print(len(namelst))    # exit()    if len(namelst) != len(conlst):        tot = len(conlst)    g = 0    main_path = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\txt' #修改路径-自定义    if not os.path.exists(main_path):        os.makedirs(main_path)    dir1 = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\txt\\' + 'comment'  + '.txt'  # 自定义文件名    with open(dir1,'w',encoding='utf-8') as fb:        for g in range(tot):            # fb.write(namelst[g])            # fb.write('\t\t\t')            fb.write(conlst[g])            # fb.write('\n')            g += 1if __name__ == '__main__':    save()    print('----已完成----',end='\t')    print(f'此视频已获得 {p_total} 页的评论')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>将生成的评论 txt 文件统计为词云</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">from wordcloud import WordCloudimport PIL .Image as imageimport jiebadef trans_cn(text):    word_list = jieba.cut(text)    result = ' '.join(word_list)    return resultdef wc():    dir1 = './txt/comment.txt'    with open(dir1,encoding='utf-8') as f:        text = f.read()        text = trans_cn(text)        WordCloud2 = WordCloud(            font_path = 'C:\\windows\\Fonts\\simfang.ttf'        ).generate(text)        image_produce = WordCloud2.to_image()        image_produce.show()        WordCloud2.to_file('./txt/comment.png')wc()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：av2</strong><br><img src="/img/bilibili/comment.png" alt="图片示例"></p><h1 id="3-获取-bilibili-主页各个分区的视频封面和-av-号"><a href="#3-获取-bilibili-主页各个分区的视频封面和-av-号" class="headerlink" title="3. 获取 bilibili 主页各个分区的视频封面和 av 号"></a>3. 获取 bilibili 主页各个分区的视频封面和 av 号</h1><p><code>https://www.bilibili.com/index/ding.json</code><em>首页 api，每刷新一次，信息就会改变一次</em><br><em>获取的视频信息也就不同，所以可以一直获取信息(理论上来说)</em><br><em>缺点是每次只能获取十张图片信息</em><br><em>用的是 wb 写入文件，所以即使文件有一样的也会被覆盖…</em></p><pre class="line-numbers language-py"><code class="language-py">import requestsimport reimport osimport jsonprint('-douga-teleplay-kichiku-dance-bangumi-fashion-life-ad-guochuang-movie-music-technology-game-ent--')fenqu = input('请输入爬取分区:')if fenqu == '':    fenqu1 = 'shuma'else :    fenqu1 = fenquhtml = requests.get(    'https://www.bilibili.com/index/ding.json').content.decode()dict_html = json.loads(html)i = 0aids = []pics = []for i in range(10):    aid = dict_html[fenqu][str(i)]['aid']    pic = dict_html[fenqu][str(i)]['pic']    aids.append(aid)    pics.append(pic)j = 1h = j-1for h in range(10):    main_path = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\pic\\'+fenqu1    if not os.path.exists(main_path):        os.makedirs(main_path)    try:        piccc = requests.get(pics[h])    except requests.exceptions.ConnectionError:        print('图片无法下载')        continue    except requests.exceptions.ReadTimeout:        print('requests.exceptions.ReadTimeout')        continue    dir = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\pic\\' + \         fenqu1 + '\\'  +'av' + str(aids[h]) + '.jpg'    with open(dir, 'wb') as f:        print(f'正在爬取第{j}张图')        f.write(piccc.content)    j += 1    h += 1print('----完成图片爬取----')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>略微修改后</em><br><em>可能就是因为有重复的，会覆盖前面已下载的</em><br><em>爬个 5 次本该有 50 张，但才有 20 几张(dance 区)</em><br><em>可能 dance 区首页视频比较少吧，游戏区很多</em><br><strong>不管了反正这个爬虫也没什么用 hhh</strong></p><pre class="line-numbers language-py"><code class="language-py">import requestsimport reimport osimport jsondef get_pic():    if fenqu == '':        fenqu1 = 'shuma'    else :        fenqu1 = fenqu    html = requests.get(        'https://www.bilibili.com/index/ding.json').content.decode()    dict_html = json.loads(html)    i = 0    aids = []    pics = []    for i in range(10):        aid = dict_html[fenqu][str(i)]['aid']        pic = dict_html[fenqu][str(i)]['pic']        aids.append(aid)        pics.append(pic)    j = 1    h = j-1    for h in range(10):        main_path = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\pic\\'+fenqu1        if not os.path.exists(main_path):            os.makedirs(main_path)        try:            piccc = requests.get(pics[h])        except requests.exceptions.ConnectionError:            print('图片无法下载')            continue        except requests.exceptions.ReadTimeout:            print('requests.exceptions.ReadTimeout')            continue        dir = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\pic\\' + \            fenqu1 + '\\'  +'av' + str(aids[h]) + '.jpg'        with open(dir, 'wb') as f:            print(f'正在爬取第{j}张图')            f.write(piccc.content)        j += 1        h += 1to = int(input('请输入你要爬多少次---一次最多十张：'))print('-douga-teleplay-kichiku-dance-bangumi-fashion-life-ad-guochuang-movie-music-technology-game-ent--')fenqu = input('请输入爬取分区:')for i in range(to):    get_pic()    print(f'----完成第{i}次图片爬取----')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://github.com/yq010105/spider_learn/tree/master/bilibili/bilibili_api" target="_blank" rel="noopener">Github 源码链接</a></p></blockquote><h1 id="4-主站上的实时人数"><a href="#4-主站上的实时人数" class="headerlink" title="4. 主站上的实时人数"></a>4. 主站上的实时人数</h1><p>_所用 api 接口_<code>https://api.bilibili.com/x/web-interface/online?&amp;;jsonp=jsonp</code></p><pre class="line-numbers language-py"><code class="language-py">import requestsimport jsonimport timedef print_num():    index = requests.get(    'https://api.bilibili.com/x/web-interface/online?&;jsonp=jsonp').content.decode()    dict_index = json.loads(index)    all_count = dict_index['data']['all_count']    web_online = dict_index['data']['web_online']    play_online = dict_index['data']['play_online']# 应该是人数和实时在线人数    print(f'all_count:{all_count}')    print(f'web_online:{web_online}')    print(f'play_online:{play_online}')for i in range(100):    print(f'第{i+1}次计数')    print_num()    time.sleep(2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-用户的粉丝数"><a href="#5-用户的粉丝数" class="headerlink" title="5. 用户的粉丝数"></a>5. 用户的粉丝数</h1><p><em>只能获取一页，b 站最多是五页，多了就会有限制</em></p><pre class="line-numbers language-py"><code class="language-py">import requestsimport jsonimport csvimport osimport timeuid = input('请输入查找的up主的uid:')url = 'https://api.bilibili.com/x/relation/followers?vmid=' + \    uid + '&ps=0&order=desc&jsonp=jsonp'html = requests.get(url).content.decode()dic_html = json.loads(html)index_order = dic_html['data']['list']mids, mtimes, unames, signs = [], [], [], []for i in index_order:    mid = i['mid']    mids.append(mid)    mtime = i['mtime']    mmtime = time.asctime(time.localtime(mtime))    mtimes.append(mmtime)    uname = i['uname']    unames.append(uname)    sign = i['sign']    signs.append(sign)# print(index_order)# print(mids)headers = ['uid', '注册时间', 'up姓名', '个性签名']rows = []j = 0for j in range(len(mids)):    rows.append([mids[j], mtimes[j], unames[j], signs[j]])main_path = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\csv'if not os.path.exists(main_path):    os.makedirs(main_path)dir = 'E:\\learn\\py\\git\\spider\\spider_learn\\bilibili\\bilibili_api\\csv\\' + \    'follers' + '.csv'with open(dir, 'w', encoding='utf-8') as f:    fb = csv.writer(f)    fb.writerow(headers)    fb.writerows(rows)print('----最多只显示一页的粉丝数，也就是50个----')print(f'共有{len(mids)}个粉丝')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Bilibili </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中WordCloud库的学习</title>
      <link href="/2020/02/13/python-wordcloud/"/>
      <url>/2020/02/13/python-wordcloud/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>安装: <code>pip install WordCloud</code></p><h1 id="1-wordcloud-代码-英文"><a href="#1-wordcloud-代码-英文" class="headerlink" title="1. wordcloud 代码(英文)"></a>1. wordcloud 代码(英文)</h1><pre class="line-numbers language-py"><code class="language-py">from wordcloud import WordCloudimport PIL .Image as imageimport numpy as np # 自定义图片dir = './bi.txt'with open(dir) as fp:    text = fp.read()    # print(text)    # exit()    mask = np.array(image.open('F:\download\\1.png'))   #自定义词云形状    WordCloud = WordCloud(        mask = mask,    ).generate(text)    image_produce = WordCloud.to_image()    image_produce.show()        #  生成的文件在：C:\Users\20180\AppData\Local\Temp\jieba.cache中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-wordcloud-代码实现-中文"><a href="#2-wordcloud-代码实现-中文" class="headerlink" title="2. wordcloud 代码实现(中文)"></a>2. wordcloud 代码实现(中文)</h1><ul><li><strong>jieba 库</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">from wordcloud import WordCloudimport PIL .Image as imageimport numpy as np # 自定义图片import jieba # 中文def trans_cn(text):    word_list = jieba.cut(text)    result = ' '.join(word_list)    return resultdir = './bi.txt'with open(dir) as fp:    text = fp.read()    # print(text)    # exit()    text = trans_cn(text)    mask = np.array(image.open('F:\download\\1.png'))    WordCloud = WordCloud(        mask = mask,        font_path ='C:\\windows\\Fonts\\msyh.ttc'    ).generate(text)    image_produce = WordCloud.to_image()    image_produce.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="https://www.jianshu.com/p/c986f5017ca7" target="_blank" rel="noopener">简书网站</a></p></blockquote><h1 id="3-将-python-词云生成的图片保存下来"><a href="#3-将-python-词云生成的图片保存下来" class="headerlink" title="3. 将 python 词云生成的图片保存下来"></a>3. 将 python 词云生成的图片保存下来</h1><pre class="line-numbers language-py"><code class="language-py">import jiebafrom wordcloud import WordCloudwith open("./bi.txt") as fp:    txt = fp.read()  # 读取文本words = jieba.lcut(txt)  # 精确分词nextword = ' '.join(words)    #空格连接字符wordshow = WordCloud(background_color='white',                     width=800,                     height=800,                     max_words=800,                     max_font_size=100,                     font_path="msyh.ttc",    #用微软雅黑作为字体显示效果                     ).generate(nextword)wordshow.to_file('bilibili_rank.png')  #转换成图片<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/qq_41709494/article/details/89213176" target="_blank" rel="noopener">参考网站</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中Pyinstaller库的学习</title>
      <link href="/2020/02/13/python-pyinstaller/"/>
      <url>/2020/02/13/python-pyinstaller/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>安装</strong><br><strong><code>pip3 install pyinstaller</code></strong></p><!--more--><h1 id="1-Pyinstaller-的使用"><a href="#1-Pyinstaller-的使用" class="headerlink" title="1. Pyinstaller 的使用"></a>1. Pyinstaller 的使用</h1><h2 id="1-1-打开-PowerShell-窗口"><a href="#1-1-打开-PowerShell-窗口" class="headerlink" title="1.1 打开 PowerShell 窗口"></a>1.1 打开 PowerShell 窗口</h2><ul><li>在你的 Python 程序文件夹上（不点进去）按住 shift 并且右键，在弹出的选项中点击”在此处打开命令行窗口”</li><li>或者先进入命令行窗口，然后使用 cd 指令进入程序文件夹，示例：<br><code>cd G:\工程储存\Python工程\love</code></li></ul><h2 id="1-2-输入以下指令，开始打包"><a href="#1-2-输入以下指令，开始打包" class="headerlink" title="1.2 输入以下指令，开始打包"></a>1.2 输入以下指令，开始打包</h2><p><code>pyinstaller -F -w (-i icofile) filename</code></p><ul><li>filename 表示你的 Python 程序文件名</li><li>-w 表示隐藏程序运行时的命令行窗口(不加-w 会有黑色窗口)</li><li>括号内的为可选参数，-i icofile 表示给程序加上图标，图标必须为.ico 格式<br><em>icofile 表示图标的位置，建议直接放在程序文件夹里面，这样子打包的时候直接写文件名就好</em></li><li>输入示例：<br><code>pyinstaller -F -w -i favicon love.py</code></li><li>然后我们进入到程序目录里面会再看到一个名称为 dist 目录，打包好的 exe 程序就在里面</li></ul><h2 id="1-3-pyinstaller-相关参数"><a href="#1-3-pyinstaller-相关参数" class="headerlink" title="1.3 pyinstaller 相关参数"></a>1.3 pyinstaller 相关参数</h2><ul><li><p>-F, –onefile 打包一个单个文件，如果你的代码都写在一个.py 文件的话，可以用这个，如果是多个.py 文件就别用</p></li><li><p>-D, –onedir 打包多个文件，在 dist 中生成很多依赖文件，适合以框架形式编写工具代码，我个人比较推荐这样，代码易于维护</p></li><li><p>-K, –tk 在部署时包含 TCL/TK</p></li><li><p>-a, –ascii 不包含编码.在支持 Unicode 的 python 版本上默认包含所有的编码.</p></li><li><p>-d, –debug 产生 debug 版本的可执行文件</p></li><li><p>-w,–windowed,–noconsole 使用 Windows 子系统执行.当程序启动的时候不会打开命令行(只对 Windows 有效)</p></li><li><p>-c,–nowindowed,–console 使用控制台子系统执行(默认)(只对 Windows 有效)</p></li><li><p>-s,–strip 可执行文件和共享库将 run through strip.注意 Cygwin 的 strip 往往使普通的 win32 Dll 无法使用.</p></li><li><p>-X, –upx 如果有 UPX 安装(执行 Configure.py 时检测),会压缩执行文件(Windows 系统中的 DLL 也会)(参见 note)</p></li><li><p>-o DIR, –out=DIR 指定 spec 文件的生成目录,如果没有指定,而且当前目录是 PyInstaller 的根目录,会自动创建一个用于输出(spec 和生成的可执行文件)的目录.如果没有指定,而当前目录不是 PyInstaller 的根目录,则会输出到当前的目录下.</p></li><li><p>-p DIR, –path=DIR 设置导入路径(和使用 PYTHONPATH 效果相似).可以用路径分割符(Windows 使用分号,Linux 使用冒号)分割,指定多个目录.也可以使用多个-p 参数来设置多个导入路径，让 pyinstaller 自己去找程序需要的资源</p></li><li><p>–icon=&lt;FILE.ICO&gt;<br>将 file.ico 添加为可执行文件的资源(只对 Windows 系统有效)，改变程序的图标 pyinstaller -i ico 路径 xxxxx.py</p></li><li><p>–icon=&lt;FILE.EXE,N&gt; 将 file.exe 的第 n 个图标添加为可执行文件的资源(只对 Windows 系统有效)</p></li><li><p>-v FILE, –version=FILE 将 verfile 作为可执行文件的版本资源(只对 Windows 系统有效)</p></li><li><p>-n NAME, –name=NAME 可选的项目(产生的 spec 的)名字.如果省略,第一个脚本的主文件名将作为 spec 的名字</p></li></ul><blockquote><p><a href="https://blog.csdn.net/qq_33462307/article/details/90479045" target="_blank" rel="noopener">参考 CSDN</a></p></blockquote><h1 id="2-Pyinstaller-的问题"><a href="#2-Pyinstaller-的问题" class="headerlink" title="2. Pyinstaller 的问题"></a>2. Pyinstaller 的问题</h1><h2 id="2-1-Fail-to-execute-scrip-XXX"><a href="#2-1-Fail-to-execute-scrip-XXX" class="headerlink" title="2.1 Fail to execute scrip XXX"></a>2.1 Fail to execute scrip XXX</h2><p><strong>使用了<code>pyinstaller -F -w code.py</code>打包以后，发现打不开</strong></p><p><em>解决不了啊啊啊啊</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议的介绍</title>
      <link href="/2020/02/13/learn-http/"/>
      <url>/2020/02/13/learn-http/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h2><ul><li>HTTP 基于 TCP/IP 协议：http 协议是基于 TCP/IP 协议之上的应用层协议</li><li>HTTP 是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间</li><li>HTTP 是基于请求－响应模式：HTTP 协议规定,请求从客户端发出,最后服务器端响应该请求并 返回</li><li>HTTP 是无状态保存：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</li></ul><h2 id="2-URL"><a href="#2-URL" class="headerlink" title="2. URL"></a>2. URL</h2><p>HTTP 使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL 是一种特殊类型的 URI，包含了用于查找某个资源的足够的信息</p><p><strong>例子解析</strong>：<em><a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="noopener">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></em></p><ul><li>协议部分：该 URL 的协议部分为“http：”</li><li>域名部分：该 URL 的域名部分为“<a href="http://www.aspxfans.com”" target="_blank" rel="noopener">www.aspxfans.com”</a></li><li>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符</li><li>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个 URL 必须的部分。本例中的虚拟目录是“/news/”</li><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个 URL 必须的部分，如果省略该部分，则使用默认的文件名</li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个 URL 必须的部分</li><li>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符</li></ul><h2 id="3-Request"><a href="#3-Request" class="headerlink" title="3. Request"></a>3. Request</h2><p><img src="/img/http/http_request.png" alt="request解析图"></p><hr><p><strong>常见请求头</strong></p><ul><li>accept:浏览器通过这个头告诉服务器，他支持的数据类</li><li>Accept-Charset:浏览器通过这个告诉服务器，他锁支持的字符集</li><li>Accept-Encoding:浏览器通过这个告诉服务器，他支持的压缩格式</li><li>Accept-Language:浏览器通过这个告诉服务器，他的语言环境</li><li>Host：浏览器通过这个告诉服务器，像访问那台主机</li><li>If-Modified-Since:浏览器通过这个头告诉服务器，缓存数据的时间</li><li>Referer：浏览器通过这个头告诉服务器，客户机是从哪个页面来的（防盗链）</li><li>Connection:浏览器通过这个头告诉服务器，请求完后是断开连接还是维持连接</li><li>X-Requested-With:XMLHttpResquest 代表通过 ajax 方式进行访问的</li><li>User-Agent:请求载体的身份标识</li></ul><h2 id="4-Response"><a href="#4-Response" class="headerlink" title="4. Response"></a>4. Response</h2><p><img src="/img/http/http_response.png" alt="response解析图"></p><hr><p><strong>常见的响应头信息</strong></p><ul><li>Location：服务器通过这个头，来告诉浏览器跳转到哪里</li><li>Server:服务器通过这个头，告诉路浏览器服务器的型号</li><li>Content-Encoding:服务器通过这个头，告诉浏览器数据压缩的格式</li><li>Content-Length:服务器通过这个头，告诉浏览器会送数据的长度</li><li>Content-Language:服务器通过这个头，告诉浏览器语言环境</li><li>Content-Type:服务器通过这个头，告诉浏览器回送数据的类型</li><li>Refresh:服务器通过这个头，告诉浏览器定时刷新</li><li>Content-Disposition:服务器通过这个头，告诉浏览器以下载方式打开数据</li><li>Transfer-Encoding:服务器通过这个头，告诉浏览器数据是以块方式回送的</li><li>Expires:-1 控制浏览器不要缓存</li><li>Cache-Control:no-cache</li><li>Pragma: no-cache</li></ul><p><strong>响应状态码</strong></p><table><thead><tr><th align="center"></th><th align="center">类别</th><th align="center">原因短语</th></tr></thead><tbody><tr><td align="center">1xx</td><td align="center">Informational(信息性状态码)</td><td align="center">接受的请求正在处理</td></tr><tr><td align="center">2xx</td><td align="center">Success(成功状态码)</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">3xx</td><td align="center">Redirection(重定向状态码)</td><td align="center">需要进行附加操作以完成请求</td></tr><tr><td align="center">4xx</td><td align="center">Client Error(客户端错误状态码)</td><td align="center">服务器无法处理请求</td></tr><tr><td align="center">5xx</td><td align="center">Server Error(服务器错误状态码)</td><td align="center">服务器处理请求出错</td></tr></tbody></table><blockquote><p><a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin" target="_blank" rel="noopener">百度百科详细对比表</a></p></blockquote><h2 id="5-HTTPS-协议"><a href="#5-HTTPS-协议" class="headerlink" title="5. HTTPS 协议"></a>5. HTTPS 协议</h2><p>HTTPS (Secure Hypertext Transfer Protocol)安全超文本传输协议，HTTPS 是在 HTTP 上建立 SSL 加密层，并对传输数据进行加密，是 HTTP 协议的安全版<br><img src="/img/http/https.png" alt="https"></p><blockquote><p><a href="https://www.cnblogs.com/angle6-liu/p/10459132.html" target="_blank" rel="noopener">参考教程</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中format函数的学习</title>
      <link href="/2020/02/11/python-format/"/>
      <url>/2020/02/11/python-format/</url>
      
        <content type="html"><![CDATA[<p><strong>Python_format   一种格式化字符串函数<code>str.format()</code></strong></p><blockquote><p>参考教程<a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">网站</a>和<a href="https://blog.csdn.net/qq_19691995/article/details/84197252" target="_blank" rel="noopener">CSDN</a></p></blockquote><a id="more"></a><p><strong>python_format</strong></p><p>   <strong><code>str.format()</code>，它增强了字符串格式化的功能</strong><br>   <strong>基本语法是通过 {} 和 : 来代替以前的 %</strong><br><strong>你也可以<code>print(f'字符{参数1}字符{参数2}字符')</code></strong></p><h2 id="1-format-函数可以接受不限个参数，位置可以不按顺序"><a href="#1-format-函数可以接受不限个参数，位置可以不按顺序" class="headerlink" title="1. format 函数可以接受不限个参数，位置可以不按顺序"></a>1. format 函数可以接受不限个参数，位置可以不按顺序</h2><pre class="line-numbers language-py"><code class="language-py">>>>"{} {}".format("hello", "world")    # 不设置指定位置，按默认顺序'hello world'>>> "{0} {1}".format("hello", "world")  # 设置指定位置'hello world'>>> "{1} {0} {1}".format("hello", "world")  # 设置指定位置'world hello world'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-设置参数"><a href="#2-设置参数" class="headerlink" title="2. 设置参数"></a>2. 设置参数</h2><pre class="line-numbers language-py"><code class="language-py">print("网站名：{name}, 地址 {url}".format(name="菜鸟教程", url="www.runoob.com"))# 通过字典设置参数site = {"name": "菜鸟教程", "url": "www.runoob.com"}print("网站名：{name}, 地址 {url}".format(**site))# 通过列表索引设置参数my_list = ['菜鸟教程', 'www.runoob.com']print("网站名：{0[0]}, 地址 {0[1]}".format(my_list))  # "0" 是必须的'''网站名：菜鸟教程, 地址 www.runoob.com网站名：菜鸟教程, 地址 www.runoob.com网站名：菜鸟教程, 地址 www.runoob.com'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过字典和列表的另一种写法</p><pre class="line-numbers language-py"><code class="language-py">>>> hash = {'name':'hoho','age':18}>>> 'my name is {name},age is {age}'.format(**hash)        #**dict'my name is hoho,age is 18'>>> li = ['hoho',18]>>> 'my name is {} ,age {}'.format(*li)               #*[]迭代列表'my name is hoho ,age 18'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-向str-format传入对象"><a href="#3-向str-format传入对象" class="headerlink" title="3. 向str.format传入对象"></a>3. 向<code>str.format</code>传入对象</h2><pre class="line-numbers language-py"><code class="language-py">class AssignValue(object):    def __init__(self, value):        self.value = valuemy_value = AssignValue(6)print('value 为: {0.value}'.format(my_value))  # "0" 是可选的# value 为: 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-数字格式化"><a href="#4-数字格式化" class="headerlink" title="4. 数字格式化"></a>4. 数字格式化</h2><pre class="line-numbers language-py"><code class="language-py">>>> print("{:.2f}".format(3.1415926));3.14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="center">数字</th><th align="center">格式</th><th align="center">输出</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">3.1415926</td><td align="center">{:.2f}</td><td align="center">3.14</td><td align="center">保留小数点后两位</td></tr><tr><td align="center">3.1415926</td><td align="center">{:+.2f}</td><td align="center">+3.14</td><td align="center">带符号保留小数点后两位</td></tr><tr><td align="center">-1</td><td align="center">{:+.2f}</td><td align="center">-1.00</td><td align="center">带符号保留小数点后两位</td></tr><tr><td align="center">2.71828</td><td align="center">{:.0f}</td><td align="center">3</td><td align="center">不带小数</td></tr><tr><td align="center">5</td><td align="center">{:0&gt;2d}</td><td align="center">05</td><td align="center">数字补零</td></tr><tr><td align="center">5</td><td align="center">{:x&lt;4d}</td><td align="center">5xxx</td><td align="center">数字补 x (填充右边, 宽度为 4)</td></tr><tr><td align="center">10</td><td align="center">{:x&lt;4d}</td><td align="center">10xx</td><td align="center">数字补 x (填充右边, 宽度为 4)</td></tr><tr><td align="center">1000000</td><td align="center">{:,}</td><td align="center">1,000,000</td><td align="center">以逗号分隔的数字格式</td></tr><tr><td align="center">0.25</td><td align="center">{:.2%}</td><td align="center">25.00%</td><td align="center">百分比格式</td></tr><tr><td align="center">1000000000</td><td align="center">{:.2e}</td><td align="center">1.00e+09</td><td align="center">指数记法</td></tr><tr><td align="center">13</td><td align="center">{:&gt;10d}</td><td align="center">13</td><td align="center">右对齐 (默认, 宽度为 10)</td></tr><tr><td align="center">13</td><td align="center">{:&lt;10d}</td><td align="center">13</td><td align="center">左对齐 (宽度为 10)</td></tr><tr><td align="center">13</td><td align="center">{:^10d}</td><td align="center">13</td><td align="center">中间对齐 (宽度为 10)</td></tr><tr><td align="center">11</td><td align="center">‘{:b}’.format(11)</td><td align="center">1011</td><td align="center">进制</td></tr><tr><td align="center"></td><td align="center">‘{:d}’.format(11)</td><td align="center">11</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">‘{:o}’.format(11)</td><td align="center">13</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">‘{:x}’.format(11)</td><td align="center">b</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">‘{:#x}’.format(11)</td><td align="center">0xb</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">‘{:#X}’.format(11)</td><td align="center">0XB</td><td align="center"></td></tr></tbody></table><ul><li><strong>^, &lt;, &gt; 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充</strong></li><li><strong>+ 表示在正数前显示 +，负数前显示 -； （空格）表示在正数前加空格</strong></li><li><strong>b、d、o、x 分别是二进制、十进制、八进制、十六进制</strong></li></ul><h2 id="5-此外还可以用大括号-来转义大括号"><a href="#5-此外还可以用大括号-来转义大括号" class="headerlink" title="5. 此外还可以用大括号 {} 来转义大括号"></a>5. 此外还可以用大括号 {} 来转义大括号</h2><pre class="line-numbers language-py"><code class="language-py">print ("{} 对应的位置是 {{0}}".format("runoob"))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>_结果为_：<strong>runoob 对应的位置是 {0}</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己写的几个爬虫</title>
      <link href="/2020/02/10/example-spider/"/>
      <url>/2020/02/10/example-spider/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>自己动手做的 python 爬虫</strong>   <a href="https://github.com/yq010105/spider_learn" target="_blank" rel="noopener" title="github">GitHub 链接</a><br>WARNING :逻辑混乱，语法不顺！！！</p></blockquote><a id="more"></a><h1 id="1-爬取-bilibili-每日排行榜数据"><a href="#1-爬取-bilibili-每日排行榜数据" class="headerlink" title="1. 爬取 bilibili 每日排行榜数据"></a>1. 爬取 bilibili 每日排行榜数据</h1><ul><li><strong>使用 XPath 爬取,并将数据保存到 csv 文件中</strong></li><li><strong>文件名使用该排行榜所在时间段</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> csv<span class="token keyword">import</span> lxml<span class="token punctuation">.</span>htmlurl <span class="token operator">=</span> <span class="token string">'https://www.bilibili.com/ranking/'</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(html)</span>selector <span class="token operator">=</span> lxml<span class="token punctuation">.</span>html<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>html<span class="token punctuation">)</span>title <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[2]/a/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(len(title))</span>link <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[1]/a/@href'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(link[0])</span><span class="token comment" spellcheck="true"># cover = selector.xpath('//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[1]/a/div/img/@src')</span><span class="token comment" spellcheck="true"># print(cover[0])</span>up_name <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[2]/div[1]/a/span/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(up_name[5])</span>up_videoplay <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[3]/ul/li/div[2]/div[2]/div[1]/span[1]/text()'</span><span class="token punctuation">)</span>time <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="app"]/div[1]/div/div[1]/div[2]/div[2]/div/span/text()'</span><span class="token punctuation">)</span>time_num <span class="token operator">=</span> time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>str1 <span class="token operator">=</span> time_num<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' 的数据综合得分，每日更新一次'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'统计所有投稿在 '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>time_num2 <span class="token operator">=</span> str2headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'up_name'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'link'</span><span class="token punctuation">]</span>rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rows<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>up_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>title<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>link<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>f<span class="token string">'{time_num2}.csv'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f_csv <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    f_csv<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>headers<span class="token punctuation">)</span>    f_csv<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>csv 部分展示</strong><br><code>2020年02月07日 - 2020年02月10日</code><br><img src="/img/bilibili_csv.png" alt="bilibili_csv"></li></ul><h1 id="2-爬取-baidu-上搜到的图片-初级"><a href="#2-爬取-baidu-上搜到的图片-初级" class="headerlink" title="2. 爬取 baidu 上搜到的图片(初级)"></a>2. 爬取 baidu 上搜到的图片(初级)</h1><h2 id="2-1-thumbURL"><a href="#2-1-thumbURL" class="headerlink" title="2.1 thumbURL"></a>2.1 thumbURL</h2><ul><li><em>分辨率极低</em></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#通过正则匹配</span>    pic_url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'"thumbURL":"(.*?)",'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> pic_url<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载图片："</span><span class="token operator">+</span>key <span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片无法下载'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true">#保存图片路径</span>        main_path<span class="token operator">=</span><span class="token string">"E:/baidu/"</span> <span class="token comment" spellcheck="true">#文件保存路径，如果不存在就会被重建</span>        <span class="token keyword">if</span>  <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果路径不存在</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span>        dir <span class="token operator">=</span> <span class="token string">"E:/baidu/"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>        fp <span class="token operator">=</span> open<span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;fm=result&amp;pos=history&amp;word=siyueshinide'</span>        result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        download<span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-objURL"><a href="#2-2-objURL" class="headerlink" title="2.2 objURL"></a>2.2 objURL</h2><p><em>分辨率较高，但有的图爬不了</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#通过正则匹配</span>    pic_url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'"objURL":"(.*?)",'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># for pic_url_li in pic_url:</span>        <span class="token comment" spellcheck="true"># pic_url_js = '{'+'"link"'+':' +pic_url_li+'}'</span>        <span class="token comment" spellcheck="true"># pic_url_py = json.loads(pic_url_li)</span>    <span class="token comment" spellcheck="true"># print(pic_url)</span>    <span class="token comment" spellcheck="true"># exit()</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> pic_url<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载图片："</span><span class="token operator">+</span>key <span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片无法下载'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'requests.exceptions.ReadTimeout'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true">#保存图片路径</span>        main_path<span class="token operator">=</span><span class="token string">"E:/baidu/"</span> <span class="token comment" spellcheck="true">#文件保存路径，如果不存在就会被重建</span>        <span class="token keyword">if</span>  <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果路径不存在</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span>        dir <span class="token operator">=</span> <span class="token string">"E:/baidu/"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>        fp <span class="token operator">=</span> open<span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;fm=result&amp;pos=history&amp;word=siyueshinide'</span>        result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        download<span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-baidu-面向对象"><a href="#2-3-baidu-面向对象" class="headerlink" title="2.3 baidu 面向对象"></a>2.3 baidu 面向对象</h2><ul><li>输入想爬取的关键词，自动爬取(只能下 30 张)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">get_id</span><span class="token punctuation">(</span>search_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://image.baidu.com/search/index?tn=baiduimage&amp;ps=1&amp;ct=201326592&amp;lm=-1&amp;cl=2&amp;nc=1&amp;ie=utf-8&amp;word='</span> <span class="token operator">+</span> search_id    <span class="token keyword">return</span> url<span class="token keyword">def</span> <span class="token function">get_obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> get_id<span class="token punctuation">(</span>search_id<span class="token punctuation">)</span>    html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    obj_URL <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'"objURL":"(.*?)",'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">return</span> obj_URL<span class="token keyword">def</span> <span class="token function">save_pic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    obj_url <span class="token operator">=</span> get_obj<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> objurl <span class="token keyword">in</span> obj_url<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始下载图片'</span><span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span><span class="token string">'第'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'张'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span> <span class="token punctuation">:</span>            pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>objurl<span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片无法下载'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'requests.exceptions.ReadTimeout'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">global</span> search_id        main_path <span class="token operator">=</span> r<span class="token string">'E:\learn\py\git\spider\spider_learn\baidu\pic\\'</span> <span class="token operator">+</span> search_id <span class="token operator">+</span><span class="token string">'\\'</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span>        dir <span class="token operator">=</span> <span class="token string">"E:\learn\py\git\spider\spider_learn\\baidu\pic\\"</span> <span class="token operator">+</span>search_id <span class="token operator">+</span><span class="token string">'\\'</span><span class="token operator">+</span> search_id<span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>dir<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    search_id <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要下载的内容:'</span><span class="token punctuation">)</span>    save_pic<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-baidu-more"><a href="#2-4-baidu-more" class="headerlink" title="2.4 baidu_more"></a>2.4 baidu_more</h2><ul><li><strong>进一步升级，可以爬任意数量图片</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">get_urls</span><span class="token punctuation">(</span>search_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    total <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入要几页----30张一页----：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'http://image.baidu.com/search/index?tn=baiduimage&amp;ps=1&amp;ct=201326592&amp;lm=-1&amp;cl=2&amp;nc=1&amp;ie=utf-8&amp;word='</span> <span class="token operator">+</span> search_id<span class="token operator">+</span> <span class="token string">'&amp;pn='</span>    t <span class="token operator">=</span> <span class="token number">0</span>    URLS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> t <span class="token operator">&lt;</span> int<span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">:</span>        URL <span class="token operator">=</span> url <span class="token operator">+</span> str<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">30</span>        URLS<span class="token punctuation">.</span>append<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>    <span class="token keyword">return</span> URLS<span class="token keyword">def</span> <span class="token function">get_obj</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    obj_URL <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'"objURL":"(.*?)",'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">return</span> obj_URL<span class="token keyword">def</span> <span class="token function">save_pic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pool<span class="token operator">=</span>Pool<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    objurls <span class="token operator">=</span> pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>get_obj<span class="token punctuation">,</span>URLS<span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> objurl <span class="token keyword">in</span> objurls<span class="token punctuation">:</span>        <span class="token keyword">for</span> obj <span class="token keyword">in</span> objurl<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始下载图片'</span><span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span><span class="token string">'第'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'张'</span><span class="token punctuation">)</span>            <span class="token keyword">try</span> <span class="token punctuation">:</span>                pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>obj<span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片无法下载'</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'requests.exceptions.ReadTimeout'</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">global</span> search_id            main_path <span class="token operator">=</span> patha <span class="token operator">+</span><span class="token string">'\\'</span> <span class="token operator">+</span> search_id <span class="token operator">+</span><span class="token string">'\\'</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span>            dir <span class="token operator">=</span> main_path <span class="token operator">+</span> search_id<span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>dir<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    search_id <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要下载的内容:'</span><span class="token punctuation">)</span>    URLS <span class="token operator">=</span> get_urls<span class="token punctuation">(</span>search_id<span class="token punctuation">)</span>    patha <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'输入文件保存路径----示例:E:\\baidu----:'</span><span class="token punctuation">)</span>    save_pic<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-爬取-ins-上的图片-初级版"><a href="#3-爬取-ins-上的图片-初级版" class="headerlink" title="3. 爬取 ins 上的图片(初级版)"></a>3. 爬取 ins 上的图片(初级版)</h1><ul><li><em>分辨率低</em></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> lxml<span class="token punctuation">.</span>html<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 获取src</span><span class="token keyword">def</span> <span class="token function">get_src</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://www.instagram.com/baaaakuuuu'</span>    html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    selector <span class="token operator">=</span> lxml<span class="token punctuation">.</span>html<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    script <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/script[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(script)</span>    <span class="token comment" spellcheck="true"># print(type(script))       #str</span>    <span class="token comment" spellcheck="true"># exit()</span>    <span class="token comment" spellcheck="true"># for script_in in script :</span>        <span class="token comment" spellcheck="true"># try:</span>        <span class="token comment" spellcheck="true">#     script_dic = json.loads(script_in)</span>        <span class="token comment" spellcheck="true"># print(script_dic)</span>    src <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'"thumbnail_resources":\[(.*?)\]'</span><span class="token punctuation">,</span>script<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(src[0]) #str</span>    <span class="token comment" spellcheck="true"># print(type(src[0]))</span>    <span class="token comment" spellcheck="true"># exit()</span>    <span class="token keyword">return</span> src<span class="token comment" spellcheck="true"># 获取图片链接</span><span class="token keyword">def</span> <span class="token function">get_picurl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    src <span class="token operator">=</span> get_src<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(src)</span>    <span class="token comment" spellcheck="true"># exit()</span>    pic_url_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> src_ls <span class="token keyword">in</span> src <span class="token punctuation">:</span>         <span class="token comment" spellcheck="true">#"config_height":480},{ ... ,"config_width":640,"config_height":640}</span>        thumb <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'"config_height":480},{(.*?),"config_width":640,"config_height":640}'</span><span class="token punctuation">,</span>src_ls<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        thumb_json <span class="token operator">=</span> <span class="token string">'{'</span> <span class="token operator">+</span> thumb <span class="token operator">+</span> <span class="token string">'}'</span>        <span class="token comment" spellcheck="true"># print(thumb_json)</span>        <span class="token comment" spellcheck="true"># exit()</span>        thumb_py <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>thumb_json<span class="token punctuation">)</span>        pic_url <span class="token operator">=</span> thumb_py<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(pic_url)</span>        <span class="token comment" spellcheck="true"># exit()</span>        pic_url_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pic_url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(pic_url_lst)</span>    <span class="token comment" spellcheck="true"># exit()</span>    <span class="token keyword">return</span> pic_url_lst<span class="token comment" spellcheck="true"># 将图片链接保存</span><span class="token keyword">def</span> <span class="token function">save_pic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pic_url_lst <span class="token operator">=</span> get_picurl<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># print(pic_url_lst)</span>    <span class="token comment" spellcheck="true"># exit()</span>    <span class="token keyword">for</span> pic_con <span class="token keyword">in</span> pic_url_lst<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print(pic_con)</span>        <span class="token comment" spellcheck="true"># exit()</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pic_con<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>            main_path <span class="token operator">=</span> <span class="token string">'E:/ins/'</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token string">'E:/ins/'</span> <span class="token operator">+</span> <span class="token string">'baku'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第{i}张已下载'</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#requests.exceptions.ConnectionError</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片无法下载'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span>save_pic<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-爬取-Wallhaven-上的图片"><a href="#4-爬取-Wallhaven-上的图片" class="headerlink" title="4. 爬取 Wallhaven 上的图片"></a>4. 爬取 Wallhaven 上的图片</h1><h2 id="4-1-龟速爬取-只是用来爬了一下博客需要的图片-hhh"><a href="#4-1-龟速爬取-只是用来爬了一下博客需要的图片-hhh" class="headerlink" title="4.1 龟速爬取,只是用来爬了一下博客需要的图片 hhh"></a>4.1 龟速爬取,只是用来爬了一下博客需要的图片 hhh</h2><p><em>爬取速度慢，要等半天才能开始保存文件，应该是我代码结构的问题，以后再做优化</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> lxml<span class="token punctuation">.</span>html<span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> osheaders <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pages <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'输入页数：'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pages = '1'</span>    url_pics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    page <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> page <span class="token operator">&lt;=</span> int<span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'https://wallhaven.cc/search?categories=010&amp;purity=100&amp;resolutions=1280x800&amp;sorting=relevance&amp;order=desc&amp;page='</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(html)</span>    <span class="token comment" spellcheck="true"># exit()</span>        selector <span class="token operator">=</span> lxml<span class="token punctuation">.</span>html<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        url_pic <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="thumbs"]/section/ul/li/figure/a/@href'</span><span class="token punctuation">)</span>        url_pics<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url_pic<span class="token punctuation">)</span>        page <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'得到了内层url'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> url_pics<span class="token keyword">def</span> <span class="token function">get_pic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url_pics <span class="token operator">=</span> get_url<span class="token punctuation">(</span><span class="token punctuation">)</span>    img_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> urlst <span class="token keyword">in</span> url_pics<span class="token punctuation">:</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> urlst<span class="token punctuation">:</span>            htmlp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(htmlp)</span>            <span class="token comment" spellcheck="true"># exit()</span>            img_url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'"wallpaper" src="(.*?)"'</span><span class="token punctuation">,</span>htmlp<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            img_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>img_url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'得到图片的url'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> img_urls<span class="token keyword">def</span> <span class="token function">get_img</span><span class="token punctuation">(</span>imgurl_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> imgurl_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始下载图片'</span><span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span><span class="token string">'第'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'张'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片无法下载'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'requests.exceptions.ReadTimeout'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        main_path <span class="token operator">=</span> r<span class="token string">'E:\\wallhaven\\'</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span>        dir <span class="token operator">=</span> <span class="token string">'E:\\wallhaven\\'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'.jpg'</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    imgurl_list <span class="token operator">=</span> get_pic<span class="token punctuation">(</span><span class="token punctuation">)</span>    get_img<span class="token punctuation">(</span>imgurl_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-多线程爬取"><a href="#4-2-多线程爬取" class="headerlink" title="4.2 多线程爬取"></a>4.2 多线程爬取</h2><pre class="line-numbers language-python"><code class="language-python">遇到了一个bug，等到bug解决再写上来<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Note</title>
      <link href="/2020/02/09/note-python/"/>
      <url>/2020/02/09/note-python/</url>
      
        <content type="html"><![CDATA[<p><strong>有一定的 python 自学基础，基础不扎实</strong><br><strong>python，边学爬虫，边把不会的 python 知识不全</strong></p><a id="more"></a><h1 id="1-文件管理（txt）"><a href="#1-文件管理（txt）" class="headerlink" title="1. 文件管理（txt）"></a>1. 文件管理（txt）</h1><pre class="line-numbers language-py"><code class="language-py">fd = open('file.txt','w',encoding='utf-8')      #utf-8 or GBKfd.write(content)fd.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 content 可以是字符串，变量，\t ……</p><hr><table><thead><tr><th align="center">r</th><th align="center">w</th><th align="center">a</th></tr></thead><tbody><tr><td align="center">只读</td><td align="center">覆盖写</td><td align="center">添加写</td></tr></tbody></table><h2 id="1-1-文件的readlines和readline"><a href="#1-1-文件的readlines和readline" class="headerlink" title="1.1 文件的readlines和readline"></a>1.1 文件的readlines和readline</h2><pre class="line-numbers language-python"><code class="language-python">f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 全部读取最后返回一个列表存所有的类,每行后面都会带有“\n”</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取一列数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="2-csv-文件"><a href="#2-csv-文件" class="headerlink" title="2. csv 文件"></a>2. csv 文件</h1><h2 id="2-1-列表序列数据"><a href="#2-1-列表序列数据" class="headerlink" title="2.1 列表序列数据"></a>2.1 列表序列数据</h2><ul><li>headers :表头</li><li>rows :内容</li><li>f<em>csv = csv.writer(f)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_f 为 open(‘file.txt’,’w’,encoding=’utf-8’)</em></li><li>f_csv.writerow(headers)</li><li>f_csv.writerows(rows)</li></ul><pre class="line-numbers language-py"><code class="language-py">import csvheaders = ['class','name','sex','height','year']rows = [        [1,'xiaoming','male',168,23],        [1,'xiaohong','female',162,22],        [2,'xiaozhang','female',163,21],        [2,'xiaoli','male',158,21]    ]with open('test.csv','w',newline='')as f:    f_csv = csv.writer(f)    f_csv.writerow(headers)    f_csv.writerows(rows)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>注意：如果打开 csv 文件出现空行的情况，那么需要添加一个参数 newline=”</em><br><code>with open('test.csv','w',newline='')as f:</code></p><table><thead><tr><th align="center">class</th><th align="center">name</th><th align="center">sex</th><th align="center">height</th><th align="center">year</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">male</td><td align="center">168</td><td align="center">23</td></tr><tr><td align="center">1</td><td align="center">xiaohong</td><td align="center">female</td><td align="center">162</td><td align="center">22</td></tr><tr><td align="center">2</td><td align="center">xiaozhang</td><td align="center">female</td><td align="center">163</td><td align="center">21</td></tr><tr><td align="center">2</td><td align="center">xiaoli</td><td align="center">male</td><td align="center">158</td><td align="center">21</td></tr></tbody></table><h2 id="2-2-字典序列数据"><a href="#2-2-字典序列数据" class="headerlink" title="2.2 字典序列数据"></a>2.2 字典序列数据</h2><ul><li>headers :表头</li><li>rows :内容</li><li>f_csv = DictWriter(f,headers)</li><li>f_csv.writeheader()</li><li>f_csv.writerows(rows)</li></ul><pre class="line-numbers language-py"><code class="language-py">import csvheaders = ['class','name','sex','height','year']rows = [        {'class':1,'name':'xiaoming','sex':'male','height':168,'year':23},        {'class':1,'name':'xiaohong','sex':'female','height':162,'year':22},        {'class':2,'name':'xiaozhang','sex':'female','height':163,'year':21},        {'class':2,'name':'xiaoli','sex':'male','height':158,'year':21},    ]with open('test2.csv','w',newline='')as f:    f_csv = csv.DictWriter(f,headers)    f_csv.writeheader()    f_csv.writerows(rows)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">class</th><th align="center">name</th><th align="center">sex</th><th align="center">height</th><th align="center">year</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xiaoming</td><td align="center">male</td><td align="center">168</td><td align="center">23</td></tr><tr><td align="center">1</td><td align="center">xiaohong</td><td align="center">female</td><td align="center">162</td><td align="center">22</td></tr><tr><td align="center">2</td><td align="center">xiaozhang</td><td align="center">female</td><td align="center">163</td><td align="center">21</td></tr><tr><td align="center">2</td><td align="center">xiaoli</td><td align="center">male</td><td align="center">158</td><td align="center">21</td></tr></tbody></table><h2 id="2-3-csv-文件的读"><a href="#2-3-csv-文件的读" class="headerlink" title="2.3 csv 文件的读"></a>2.3 csv 文件的读</h2><pre class="line-numbers language-py"><code class="language-py">import csvwith open('test.csv')as f:    f_csv = csv.reader(f)    for row in f_csv:        print(row)'''result['class', 'name', 'sex', 'height', 'year']['1', 'xiaoming', 'male', '168', '23']['1', 'xiaohong', 'female', '162', '22']['2', 'xiaozhang', 'female', '163', '21']['2', 'xiaoli', 'male', '158', '21']'''with open('test.csv')as f:    f_csv = csv.reader(f)    for row in f_csv:        print(row[0])'''resultclass1122'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="https://blog.csdn.net/katyusha1/article/details/81606175" target="_blank" rel="noopener" title="CSDN">网站</a></p></blockquote><h1 id="3-with-open-as-读写文件"><a href="#3-with-open-as-读写文件" class="headerlink" title="3. with open () as 读写文件"></a>3. with open () as 读写文件</h1><pre class="line-numbers language-py"><code class="language-py"># 读文件with open('file.txt','r',) as f:    print(f.read())# 不需调用f.close()# 如果文件过大则用read(size)比较保险# 如果文件是配置文件readlines()较为方便# 写文件with open('file.txt','w',encoding='utf-8') as f:    f.write('Hello World !')# 文本文件    encoding 字符编码：gbk，utf-8# 二进制文件  rb模式读取:图片,视频<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="https://blog.csdn.net/xrinosvip/article/details/82019844" target="_blank" rel="noopener" title="CSDN">网站</a></p></blockquote><h1 id="4-os-中创建文件夹"><a href="#4-os-中创建文件夹" class="headerlink" title="4. os 中创建文件夹"></a>4. os 中创建文件夹</h1><pre class="line-numbers language-py"><code class="language-py">import osmain_path = 'E:/os/'    #创建一个路径if not os.path.exists(main_path):   #如果该路径不存在    os.makedirs(main_path)  #则新建一个路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除文件:</strong><code>os.remove(path)</code></p><h1 id="5-将图片保存在文件夹中"><a href="#5-将图片保存在文件夹中" class="headerlink" title="5. 将图片保存在文件夹中"></a>5. 将图片保存在文件夹中</h1><pre class="line-numbers language-py"><code class="language-py">dir = '文件路径' + name +'.jpg'     #文件名url_get = requests.get(url)         #从url中获取图片信息with open(dir,'wb') as f:           #打开图片文件，保存图片信息    f.writer(url_get.content)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-try…except-语句"><a href="#6-try…except-语句" class="headerlink" title="6. try…except 语句"></a>6. try…except 语句</h1><h2 id="6-1-语法"><a href="#6-1-语法" class="headerlink" title="6.1 语法"></a>6.1 <strong>语法</strong></h2><pre class="line-numbers language-py"><code class="language-py">#python 异常处理try:<语句>        #运行别的代码except <名字>：<语句>        #如果在try部份引发了'name'异常except <名字>，<数据>:<语句>        #如果引发了'name'异常，获得附加的数据else:<语句>        #如果没有异常发生<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-使用-except-而不带任何异常类型"><a href="#6-2-使用-except-而不带任何异常类型" class="headerlink" title="6.2 使用 except 而不带任何异常类型"></a>6.2 <strong>使用 except 而不带任何异常类型</strong></h2><pre class="line-numbers language-py"><code class="language-py">try:    正常的操作   ......................except:    发生异常，执行这块代码   ......................else:    如果没有异常执行这块代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>以上方式 try-except 语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常</strong></p><h2 id="6-3-使用-except-而带多种异常类型"><a href="#6-3-使用-except-而带多种异常类型" class="headerlink" title="6.3 使用 except 而带多种异常类型"></a>6.3 <strong>使用 except 而带多种异常类型</strong></h2><pre class="line-numbers language-py"><code class="language-py">try:    正常的操作   ......................except(Exception1[, Exception2[,...ExceptionN]]]):   发生以上多个异常中的一个，执行这块代码   ......................else:    如果没有异常执行这块代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-4-try-finally-语句"><a href="#6-4-try-finally-语句" class="headerlink" title="6.4 try-finally 语句"></a>6.4 <strong>try-finally 语句</strong></h2><pre class="line-numbers language-py"><code class="language-py">try:<语句>finally:<语句>    #退出try时总会执行raise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-5-异常的参数"><a href="#6-5-异常的参数" class="headerlink" title="6.5 异常的参数"></a>6.5 <strong>异常的参数</strong></h2><pre class="line-numbers language-py"><code class="language-py">try:    正常的操作   ......................except ExceptionType, Argument:    你可以在这输出 Argument 的值...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-6-用户自定义异常"><a href="#6-6-用户自定义异常" class="headerlink" title="6.6 用户自定义异常"></a>6.6 <strong>用户自定义异常</strong></h2><ul><li>通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自 Exception 类，通过直接或间接的方式</li><li>以下为与 RuntimeError 相关的实例,实例中创建了一个类，基类为 RuntimeError，用于在异常触发时输出更多的信息</li><li>在 try 语句块中，用户自定义的异常后执行 except 块语句，变量 e 是用于创建 Networkerror 类的实例</li></ul><pre class="line-numbers language-py"><code class="language-py">class Networkerror(RuntimeError):    def __init__(self, arg):        self.args = arg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>在你定义以上类后，你可以触发该异常，如下所示：</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">try:    raise Networkerror("Bad hostname")except Networkerror,e:    print e.args<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">异常名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">BaseException</td><td align="center">所有异常的基类</td></tr><tr><td align="center">SystemExit</td><td align="center">解释器请求退出</td></tr><tr><td align="center">KeyboardInterrupt</td><td align="center">用户中断执行(通常是输入^C)</td></tr><tr><td align="center">Exception</td><td align="center">常规错误的基类</td></tr><tr><td align="center">StopIteration</td><td align="center">迭代器没有更多的值</td></tr><tr><td align="center">GeneratorExit</td><td align="center">生成器(generator)发生异常来通知退出</td></tr><tr><td align="center">StandardError</td><td align="center">所有的内建标准异常的基类</td></tr><tr><td align="center">ArithmeticError</td><td align="center">所有数值计算错误的基类</td></tr><tr><td align="center">FloatingPointError</td><td align="center">浮点计算错误</td></tr><tr><td align="center">OverflowError</td><td align="center">数值运算超出最大限制</td></tr><tr><td align="center">ZeroDivisionError</td><td align="center">除(或取模)零 (所有数据类型)</td></tr><tr><td align="center">AssertionError</td><td align="center">断言语句失败</td></tr><tr><td align="center">AttributeError</td><td align="center">对象没有这个属性</td></tr><tr><td align="center">EOFError</td><td align="center">没有内建输入,到达 EOF 标记</td></tr><tr><td align="center">EnvironmentError</td><td align="center">操作系统错误的基类</td></tr><tr><td align="center">IOError</td><td align="center">输入/输出操作失败</td></tr><tr><td align="center">OSError</td><td align="center">操作系统错误</td></tr><tr><td align="center">WindowsError</td><td align="center">系统调用失败</td></tr><tr><td align="center">ImportError</td><td align="center">导入模块/对象失败</td></tr><tr><td align="center">LookupError</td><td align="center">无效数据查询的基类</td></tr><tr><td align="center">IndexError</td><td align="center">序列中没有此索引(index)</td></tr><tr><td align="center">KeyError</td><td align="center">映射中没有这个键</td></tr><tr><td align="center">MemoryError</td><td align="center">内存溢出错误(对于 Python 解释器不是致命的)</td></tr><tr><td align="center">NameError</td><td align="center">未声明/初始化对象 (没有属性)</td></tr><tr><td align="center">UnboundLocalError</td><td align="center">访问未初始化的本地变量</td></tr><tr><td align="center">ReferenceError</td><td align="center">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td align="center">RuntimeError</td><td align="center">一般的运行时错误</td></tr><tr><td align="center">NotImplementedError</td><td align="center">尚未实现的方法</td></tr><tr><td align="center">SyntaxError Python</td><td align="center">语法错误</td></tr><tr><td align="center">IndentationError</td><td align="center">缩进错误</td></tr><tr><td align="center">TabError Tab</td><td align="center">和空格混用</td></tr><tr><td align="center">SystemError</td><td align="center">一般的解释器系统错误</td></tr><tr><td align="center">TypeError</td><td align="center">对类型无效的操作</td></tr><tr><td align="center">ValueError</td><td align="center">传入无效的参数</td></tr><tr><td align="center">UnicodeError Unicode</td><td align="center">相关的错误</td></tr><tr><td align="center">UnicodeDecodeError Unicode</td><td align="center">解码时的错误</td></tr><tr><td align="center">UnicodeEncodeError Unicode</td><td align="center">编码时错误</td></tr><tr><td align="center">UnicodeTranslateError Unicode</td><td align="center">转换时错误</td></tr><tr><td align="center">Warning</td><td align="center">警告的基类</td></tr><tr><td align="center">DeprecationWarning</td><td align="center">关于被弃用的特征的警告</td></tr><tr><td align="center">FutureWarning</td><td align="center">关于构造将来语义会有改变的警告</td></tr><tr><td align="center">OverflowWarning</td><td align="center">旧的关于自动提升为长整型(long)的警告</td></tr><tr><td align="center">PendingDeprecationWarning</td><td align="center">关于特性将会被废弃的警告</td></tr><tr><td align="center">RuntimeWarning</td><td align="center">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td align="center">SyntaxWarning</td><td align="center">可疑的语法的警告</td></tr><tr><td align="center">UserWarning</td><td align="center">用户代码生成的警告</td></tr></tbody></table><blockquote><p>参考<a href="https://www.runoob.com/python/python-exceptions.html" target="_blank" rel="noopener">教程</a></p></blockquote><h1 id="7-python-小知识点"><a href="#7-python-小知识点" class="headerlink" title="7. python 小知识点"></a>7. python 小知识点</h1><h2 id="7-1-换行符-‘-n’-和-回车符-‘-r’-的区别？"><a href="#7-1-换行符-‘-n’-和-回车符-‘-r’-的区别？" class="headerlink" title="7.1 换行符 ‘\n’ 和 回车符 ‘\r’ 的区别？"></a>7.1 换行符 ‘\n’ 和 回车符 ‘\r’ 的区别？</h2><pre><code>换行符就是另起一新行，光标在新行的开头；\n回车符就是光标回到一旧行的开头；(即光标目前所在的行为旧行)\r在解析文本或其他格式的文件内容时，常常要碰到判定回车式换行的地方这个时候就要注意既要判定"\r\n"又要判定"\n"。</code></pre><h2 id="7-2-Python-中-import-from…import-import…as-的区别"><a href="#7-2-Python-中-import-from…import-import…as-的区别" class="headerlink" title="7.2 Python 中 import, from…import,import…as 的区别"></a>7.2 Python 中 import, from…import,import…as 的区别</h2><pre class="line-numbers language-py"><code class="language-py">import datetimeprint(datetime.datetime.now())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上代码实现输出系统当前时间，是引入整个 datetime 包，然后再调用 datetime 这个类中的 now()方法</p><pre class="line-numbers language-py"><code class="language-py">from datetime import datetimeprint(datetime.now())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里是从 datetime 包中只导入 datetime 这个类，让后再调用 datetime 这个类中的 now()方法实现同样的目的</p><pre class="line-numbers language-py"><code class="language-py">import datetime as dtprint(dt.datetime.now())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>假如你嫌 datetime 这个包名称太长，想要给它取个别名，以后每次用到它的时候都用它的别名代替它，这时就需要用到 import…as</p><h2 id="7-3-Python-中-n-、-m-、-1-、-1-、-1-、-2-1-和-1-的含义"><a href="#7-3-Python-中-n-、-m-、-1-、-1-、-1-、-2-1-和-1-的含义" class="headerlink" title="7.3 Python 中[ : n]、[m : ]、[-1]、[:-1]、[::-1]、[2::-1]和[1:]的含义"></a>7.3 Python 中[ : n]、[m : ]、[-1]、[:-1]、[::-1]、[2::-1]和[1:]的含义</h2><pre class="line-numbers language-py"><code class="language-py">[m : ] 代表列表中的第m+1项到最后一项[ : n] 代表列表中的第一项到第n项import numpy as npa=[1,2,3.4,5]print(a)[ 1 2 3 4 5 ]print(a[-1])     取最后一个元素结果：[5]print(a[:-1])     除了最后一个取全部结果：[ 1 2 3 4 ]print(a[::-1])     取从后向前（相反）的元素结果：[ 5 4 3 2 1 ]print(a[2::-1])     取从下标为2的元素翻转读取结果：[ 3 2 1 ]print(a[1:])     取第二个到最后一个元素结果：[2 3 4 5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-4-python-浮点数保留几位小数"><a href="#7-4-python-浮点数保留几位小数" class="headerlink" title="7.4 python 浮点数保留几位小数"></a>7.4 python 浮点数保留几位小数</h2><pre class="line-numbers language-py"><code class="language-py">a = 5.026b = 5.000round(a,2)# 5.03round(b,2)# 5.0'%.2f' % a# '5.03''%.2f' % b# '5.00'float('%.2f' % a)# 5.03float('%.2f' % b)# 5.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-python-中陌生的函数"><a href="#8-python-中陌生的函数" class="headerlink" title="8. python 中陌生的函数"></a>8. python 中陌生的函数</h1><p><em>自己还不太熟悉的</em></p><h2 id="8-1-str-split-对字符串进行切片–返回一个列表"><a href="#8-1-str-split-对字符串进行切片–返回一个列表" class="headerlink" title="8.1 str.split() 对字符串进行切片–返回一个列表"></a>8.1 <code>str.split()</code> <strong>对字符串进行切片–返回一个列表</strong></h2><ul><li>语法<code>str.split(str="", num=string.count(str)).</code></li></ul><ul><li>str：分隔符，默认为所有的空字符，包括空格、换行、指标</li><li>num：分割次数，默认为-1，即分割所有</li></ul><pre class="line-numbers language-py"><code class="language-py"># exampletxt = "Google#Runoob#Taobao#Facebook"# 第二个参数为 1，返回两个参数列表x = txt.split("#", 1)print(x)         #['Google', 'Runoob#Taobao#Facebook']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考教程：<a href="https://www.runoob.com/python/att-string-split.html" target="_blank" rel="noopener" title="runoob.com">RUNOOB</a></p></blockquote><h2 id="8-2-str-find-检测字符串中是否包含子字符串-str"><a href="#8-2-str-find-检测字符串中是否包含子字符串-str" class="headerlink" title="8.2 str.find() 检测字符串中是否包含子字符串 str"></a>8.2 <code>str.find()</code> <strong>检测字符串中是否包含子字符串 str</strong></h2><ul><li><em>如果包含子字符串返回开始的索引值，否则返回-1</em></li></ul><ul><li>语法<code>str.find(str, beg=0, end=len(string))</code></li><li>str – 指定检索的字符串</li><li>beg – 开始索引，默认为 0</li><li>end – 结束索引，默认为字符串的长度</li></ul><pre class="line-numbers language-py"><code class="language-py"># examplestr1 = "this is string example....wow!!!";str2 = "exam";print str1.find(str2);          #15print str1.find(str2, 10);      #15print str1.find(str2, 40);      #-1,查不到返回-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-3-string-join"><a href="#8-3-string-join" class="headerlink" title="8.3 string.join()"></a>8.3 <code>string.join()</code></h2><ul><li>语法 <code>'sep'.join(seq)</code><em>以 sep 作为分隔符，将 seq 所有的元素合并成一个新的字符串</em> <em>返回值：返回一个以分隔符 sep 连接各个元素后生成的字符串</em></li><li>sep：分隔符。可以为空</li><li>seq：要连接的元素序列、字符串、元组、字典</li></ul><pre class="line-numbers language-py"><code class="language-py">>>> seq1 = ['hello','good','boy','doiido'] #对序列操作>>> print ' '.join(seq1)hello good boy doiido>>> print ':'.join(seq1)hello:good:boy:doiido# 对字符串操作>>> seq2 = "hello good boy doiido">>> print ':'.join(seq2)h:e:l:l:o: :g:o:o:d: :b:o:y: :d:o:i:i:d:o# 对元组操作>>> seq3 = ('hello','good','boy','doiido')>>> print ':'.join(seq3)hello:good:boy:doiido# 对字典操作>>> seq4 = {'hello':1,'good':2,'boy':3,'doiido':4}>>> print ':'.join(seq4)boy:good:doiido:hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>另一个 <code>os.path.join()</code></strong></li></ul><ul><li>语法 <code>os.path.join(path1[,path2[,......]])</code></li></ul><pre class="line-numbers language-py"><code class="language-py"> # 合并目录>>> import os>>> os.path.join('/hello/','good/boy/','doiido')'/hello/good/boy/doiido'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="https://www.cnblogs.com/sui776265233/p/10755525.html" target="_blank" rel="noopener">博客网站</a></p></blockquote><h2 id="8-4-ord-amp-chr"><a href="#8-4-ord-amp-chr" class="headerlink" title="8.4 ord() &amp; chr()"></a>8.4 ord() &amp; chr()</h2><p>ord()<br>将字符转化为ascii码</p><p>chr()<br>将ascii码转化为字母或实际数字</p><pre class="line-numbers language-python"><code class="language-python">ord<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回ASCII码 97</span>chr<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 返回 字母'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="9-python中类的相关知识"><a href="#9-python中类的相关知识" class="headerlink" title="9. python中类的相关知识"></a>9. python中类的相关知识</h1><h2 id="9-1-类的定义和创建"><a href="#9-1-类的定义和创建" class="headerlink" title="9.1 类的定义和创建"></a>9.1 类的定义和创建</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义类，类名为Cname</span><span class="token keyword">class</span> <span class="token class-name">Cname</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 创建cname1实例</span>cname1 <span class="token operator">=</span> Cname<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-2-类中的实例属性与类属性"><a href="#9-2-类中的实例属性与类属性" class="headerlink" title="9.2 类中的实例属性与类属性"></a>9.2 类中的实例属性与类属性</h2><ul><li>实例属性：用于区分不同的实例，不同的类有不同的实例属性</li><li>类属性：是每个实例共有的属性，每个实例共有的属性</li></ul><h3 id="9-2-1-实例属性"><a href="#9-2-1-实例属性" class="headerlink" title="9.2.1 实例属性"></a>9.2.1 实例属性</h3><p><code>cname1.name = y</code> <code>cname2.name = q</code><br>每个实例有了name属性后就可以访问<br><code>print(cname1.name)</code> <code>print(cname2.name)</code></p><p>但是这样会比较麻烦，所以可以在每个实例中统一加上name属性</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cname</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 初始化一个属性r</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>__init__() 方法的第一个参数必须是 self</strong><br><em>self 代表类的实例，是通过类创建的实例</em></p><p>然后创建实例，就可以直接带上参数 <code>cname1 = Cname(y)</code><br>然后访问实例属性 <code>print(cname1.name)</code></p><h3 id="9-2-2-类属性"><a href="#9-2-2-类属性" class="headerlink" title="9.2.2 类属性"></a>9.2.2 类属性</h3><p>类的属性绑定后，所有实例都可以访问，而且<strong>实例访问的类属性都相同</strong><br><strong>实例属性每个实例各自拥有，互相独立，而类属性有且只有一份</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cname</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    zhongz <span class="token operator">=</span> <span class="token string">'people'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> namecname1 <span class="token operator">=</span> Cname<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>cname2 <span class="token operator">=</span> Cname<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cname1<span class="token punctuation">.</span>zhongz<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># people</span><span class="token keyword">print</span><span class="token punctuation">(</span>cname2<span class="token punctuation">.</span>zhongz<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># people</span><span class="token comment" spellcheck="true"># 通过类名修改了类属性后</span>Cname<span class="token punctuation">.</span>zhongz <span class="token operator">=</span> <span class="token string">'tenshi'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cname1<span class="token punctuation">.</span>zhongz<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># tenshi</span><span class="token keyword">print</span><span class="token punctuation">(</span>cname2<span class="token punctuation">.</span>zhongz<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># tenshi</span><span class="token comment" spellcheck="true"># 通过实例名修改了类属性</span>cname1<span class="token punctuation">.</span>zhongz <span class="token operator">=</span> <span class="token string">'mea'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cname1<span class="token punctuation">.</span>zhongz<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># mea</span><span class="token keyword">print</span><span class="token punctuation">(</span>cname2<span class="token punctuation">.</span>zhongz<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># tenshi</span><span class="token comment" spellcheck="true"># 删除了cname1的类属性zhongz后</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cname1<span class="token punctuation">.</span>zhongz<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># mea</span><span class="token keyword">del</span> cname1<span class="token punctuation">.</span>zhongz<span class="token keyword">print</span><span class="token punctuation">(</span>cname1<span class="token punctuation">.</span>zhongz<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># tenshi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>要修改类属性，不要再实例上修改，而是在类名上修改</strong></p><h2 id="9-3-类的实例方法"><a href="#9-3-类的实例方法" class="headerlink" title="9.3 类的实例方法"></a>9.3 类的实例方法</h2><p><strong>method</strong> is the <strong>function</strong> in <strong>class</strong> <del>英语四级差点没过的渣渣</del><br><strong>方法是表明这个类用是来做什么,方法就是类中的函数</strong></p><p><em>最简单的一个方法：打印属性</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cname</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    zhongz <span class="token operator">=</span> <span class="token string">'people'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">printname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印名字</span>cname1 <span class="token operator">=</span> Cname<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>cname2 <span class="token operator">=</span> Cname<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span>cname1<span class="token punctuation">.</span>printname<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># y</span>cname2<span class="token punctuation">.</span>printname<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># q</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>printname(self)</code>就是一个最简单的方法</p><h2 id="9-4-类中的访问限制"><a href="#9-4-类中的访问限制" class="headerlink" title="9.4 类中的访问限制"></a>9.4 类中的访问限制</h2><h3 id="9-4-1-属性的访问限制"><a href="#9-4-1-属性的访问限制" class="headerlink" title="9.4.1 属性的访问限制"></a>9.4.1 属性的访问限制</h3><p>python的类中的属性，如果有些属性不希望被外部访问，我们可以属性命名时以双下划线开头 <code>__</code>，如 <code>__age</code></p><blockquote><p>但，如果一个属性以”__xxx__“的形式定义，那么它可以被外部访问。以”__xxx__“定义的属性在Python的类中被称为特殊属性，有很多预定义的特殊属性是以“__xxx__”定义，所以我们不要把普通属性用”__xxx__“定义。</p></blockquote><blockquote><p><strong>加双下划线__xx 的属性，可以通过“ _类名__xx ”可以访问到属性的值 如<code>Cname._Cname__age</code></strong></p></blockquote><h3 id="9-4-2-方法的访问限制"><a href="#9-4-2-方法的访问限制" class="headerlink" title="9.4.2 方法的访问限制"></a>9.4.2 方法的访问限制</h3><p>在方法名前加双下划线，如<code>def __printage():</code><br>此时，该方法只能在类的内部使用，而无法被外部调用</p><h2 id="9-5-类中的装饰方法"><a href="#9-5-类中的装饰方法" class="headerlink" title="9.5 类中的装饰方法"></a>9.5 类中的装饰方法</h2><ul><li><code>@classmethod</code>    用来修饰类方法。使用在与类进行交互，但不和其实例进行交互的函数方法上</li><li><code>@staticmethod</code>   用来修饰静态方法。使用在有些与类相关函数，但不使用该类或该类的实例。如更改环境变量、修改其他类的属性等</li></ul><p><em>classmethod必须使用类的对象作为第一个参数，而staticmethod则可以不传递任何参数</em></p><h3 id="9-5-1-classmethod-修饰方法——类方法"><a href="#9-5-1-classmethod-修饰方法——类方法" class="headerlink" title="9.5.1 @classmethod 修饰方法——类方法"></a>9.5.1 @classmethod 修饰方法——类方法</h3><p>类方法，我们不用通过实例化类就能访问的方法。而且@classmethod 装饰的方法不能使用实例属性，只能是类属性。它主要使用在和类进行交互，但不和其实例进行交互的函数方法上。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cname</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    zhongz <span class="token operator">=</span> <span class="token string">'people'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">printname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">printwe</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>zhongz<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Cname.printname()   # 没有实例化 ，会发生错误</span>Cname<span class="token punctuation">.</span>printwe<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 没有实例化也可以访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>printwe(cls)中cls表示的是类，它和self类实例有一定的差别。类方法中都是使用cls，实例方法中使用self</p></blockquote><h3 id="9-5-2-staticmethod-修饰方法——静态方法"><a href="#9-5-2-staticmethod-修饰方法——静态方法" class="headerlink" title="9.5.2 @staticmethod 修饰方法——静态方法"></a>9.5.2 @staticmethod 修饰方法——静态方法</h3><p><code>@staticmethod</code> 不强制要求传递参数（它做的事与类方法或实例方法一样）<br><code>@staticmethod</code> 使用在有些和类相关函数，但不使用该类或者该类的实例。如更改环境变量、修改其他类的属性等<br><code>@staticmethod</code> 修饰的方法是放在类外的函数，我们为了方便将他移动到了类里面，它对类的运行无影响</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>   day <span class="token operator">=</span> <span class="token number">0</span>   month <span class="token operator">=</span> <span class="token number">0</span>   year <span class="token operator">=</span> <span class="token number">0</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> year<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       self<span class="token punctuation">.</span>day <span class="token operator">=</span> day       self<span class="token punctuation">.</span>month <span class="token operator">=</span> month       self<span class="token punctuation">.</span>year <span class="token operator">=</span> year   @classmethod   <span class="token keyword">def</span> <span class="token function">from_string</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> date_as_string<span class="token punctuation">)</span><span class="token punctuation">:</span>       year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day <span class="token operator">=</span> date_as_string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>       date <span class="token operator">=</span> cls<span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span>       <span class="token keyword">return</span> date    <span class="token comment" spellcheck="true"># 返回的是类的实例</span>   @staticmethod   <span class="token keyword">def</span> <span class="token function">is_date_valid</span><span class="token punctuation">(</span>date_as_string<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""      用来校验日期的格式是否正确       """</span>       year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day <span class="token operator">=</span> date_as_string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> int<span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3999</span> <span class="token operator">and</span> int<span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">12</span> <span class="token operator">and</span> int<span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">31</span>date1 <span class="token operator">=</span> Date<span class="token punctuation">.</span>from_string<span class="token punctuation">(</span><span class="token string">'2012-05-10'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span>year<span class="token punctuation">,</span> date1<span class="token punctuation">.</span>month<span class="token punctuation">,</span> date1<span class="token punctuation">.</span>day<span class="token punctuation">)</span>is_date <span class="token operator">=</span> Date<span class="token punctuation">.</span>is_date_valid<span class="token punctuation">(</span><span class="token string">'2012-09-18'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 格式正确 返回True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>is_date_valid(date_as_string) 只有一个参数，它的运行不会影响类的属性</p><blockquote><p>@staticmethod修饰方法 is_date_valid(date_as_string)中无实例化参数self或者cls；而@classmethod修饰的方法中有from_string(cls, date_as_string) 类参数cls</p></blockquote><h2 id="9-6-python中的property的使用"><a href="#9-6-python中的property的使用" class="headerlink" title="9.6 python中的property的使用"></a>9.6 python中的property的使用</h2><p>property的作用</p><ul><li>作为装饰器 @property将类方法转换为类属性（只读）</li><li>property重新实现一个属性的setter和getter方法</li></ul><h3 id="9-6-1-property将类方法转换为只读属性"><a href="#9-6-1-property将类方法转换为只读属性" class="headerlink" title="9.6.1 @property将类方法转换为只读属性"></a>9.6.1 @property将类方法转换为只读属性</h3><p>经常使用，将类的属性设置为不可修改</p><p>将一个类方法转变成一个类属性</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>   __pi <span class="token operator">=</span> <span class="token number">3.14</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>       self<span class="token punctuation">.</span>r <span class="token operator">=</span> r   @property   <span class="token keyword">def</span> <span class="token function">pi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> self<span class="token punctuation">.</span>__picircle1 <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>circle1<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>circle1<span class="token punctuation">.</span>pi<span class="token operator">=</span><span class="token number">3.14159</span>  <span class="token comment" spellcheck="true"># 出现AttributeError异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建实例后我们可以使用circle1.pi 自己获取方法的返回值，而且他只能读不能修改</p><h3 id="9-6-2-property重新实现setter和getter方法"><a href="#9-6-2-property重新实现setter和getter方法" class="headerlink" title="9.6.2 property重新实现setter和getter方法"></a>9.6.2 property重新实现setter和getter方法</h3><p>我也不太懂hhh</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>   __pi <span class="token operator">=</span> <span class="token number">3.14</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>       self<span class="token punctuation">.</span>r <span class="token operator">=</span> r   <span class="token keyword">def</span> <span class="token function">get_pi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> self<span class="token punctuation">.</span>__pi   <span class="token keyword">def</span> <span class="token function">set_pi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pi<span class="token punctuation">)</span><span class="token punctuation">:</span>       Circle<span class="token punctuation">.</span>__pi <span class="token operator">=</span> pi   pi <span class="token operator">=</span> property<span class="token punctuation">(</span>get_pi<span class="token punctuation">,</span> set_pi<span class="token punctuation">)</span>circle1 <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>circle1<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token number">3.14</span>  <span class="token comment" spellcheck="true"># 设置 pi的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>circle1<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 访问 pi的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们以这种方式使用属性函数时，它允许pi属性设置并获取值本身而不破坏原有代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>   __pi <span class="token operator">=</span> <span class="token number">3.14</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>       self<span class="token punctuation">.</span>r <span class="token operator">=</span> r   @property   <span class="token keyword">def</span> <span class="token function">pi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> self<span class="token punctuation">.</span>__pi   @pi<span class="token punctuation">.</span>setter   <span class="token keyword">def</span> <span class="token function">pi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pi<span class="token punctuation">)</span><span class="token punctuation">:</span>       Circle<span class="token punctuation">.</span>__pi <span class="token operator">=</span> picircle1 <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>circle1<span class="token punctuation">.</span>pi <span class="token operator">=</span> <span class="token number">3.14</span>  <span class="token comment" spellcheck="true"># 设置 pi的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>circle1<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 访问 pi的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把一个getter方法变成属性，只需要加上@property就可以了，如上此时pi(self)方法，@property本身又创建了另一个装饰器@pi.setter，负责把一个setter方法变成属性赋值，于是，将@pi.setter加到pi(self, pi)上，我们就拥有一个可控的属性操作</p><blockquote><p>参考<a href="https://www.zhihu.com/people/lyzf" target="_blank" rel="noopener">知乎大佬</a>的<a href="https://zhuanlan.zhihu.com/p/30223570" target="_blank" rel="noopener">教程</a><br>感谢大佬让我搞懂了python的类，虽然最后的不太懂，但是基础是懂了</p></blockquote><p>接着学aaaaaaa</p><h2 id="9-7-类的继承-—-大师，我悟了"><a href="#9-7-类的继承-—-大师，我悟了" class="headerlink" title="9.7 类的继承  — 大师，我悟了"></a>9.7 类的继承  — 大师，我悟了</h2><h3 id="9-7-1-类的继承"><a href="#9-7-1-类的继承" class="headerlink" title="9.7.1 类的继承"></a>9.7.1 类的继承</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#  python3中所有类都可以继承于object基类</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>       self<span class="token punctuation">.</span>name <span class="token operator">=</span> name       self<span class="token punctuation">.</span>age <span class="token operator">=</span> age   <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'会叫'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 现在我们需要定义一个Cat猫类继承于Animal，猫类比动物类多一个sex属性。</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">:</span>       super<span class="token punctuation">(</span>Cat<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不要忘记从Animal类引入属性</span>       self<span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 单模块被引用时下面代码不会受影响，用于调试</span>   c <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">'喵喵'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#  Cat继承了父类Animal的属性</span>c<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出 喵喵 会叫 ，Cat继承了父类Animal的方法 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我悟了：类的继承一般都是object，然后如果想要继承自己的类，则可以把object继承对象改一下，原来类名后括号里的东西是继承对象</p><p>一定要用 <code>super(Cat, self).__init__(name,age)</code> 去初始化父类，否则，继承自 Animal的 Cat子类将没有 <code>name</code> 和 <code>age</code> 两个属性</p><p>函数<code>super(Cat, self)</code>将返回当前类继承的父类，即 Animal，然后调用<code>__init__()</code>方法，注意self参数已在<code>super()</code>中传入，在<code>__init__()</code>中将隐式传递，不能再写出self</p><h3 id="9-7-2-Python对子类方法的重构"><a href="#9-7-2-Python对子类方法的重构" class="headerlink" title="9.7.2 Python对子类方法的重构"></a>9.7.2 Python对子类方法的重构</h3><p>子类中的方法要求跟父类中的方法不同时，可以在子类中重构方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">:</span>       super<span class="token punctuation">(</span>Cat<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>       self<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex   <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'会“喵喵”叫'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   c <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">'喵喵'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span>   c<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出：喵喵 会“喵喵”叫</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们在子类中重构父类的方法后，Cat子类的实例先会在自己的类Cat中查找该方法，当找不到该方法时才会去父类Animal中查找对应的方法</p><h3 id="9-7-3-Python中子类与父类的关系"><a href="#9-7-3-Python中子类与父类的关系" class="headerlink" title="9.7.3 Python中子类与父类的关系"></a>9.7.3 Python中子类与父类的关系</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">pass</span>A<span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span>C <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>“A”是Animal类的实例，但，“A”不是Cat类的实例。</li><li>“C”是Animal类的实例，“C”也是Cat类的实例。</li></ul><p>函数 <code>isinstance(变量,类型)</code><br>判断变量的类型，判断对象之间的关系</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'"A" IS Animal?'</span><span class="token punctuation">,</span> isinstance<span class="token punctuation">(</span>A<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'"A" IS Cat?'</span><span class="token punctuation">,</span> isinstance<span class="token punctuation">(</span>A<span class="token punctuation">,</span> Cat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'"C" IS Animal?'</span><span class="token punctuation">,</span> isinstance<span class="token punctuation">(</span>C<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'"C" IS Cat?'</span><span class="token punctuation">,</span> isinstance<span class="token punctuation">(</span>C<span class="token punctuation">,</span> Cat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出</span><span class="token string">"A"</span> IS Animal? <span class="token boolean">True</span><span class="token string">"A"</span> IS Cat? <span class="token boolean">False</span><span class="token string">"C"</span> IS Animal? <span class="token boolean">True</span><span class="token string">"C"</span> IS Cat? <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-7-4-python中多态"><a href="#9-7-4-python中多态" class="headerlink" title="9.7.4 python中多态"></a>9.7.4 python中多态</h3><p>类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 Animal派生出 Cat和Dog，并都写了一个 call() 方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>       self<span class="token punctuation">.</span>name <span class="token operator">=</span> name       self<span class="token punctuation">.</span>age <span class="token operator">=</span> age   <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'会叫'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">:</span>       super<span class="token punctuation">(</span>Cat<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>       self<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex   <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'会“喵喵”叫'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">:</span>       super<span class="token punctuation">(</span>Dog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>       self<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex   <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'会“汪汪”叫'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们定义一个do函数，接收一个变量 ‘all’,如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">do</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">:</span>   all<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>A <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token string">'小黑'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>C <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">'喵喵'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span>D <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">)</span><span class="token punctuation">:</span>   do<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出结果</span><span class="token comment" spellcheck="true"># 小黑 会叫</span><span class="token comment" spellcheck="true"># 喵喵 会“喵喵”叫</span><span class="token comment" spellcheck="true"># 旺财 会“汪汪”叫</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种行为称为多态。也就是说，方法调用将作用在 all 的实际类型上。C 是 Cat 类型，它实际上拥有自己的 call() 方法以及从 Animal 继承的 call 方法<br>而调用 C .call() 总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止</p><blockquote><p>注意事项</p><ul><li>在继承中基类的构造方法（<code>__init__()方法</code>）不会被自动调用，它需要在其派生类的构造方法中亲自专门调用。</li><li>在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。而在类中调用普通函数时并不需要带上self参数</li><li>Python总是首先查找对应类的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）</li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github的一些基本知识</title>
      <link href="/2020/02/09/tools-github/"/>
      <url>/2020/02/09/tools-github/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="1-Github"><a href="#1-Github" class="headerlink" title="1. Github"></a>1. Github</h2><h3 id="1-1-搜索技巧"><a href="#1-1-搜索技巧" class="headerlink" title="1.1 搜索技巧"></a>1.1 搜索技巧</h3><h4 id="①-in-name-spring-boot"><a href="#①-in-name-spring-boot" class="headerlink" title="① in:name spring boot"></a>① in:name spring boot</h4><p>名字里带 spring boot，在 name 中搜</p><h4 id="②-in-readme-spring-boot"><a href="#②-in-readme-spring-boot" class="headerlink" title="② in:readme spring boot"></a>② in:readme spring boot</h4><p>readme 中带 spring boot，在 readme 中搜</p><h4 id="③-in-description"><a href="#③-in-description" class="headerlink" title="③ in:description"></a>③ in:description</h4><p>在描述中搜</p><h4 id="④-stars-gt-3000"><a href="#④-stars-gt-3000" class="headerlink" title="④ stars:>3000"></a>④ stars:&gt;3000</h4><p>stars 多于 3000 的数据库</p><h4 id="⑤-forks-gt-3000"><a href="#⑤-forks-gt-3000" class="headerlink" title="⑤ forks:>3000"></a>⑤ forks:&gt;3000</h4><p>forks 多于 3000 的数据库</p><h4 id="⑥-language-java"><a href="#⑥-language-java" class="headerlink" title="⑥ language:java"></a>⑥ language:java</h4><p>java 语言的数据库</p><h4 id="⑦-push-gt-2019-02-01"><a href="#⑦-push-gt-2019-02-01" class="headerlink" title="⑦ push:>2019-02-01"></a>⑦ push:&gt;2019-02-01</h4><p>在 2019.02.01 以后有过更新的数据库</p><blockquote><p>在<a href="https://www.bilibili.com/video/av75587104" target="_blank" rel="noopener">大佬 b 站视频</a>中学习</p></blockquote><h2 id="2-Git"><a href="#2-Git" class="headerlink" title="2. Git"></a>2. Git</h2><h3 id="2-1-git-使用"><a href="#2-1-git-使用" class="headerlink" title="2.1 git 使用"></a>2.1 git 使用</h3><ul><li>git add .</li><li>git commit -m ‘title’</li><li>git push</li><li>git pull</li><li>git clone https://……..</li></ul><h3 id="2-2-gitignore-文件"><a href="#2-2-gitignore-文件" class="headerlink" title="2.2 .gitignore 文件"></a>2.2 .gitignore 文件</h3><table><thead><tr><th align="center">例子</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">/mtk</td><td align="center">过滤整个文件夹</td></tr><tr><td align="center">*.zip</td><td align="center">过滤所有.zip 文件</td></tr><tr><td align="center">/mtk/do.c</td><td align="center">过滤某个具体文件</td></tr><tr><td align="center">!/mtk/one.txt</td><td align="center">追踪（不过滤）某个具体文件</td></tr></tbody></table><pre><code>配置语法以斜杠“/”开头表示目录；以星号“*”通配多个字符；以问号“?”通配单个字符以方括号“[]”包含单个字符的匹配列表；以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。注意： git 对于 .gitignore配置文件是按行从上到下进行规则匹配的</code></pre><ul><li><em>如果你创建.gitignore 文件之前就 push 了某一文件，那么即使你在.gitignore 文件中写入过滤该文件的规则，该规则也不会起作用，git 仍然会对该文件进行版本管理</em></li><li><strong>.gitignore 规则不生效</strong><br><em>.gitignore 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore 是无效的</em></li><li><strong>解决方法</strong><br><strong>解决方法就是先把本地缓存删除（改变成未 track 状态），然后再提交</strong></li></ul><pre><code>git rm -r --cached .git add .git commit -m 'update .gitignore'</code></pre><ul><li><strong>Git 忽略文件提交的三种方法</strong></li><li><strong>1、在 Git 项目中定义 .gitignore 文件</strong><br>这种方式通过在项目的某个文件夹下定义 .gitignore 文件，在该文件中定义相应的忽略规则，来管理当前文件夹下的文件的 Git 提交行为<br>在 .gitingore 文件中，遵循相应的语法，在每一行指定一个忽略规则</li><li><strong>2、在 Git 项目的设置中指定排除文件</strong><br>这种方式只是临时指定该项目的行为，需要编辑当前项目下的 .git/info/exclude 文件，然后将需要忽略提交的文件写入其中<br><em>这种方式指定的忽略文件的根目录是项目根目录</em></li><li><strong>3、定义 Git 全局的 .gitignore 文件</strong><br>除了可以在项目中定义 .gitignore 文件外，还可以设置全局的 git .gitignore 文件来管理所有 Git 项目的行为。这种方式在不同的项目开发者之间是不共享的，是属于项目之上 Git 应用级别的行为</li></ul><pre><code>Git 忽略规则匹配语法在 .gitignore 文件中，每一行的忽略规则的语法如下：空格不匹配任意文件，可作为分隔符，可用反斜杠转义# 开头的模式标识注释，可以使用反斜杠进行转义! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义/ 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件/ 开始的模式匹配项目跟目录如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录**匹配多级目录，可在开始，中间，结束?通用匹配单个字符[]通用匹配单个字符列表</code></pre><blockquote><p>作者：王伟 desire</p></blockquote><pre><code>链接：https://www.jianshu.com/p/74bd0ceb6182来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><h3 id="2-3-cmder-命令操作文件和文件夹"><a href="#2-3-cmder-命令操作文件和文件夹" class="headerlink" title="2.3 cmder 命令操作文件和文件夹"></a>2.3 cmder 命令操作文件和文件夹</h3><p>常用命令</p><ul><li>切换目录 cd：change directory 的简写，如：cd d:aa/nn 意思就是切换到 d 盘下的 aa 文件夹下的 nn 文件夹</li><li>回到上一目录 cd .. 这个结合我们写 js 或者 css 时，引用文件时写为../lib/aa.js 所以这个很好理解 需要注意的是在 cd 和..之间有个空格</li><li>创建文件 touch 如：touch aa.te 意思就是在当前目录下创建一个名为 aa.te 的文件</li><li>删除文件 rm 是 remove 的简写 如：rm aa.te 意思就为删除当前目录下的 aa.te 文件</li><li>创建文件夹 mkdir 为 make directory 的简写，如 mkdir aa 即为在当前目录下创建一个 aa 文件夹</li><li>删除文件夹 rm -r 其中的 r 表示递归（recusive）的意思，意思就是先删除文件夹里的文件在删除文件夹，如：rm -r aa 意思为删除 aa 文件夹下的文件和 aa 文件夹自己</li><li>打印当前目录路劲 pwd 为 print working directory 的简写，</li><li>显示当前目录下的所有文件列表 ls 为 list 的简写，当然也可以用 ll 命令，它比 ls 显示的内容更加详细，但是 ll 在 cmder 中不可用</li><li>清屏 cmder 中为 cls 和 clear 均可，reset 无效， 而在 bash 中 clear 和 reset 均可，cls 无效；</li></ul><p><img src="/img/cmder.png" alt="cmder"></p><blockquote><p>版权声明：本文为 CSDN 博主「LeonWuV」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br><a href="https://blog.csdn.net/wxl1555/article/details/79887591" target="_blank" rel="noopener">原文链接</a></p></blockquote><h3 id="2-4-更加基础的-cmd-命令"><a href="#2-4-更加基础的-cmd-命令" class="headerlink" title="2.4 更加基础的 cmd 命令"></a>2.4 更加基础的 cmd 命令</h3><ul><li>mkdir <code>mkdir 文件夹名</code> 新建文件夹</li><li>touch <code>touch 文件名</code>新建文件<ul><li>另一种方法：<code>cd .&gt;user.js</code> // 在当前目录下新建 user.js 文件</li></ul></li><li>rm/del <code>rm 文件名</code> <code>del 文件名</code>删除文件</li><li>rmdir <code>rmdir 空文件夹名</code>删除空文件夹<ul><li><code>rmdir /s/q 文件夹名</code>删除文件夹及内的全部文件 /s -删除全部子目录及内容，/q - 不显示 Y/N 询问</li><li><code>rmdir /s/q d:\multify\my-multify</code> 删除 D 盘 multify 文件夹下的 my-multify 文件夹以及子内容，并且不提示</li></ul></li><li>rename<code>rename 1.txt 1.bat</code> 文件重命名</li><li><code>echo 111&gt;&gt;1.txt</code> 将 111 写进 1.txt 中，cmd 文本编辑<ul><li><code>echo .&gt;&gt;1.txt</code> 换行写</li><li><code>for /f %i in ('type 1.txt') do md %i</code>以一个 txt 文件中的内容为名称创建文件(夹)</li><li><code>copy con 1.txt</code> 然后将内容写入 1.txt 文件中(好像只能覆盖)</li></ul></li><li><code>type 文件名</code> 查看文本文件内容</li><li><code>move 路径/文件名 路径</code> 移动文件<ul><li><code>move 路径\*.* 路径\</code> 移动所有文件</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本知识</title>
      <link href="/2020/02/08/learn-markdown/"/>
      <url>/2020/02/08/learn-markdown/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="1-空格"><a href="#1-空格" class="headerlink" title="1. 空格"></a>1. 空格</h2><table><thead><tr><th align="center">语法</th><th align="center">example</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>ok&amp;nbsp;ok</code>&nbsp;</td><td align="center">ok&nbsp;ok</td><td align="center">它是按下 space 键产生的空格,叫不换行空格，全称是 No-Break Space</td></tr><tr><td align="center"><code>ok&amp;ensp;ok</code> </td><td align="center">ok ok</td><td align="center">等同于字体度的一半,叫“半角空格”，全称是 En Space</td></tr><tr><td align="center"><code>ok&amp;emsp;ok</code> </td><td align="center">ok ok</td><td align="center">1 em 在 16px 的字体中就是 16px,它叫“全角空格”，全称是 Em Space</td></tr><tr><td align="center"><code>ok&amp;thinsp;ok</code> </td><td align="center">ok ok</td><td align="center">“窄空格”，全称是 Thin Space。占据的宽度比较小。它是 em 之六分之一宽</td></tr><tr><td align="center"><code>ok&amp;zwj;ok</code>‍</td><td align="center">ok‍ok</td><td align="center">它叫零宽连字，全称是 Zero Width Joiner，简称“ZWJ”，是一个不打印字符</td></tr></tbody></table><blockquote><p>参考<a href="https://www.jianshu.com/p/31eade263e7a" target="_blank" rel="noopener" title="简书">网站</a></p></blockquote><h2 id="2-链接"><a href="#2-链接" class="headerlink" title="2. 链接"></a>2. 链接</h2><h3 id="2-1-行内式-方便简洁"><a href="#2-1-行内式-方便简洁" class="headerlink" title="2.1 行内式(方便简洁)"></a>2.1 行内式(方便简洁)</h3><p><code>[链接文字](链接网址 "标题")</code><br><code>This is an [example link](https://www.jianshu.com/p/31eade263e7a)</code><br>会显示为:&nbsp;This is an <a href="https://www.jianshu.com/p/31eade263e7a" target="_blank" rel="noopener">example link</a></p><h3 id="2-2-锚点"><a href="#2-2-锚点" class="headerlink" title="2.2 锚点"></a>2.2 锚点</h3><ul><li>第一种</li></ul><pre><code>- [测试](#测试)### &lt;a id="测试"&gt;测试&lt;/a&gt;</code></pre><ul><li><a href="#测试">测试</a></li></ul><ul><li>第二种</li></ul><pre><code>### &lt;a href="#测试2"&gt;测试2&lt;/a&gt;html&lt;a id="测试2"&gt;测试2&lt;/a&gt;</code></pre><ul><li><a href="#测试2">测试 2</a></li></ul><blockquote><p>参考<a href="https://blog.csdn.net/wangzhibo666/article/details/88731227" target="_blank" rel="noopener" title="CSDN">link</a></p></blockquote><h2 id="3-图片"><a href="#3-图片" class="headerlink" title="3. 图片"></a>3. 图片</h2><h3 id="3-1-网络图片的添加"><a href="#3-1-网络图片的添加" class="headerlink" title="3.1 网络图片的添加"></a>3.1 网络图片的添加</h3><pre><code>![alt 属性文本](图片地址)![alt 属性文本](图片地址 "可选标题")</code></pre><pre><code>![四月是你的谎言](https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=905665511,4125694826&amp;fm=26&amp;gp=0.jpg "四谎")</code></pre><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=905665511,4125694826&amp;fm=26&amp;gp=0.jpg" alt="四月是你的谎言" title="四谎"></p><h3 id="3-2-本地图片的添加"><a href="#3-2-本地图片的添加" class="headerlink" title="3.2 本地图片的添加"></a>3.2 本地图片的添加</h3><pre><code>![avatar](/img/picture_exam.jpeg "example")--or--&lt;img src="/img/picture_exam.jpeg " width = 10% height = 10% div align=right /&gt;# 或者是#&lt;img src="url" width = "100" height = "100" div align=left /&gt;</code></pre><p><img src="/img/picture_exam.jpeg" alt="avatar" title="example"><br><img src="/img/picture_exam.jpeg " width="10%" height="10%" div="" align="right"></p><h2 id="4-表格"><a href="#4-表格" class="headerlink" title="4. 表格"></a>4. 表格</h2><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :----- | -----: | :------: || 单元格 | 单元格 |  单元格  || 单元格 | 单元格 |  单元格  |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><blockquote><p>参考教程:<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">markdown</a></p></blockquote><h2 id="5-设置字体大小颜色"><a href="#5-设置字体大小颜色" class="headerlink" title="5. 设置字体大小颜色"></a>5. 设置字体大小颜色</h2><pre><code>&lt;font face="黑体"&gt;我是黑体字&lt;/font&gt;&lt;font face="微软雅黑"&gt;我是微软雅黑&lt;/font&gt;&lt;font face="STCAIYUN"&gt;我是华文彩云&lt;/font&gt;&lt;font color=#0099ff size=7 face="黑体"&gt;color=#0099ff size=72 face="黑体"&lt;/font&gt;&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;&lt;font color=gray size=72&gt;color=gray&lt;/font&gt;</code></pre><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="7" face="黑体">color=#0099ff size=72 face=”黑体”</font><br><font color="#00ffff" size="72">color=#00ffff</font><br><font color="gray" size="72">color=gray</font></p><ul><li><p><a id="测试">锚点测试</a></p></li><li><p><a id="测试2">锚点测试 2</a></p><blockquote><p>参考网站:<a href="https://blog.csdn.net/weixin_37998647/article/details/79428290" target="_blank" rel="noopener" title="CSDN">CSDN</a></p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spider-Note</title>
      <link href="/2020/02/08/note-spider/"/>
      <url>/2020/02/08/note-spider/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考 Github 上的<a href="https://github.com/kingname/SourceCodeOfBook" target="_blank" rel="noopener" title="Github">教程</a>学习<br>一个连 python 都没有完全学会的菜鸡来学爬虫</p></blockquote><a id="more"></a><h1 id="1-线程"><a href="#1-线程" class="headerlink" title="1. 线程"></a>1. 线程</h1><h2 id="1-1-线程-Pool"><a href="#1-1-线程-Pool" class="headerlink" title="1.1 线程 Pool"></a>1.1 线程 Pool</h2><pre class="line-numbers language-py"><code class="language-py">from multiprocessing.dummy import Pooldef calc_power2(num):return num*numpool = Pool(5)origin_num = [x for x in range(10)]result = pool.map(calc_power2,origin_num)print(f'0~9的平方分别为：{result}')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Pool(5)</code>  五个线程</p><hr><h2 id="1-2-所用函数"><a href="#1-2-所用函数" class="headerlink" title="1.2 所用函数"></a>1.2 所用函数</h2><p><code>time.time()</code> &nbsp; 程序当前时间<br>eg：用来对比单线程和多线程访问 baidu 的速度</p><h1 id="2-request-库"><a href="#2-request-库" class="headerlink" title="2. request 库"></a>2. request 库</h1><h2 id="2-1-基础用法"><a href="#2-1-基础用法" class="headerlink" title="2.1 基础用法"></a>2.1 基础用法</h2><pre class="line-numbers language-py"><code class="language-py">url = ''headers = {    "UserAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like\ Gecko) Chrome/80.0.3987.87 Safari/537.36 Edg/80.0.361.48"}response = requests.get(url,headers=headers)response.encoding = 'utf-8'  #或者GBKhtml = response.text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-进阶用法"><a href="#2-2-进阶用法" class="headerlink" title="2.2 进阶用法"></a>2.2 进阶用法</h2><ul><li><strong>使用 requests 模拟发送 get 请求</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">import requestsurl = 'http://exercise.kingname.info/ajax_1_backend'html = requests.get(url).content.decode()print(html)# 如果你看到这一段文字，说明你已经成功访问了这个页面,并获取了GET方式的异步加载数据。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用 requests 模拟发送 post 请求</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">import requestsurl = 'http://exercise.kingname.info/ajax_1_postbackend'html = requests.post(url,json={'name':'yunq','age':24}).content.decode()print(html)# 如果你看到这一段文字，说明你已经成功访问了这个页面，并获取了POST方式的异步加载数据。你向服务器提交的两个参数，分别为name： yunq, age：24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="http://exercise.kingname.info/exercise_ajax_1.html" target="_blank" rel="noopener">学习网站</a>，(<a href="#异步GET与POST请求">异步 GET 与 POST 请求</a>)</p></blockquote><h1 id="3-re-库"><a href="#3-re-库" class="headerlink" title="3. re 库"></a>3. re 库</h1><h2 id="3-1-基础用法"><a href="#3-1-基础用法" class="headerlink" title="3.1 基础用法"></a>3.1 基础用法</h2><pre class="line-numbers language-py"><code class="language-py">re.findall(r'',html,re.S)   #返回一个列表，这是一个列表所以可以取第一个数据                            #re.findall(r'',html,re.S)[0]re.search(r'',html,re.S)    #返回一个re.Match类型数据                            #<re.Match object; span=(214, 297), match='secret = \'{"code": "\\u884c\\u52a8\\u4ee3\\u53f7>re.search(r'href="sf">(.*?)<').group()                            #返回一个字符串             #.*?是匹配到的内容                            #group()返回的是''内的字符串内容:href="sf">(.*?)<                            #group(1)返回的是()中的字符串内容:.*?                            #如果(.*?)有多个，则使用group(1),group(2)........<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-正则表达式"><a href="#4-正则表达式" class="headerlink" title="4. 正则表达式"></a>4. 正则表达式</h1><p><code>.*?</code></p><h1 id="5-Xpath–lxml-库"><a href="#5-Xpath–lxml-库" class="headerlink" title="5. Xpath–lxml 库"></a>5. Xpath–lxml 库</h1><ul><li>XPath 是一种查询语言，能从 XML\HTML 的树状结构中寻找节点</li></ul><h2 id="5-1-XPath-语法"><a href="#5-1-XPath-语法" class="headerlink" title="5.1 XPath 语法"></a>5.1 XPath 语法</h2><h3 id="5-1-1-XPath-语法解析"><a href="#5-1-1-XPath-语法解析" class="headerlink" title="5.1.1 XPath 语法解析"></a>5.1.1 XPath 语法解析</h3><pre class="line-numbers language-html"><code class="language-html">example_html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useful<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我需要的信息1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我需要的信息2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我需要的信息3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useless<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>垃圾1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>垃圾2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>info = selector.xpath('//div[@class="useful"]/ul/li/text()')</code><br>就可以提取出 class=”userful”中的三句话，返回一个列表</p><h3 id="5-1-2-基本框架"><a href="#5-1-2-基本框架" class="headerlink" title="5.1.2 基本框架"></a>5.1.2 基本框架</h3><pre class="line-numbers language-py"><code class="language-py">import lxml.htmlselector = lxml.html.fromstring('网页源代码')    #网页源代码可用requests来获取info = selector.xpath('一段XPath语句')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-1-3-example"><a href="#5-1-3-example" class="headerlink" title="5.1.3 example"></a>5.1.3 example</h3><pre class="line-numbers language-py"><code class="language-py">import lxml.htmlsource = '''<html>    <head>         <title>测试</title>    </head>    <body>         <div class="useful"> <ul>                   <li class="info">我需要的信息1</li>                   <li class="info">我需要的信息2</li>                   <li class="info">我需要的信息3</li> </ul>         </div>         <div class="useless">              <ul>                   <li class="info">垃圾1</li>                   <li class="info">垃圾2</li>              </ul>         </div>     </body></html>'''selector = lxml.html.fromstring(source)info = selector.xpath('//div[@class="useful"]/ul/li/text()')print(info)         #['我需要的信息1', '我需要的信息2', '我需要的信息3']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>a.<strong>XPath 语句格式</strong><br><code>info = selector.xpath('一段XPath语句')</code>中’一段 XPath 语句’的格式<br>核心思想：XPath 就是写地址<br>获取文本：<code>//标签1[@属性1="属性值1"]/标签2[@属性2="属性值2"]/..../text()</code><br>获取属性值：<code>//标签1[@属性1="属性值1"]/标签2[@属性2="属性值2"]/..../@属性n</code><br>其中的<code>[@属性="属性值"]</code>不是必需的，其作用是帮助过滤相同的标签，无相同标签可省略</li><li>b.<strong>标签 1 的选取</strong><br>标签 1 可以直接从 html 这个最外层的标签开始，一层一层往下找，这个时候，XPath 语句是这样的：<br><code>/html/body/div[@class="useful"]/ul/li/text()</code><br>但是由于前面的’/html/body’是所有 HTML 通用的，而且没有属性，所以可不写，即带属性标签前的标签都可以省略</li><li>c.<strong>可以省略的属性</strong><br>1、本身标签没有属性<br>2、这个标签所有的属性值相同</li><li>d.<strong>XPath 的特殊情况</strong><br>1、以相同字符串开头<code>标签[starts-with(@属性,"开头字符串")]</code></li></ul><pre class="line-numbers language-py"><code class="language-py">    <div id="test-1">需要的内容1</div>    <div id="test-2">需要的内容2</div>    <div id="testfault">需要的内容3</div>    <div id="useless">这是我不需要的内容</div>    content = selector.xpath('//div[starts-with(@id,"test")]/text()')    print(content)      #['需要的内容1','需要的内容3','需要的内容2']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、属性值包含相同字符串<code>标签[contains(@属性,"相同字符串")]</code><br>3、对 XPath 返回的对象执行 XPath</p><pre class="line-numbers language-py"><code class="language-py">useful = selector.xpath('//div[@class="useful"]')   #这里返回一个列表info_list = useful[0].xpath('ul/li/text()')         #useful[0]即为列表中第一个数据print(info_list)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、不同标签下的文字</p><pre class="line-numbers language-py"><code class="language-py">import lxml.htmlhtml = '''<!DOCTYPE html><html><head lang="en">    <meta charset="UTF-8">    <title></title></head><body><div id="test3">        我左青龙，        <span id="tiger">        右白虎，            <ul>上朱雀，                <li>下玄武。</li>            </ul>        老牛在当中，        </span>        龙头在胸口。    </div></body></html>'''#如果直接提取id="test3"selector = lxml.html.fromstring(html)content_1 = selector.xpath('//div[@id="test3"]/text()')print(content_1)   #['\n        我左青龙，\n        ', '\n        龙头在胸口。\n    ']#只会提取到div标签中的文字信息，而不会自动提取子标签中的信息#这时就需要用string(.)关键字了selector = lxml.html.fromstring(html)data = selector.xpath('//div[@id="test3"]')[0]info = data.xpath('string(.)')print(info)     #就可以提取出所有的文本信息了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-XPath-通过-chrome-辅助构造"><a href="#5-2-XPath-通过-chrome-辅助构造" class="headerlink" title="5.2 XPath 通过 chrome 辅助构造"></a>5.2 XPath 通过 chrome 辅助构造</h2><p>在一行源码单击右键，选择“Copy”→“Copy XPath”命令<br>把结果粘贴下来，可以看到如下的 XPath 语句：<br><code>//*[@id="thread_list"]/li[2]/div/div[2]/div[1]/div[1]/a</code><br><em>其中方括号中的数字，表示这是第几个该标签，但需要注意，这里的数字是从 1 开始</em></p><h1 id="6-Beautiful-Soup4-库-BS4"><a href="#6-Beautiful-Soup4-库-BS4" class="headerlink" title="6. Beautiful Soup4 库(BS4)"></a>6. Beautiful Soup4 库(BS4)</h1><p><em>BS4 在某些方面比 XPath 易懂，但是不如 XPath 简洁，而且由于它是使用 Python 开发的，因此速度比 XPath 慢。</em><br>使用 Beautiful Soup4 提取 HTML 内容，一般要经过以下两步。</p><h2 id="6-1-bs4-处理步骤"><a href="#6-1-bs4-处理步骤" class="headerlink" title="6.1 bs4 处理步骤"></a>6.1 bs4 处理步骤</h2><ul><li>1)处理源代码生成 BeautifulSoup 对象。<br>解析源代码生成 BeautifulSoup 对象，使用以下代码：<br><code>soup = BeautifulSoup(网页源代码, '解析器')</code><br>解析器：<br>这里的“解析器”，可以使用 html.parser：<br><code>soup = BeautifulSoup(source, 'html.parser')</code><br>如果安装了 lxml，还可以使用 lxml：<br><code>soup = BeautifulSoup(source, 'lxml')</code></li><li>2)使用 find<em>all()或者 find()来查找内容。<br>`soup.find(class</em>=’属性值’)`<br><em>由于 HTML 中的 class 属性与 Python 的 class 关键字相同，因此为了不产生冲突，BS4 规定，如果遇到要查询 class 的情况，使用“class_”来代替</em></li></ul><h2 id="6-2-example"><a href="#6-2-example" class="headerlink" title="6.2 example"></a>6.2 <a href="http://exercise.kingname.info/exercise_bs_1.html" target="_blank" rel="noopener">example</a></h2><pre class="line-numbers language-py"><code class="language-py">import requestfrom bs4 import BeautifulSouphtml = requests.get('http://exercise.kingname.info/exercise_bs_1.html').content.decode()# 1、解析源代码soup = BeautifulSoup(html,'lxml')# 2、查找内容info = soup.find(class_= 'test')print(info.string)      #我需要的信息2# 先抓大，再抓小useful = soup.find(class_='useful')all_content = useful.find_all('li')for li in all_content:    print(li.string)        #我需要的信息1                            #我需要的信息2                            #我需要的信息3    print(li)               #<li class="info">我需要的信息1</li>                            #<li class="test">我需要的信息2</li>                            #<li class="iamstrange">我需要的信息3</li>    print(li['class'])      #['info']                            #['test']                            #['iamstrange']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他查找方法<br><strong>以‘我需要’为开头的信息</strong><br><code>content = soup.find_all(text = re.compile('我需要'))</code><br><strong>对属性值搜素使用正则,即对 iamstrang 属性值搜索</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">content = soup.find_all(class_=re.compile('iam'))[0]print(content.string)       #我需要的信息3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="7-异步加载与请求头"><a href="#7-异步加载与请求头" class="headerlink" title="7. 异步加载与请求头"></a>7. 异步加载与请求头</h1><h2 id="7-1-异步加载"><a href="#7-1-异步加载" class="headerlink" title="7.1 异步加载"></a>7.1 异步加载</h2><p><em>异步加载：一个页面，点击后网址不变，页面改变</em></p><h3 id="7-1-1-AJAX-技术"><a href="#7-1-1-AJAX-技术" class="headerlink" title="7.1.1 AJAX 技术"></a>7.1.1 AJAX 技术</h3><ul><li>AJAX 是 Asynchronous JavaScript And XML 的首字母缩写，意为异步 JavaScript 与 XML</li><li>使用 AJAX 技术，可以在不刷新网页的情况下更新网页数据。使用 AJAX 技术的网页，一般会使用 HTML 编写网页的框架。</li><li>在打开网页的时候，首先加载的是这个框架。剩下的部分将会在框架加载完成以后再通过 JavaScript 从后台加载。</li></ul><h3 id="7-1-2-JSON"><a href="#7-1-2-JSON" class="headerlink" title="7.1.2 JSON"></a>7.1.2 JSON</h3><ul><li>JSON 的全称是 JavaScript Object Notation，是一种轻量级的数据交换格式。网络之间使用 HTTP 方式传递数据的时候，绝大多数情况下传递的都是字符串。</li><li>因此，当需要把 Python 里面的数据发送给网页或者其他编程语言的时候，可以先将 Python 的数据转化为 JSON 格式的字符串，然后将字符串传递给其他语言，其他语言再将 JSON 格式的字符串转换为它自己的数据格式</li><li><strong>列表\字典与字符串相互转化</strong></li><li><em>python 中字典 or 列表 与 json 格式字符串的相互转化</em></li></ul><pre class="line-numbers language-py"><code class="language-py">import jsondata = {    'name' : 'Connor',    'sex' : 'boy',    'age' : 26}print(data)     #dict   #{'name': 'Connor', 'sex': 'boy', 'age': 26}data1=json.dumps(data)print(data1)    #str    #{"name": "Connor", "sex": "boy", "age": 26}data2=json.loads(data1)print(data2)    #dict   #{'name': 'Connor', 'sex': 'boy', 'age': 26}# 如果加上indent=4参数data3 = json.dumps(data,indent=4)print(data3)    #str#结果更加的美观易读'''{    "name": "Connor",    "sex": "boy",    "age": 26}'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>str=json.dumps(dict)</strong></li><li><strong>dict=json.loads(str)</strong></li></ul><h3 id="7-1-3-异步-GET-与-POST-请求"><a href="#7-1-3-异步-GET-与-POST-请求" class="headerlink" title="7.1.3 异步 GET 与 POST 请求"></a>7.1.3 异步 GET 与 POST 请求</h3><ul><li>使用异步加载技术的网站，被加载的内容是不能在源代码中找到的。</li><li>为了解决这个问题，就需要使用 Google Chrome 浏览器的开发者模式。在网页上单击右键，选择“检查”命令，然后定位到“Network”选项卡</li><li>接下来需要刷新网页。在 Windows 下，按 F5 键或者单击地址栏左边的“刷新”按钮</li><li>单击“Network”选项卡下面出现的“ajax_1_backend”和“ajax_1_postbackend”，并定位到“Response”选项卡，可以看到这里出现了网页上面的内容</li><li>再选择“Headers”选项卡，可以看到这个请求使用 GET 方式，发送到<a href="http://exercise.kingname.info/ajax_1_backend" target="_blank" rel="noopener">http://exercise.kingname.info/ajax_1_backend</a></li><li>对于网页中的第 2 条内容，查看“Headers”选项卡，可以看到，这是使用 POST 方式向<a href="http://exercise.kingname.info/ajax_1_postbackend" target="_blank" rel="noopener">http://exercise.kingname.info/ajax_1_postbackend</a> 发送请求，并以 JSON 格式提交数据<blockquote><p>具体代码实现看<em>request</em>&nbsp;&nbsp;的<strong><a href="#进阶用法">进阶用法</a></strong></p></blockquote></li></ul><h3 id="7-1-4-特殊的异步加载"><a href="#7-1-4-特殊的异步加载" class="headerlink" title="7.1.4 特殊的异步加载"></a>7.1.4 特殊的异步加载</h3><ul><li><strong><a href="http://exercise.kingname.info/exercise_ajax_2.html" target="_blank" rel="noopener">练习页面</a></strong></li></ul><ul><li>伪装成异步加载的后端渲染,数据就在源代码里，但却不直接显示出来</li><li>源代码最下面的 JavaScript 代码，其中有一段：<br><code>{"code": "\u884c\u52a8\u4ee3\u53f7\uff1a\u5929\u738b\u76d6\u5730\u864e"}</code></li><li>使用 Python 去解析，发现可以得到网页上面的内容</li></ul><pre class="line-numbers language-py"><code class="language-py">import jsonhtml_json = '{"code": "\u884c\u52a8\u4ee3\u53f7\uff1a\u5929\u738b\u76d6\u5730\u864e"}'html_dic = json.loads(html_json)print(html_dic)      #{'code': '行动代号：天王盖地虎'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>这种假的异步加载页面，其处理思路一般是使用正则表达式从页面中把数据提取出来，然后直接解析</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">import jsonimport requestsimport reurl = 'http://exercise.kingname.info/exercise_ajax_2.html'html = requests.get(url).content.decode()code_json = re.search("secret = '(.*?)'", html, re.S).group(1)code_dict = json.loads(code_json)print(code_dict['code'])#行动代号：天王盖地虎<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-5-多次请求的异步加载"><a href="#7-1-5-多次请求的异步加载" class="headerlink" title="7.1.5 多次请求的异步加载"></a>7.1.5 多次请求的异步加载</h3><ul><li><strong><a href="http://exercise.kingname.info/exercise_ajax_3.html" target="_blank" rel="noopener">练习页面</a></strong></li></ul><ul><li>还有一些网页，显示在页面上的内容要经过多次异步请求才能得到。</li><li>第 1 个 AJAX 请求返回的是第 2 个请求的参数，第 2 个请求的返回内容又是第 3 个请求的参数，只有得到了上一个请求里面的有用信息，才能发起下一个请求</li><li>在“Headers”选项卡查看这个 POST 请求的具体参数，在 body 里面发现两个奇怪的参数 secret1 和 secret2</li><li>尝试修改 secret1 和 secret2，发现 POST 请求无法得到想要的结果<br><strong>奇怪的参数</strong></li></ul><pre><code>name: "xx"age: 24secret1: "kingname is genius."secret2: "kingname"</code></pre><p><strong>如果修改这两个参数</strong></p><pre class="line-numbers language-py"><code class="language-py">import jsonimport requestsurl = 'http://exercise.kingname.info/ajax_3_postbackend'return_json_1 = requests.post(url,json={"name":"xx","age":"24","secret1":"123","secret2":"456"})return_json_2 = requests.post(url,json={"name" :"xx","age":23})print(json.loads(return_json_1.content.decode()))   #{'success': False, 'reason': '参数错误'}print(json.loads(return_json_2.content.decode()))   #{'success': False, 'reason': '参数不全'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打开这个练习页的源代码，在源代码中可以找到 secret_2</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>exercise ajax load<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> secret_2 <span class="token operator">=</span> <span class="token string">"kingname"</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static/js/jquery-3.2.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static/js/loaddata_3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>虽然在 POST 参数中，名字是 secret2，而源代码中的名字是 secret_2，不过从值可以看出这就是同一个参数</li><li>源代码里面没有 secret1，因此就要考虑这个参数是不是来自于另一个异步请求</li><li>继续在开发者工具中查看其他请求，可以成功找到 secret1,注意，它的名字变为了“code”，但是从值可以看出这就是 secret1</li></ul><ul><li><strong>不少网站也会使用这种改名字的方式来迷惑爬虫开发者</strong></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>code<span class="token punctuation">:</span> <span class="token string">"kingname is genius."</span><span class="token punctuation">,</span> success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>code<span class="token punctuation">:</span> <span class="token string">"kingname is genius."</span>success<span class="token punctuation">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>这一条请求就是一个不带任何参数的 GET 请求</li><li><em>对于这种多次请求才能得到数据的情况，解决办法就是逐一请求，得到返回结果以后再发起下一个请求。具体到这个例子中，那就是先从源代码里面获得 secret2，再通过 GET 请求得到 secret1，最后使用 secret1 和 secret2 来获取页面上显示的内容</em></li></ul><ul><li><strong>[爬取网站]<a href="http://exercise.kingname.info/exercise_ajax_3.html" target="_blank" rel="noopener">http://exercise.kingname.info/exercise_ajax_3.html</a>)</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">import jsonimport requestsimport reurl = 'http://exercise.kingname.info/exercise_ajax_3.html'first_ajax_url = 'http://exercise.kingname.info/ajax_3_backend'second_ajax_url = 'http://exercise.kingname.info/ajax_3_postbackend'page_html = requests.get(url).content.decode()secret_2 = re.search("secret_2 = '(.*?)';",page_html,re.S).group(1)print(secret_2)           #kingnameajax_1_json = requests.get(first_ajax_url).content.decode()print(ajax_1_json)        #{"code": "kingname is genius.", "success": true}ajax_1_dict = json.loads(ajax_1_json)secret_1 = ajax_1_dict['code']print(secret_1)           #kingname is genius.# 获取了secret_1和secret_2后post请求second_ajax_urlajax_2_json = requests.post(second_ajax_url,json={    'name':'yq','age':24,'secret1':secret_1,'secret2':secret_2}).content.decode()print(ajax_2_json)          #{"code": "\u884c\u52a8\u4ee3\u53f7\uff1a\u54ce\u54df\u4e0d\u9519\u54e6", "success": true}ajax_2_dict = json.loads(ajax_2_json)print(ajax_2_dict)          #{'code': '行动代号：哎哟不错哦', 'success': True}code = ajax_2_dict['code']print(code)                 #行动代号：哎哟不错哦<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-6-基于异步加载的简单登录"><a href="#7-1-6-基于异步加载的简单登录" class="headerlink" title="7.1.6 基于异步加载的简单登录"></a>7.1.6 基于异步加载的简单登录</h3><ul><li><strong><a href="http://exercise.kingname.info/exercise_ajax_4.html" target="_blank" rel="noopener">练习页面</a></strong></li></ul><ul><li>网站的登录方式有很多种，其中有一种比较简单的方式，就是使用 AJAX 发送请求来进行登录</li><li>在<a href="http://exercise.kingname.info/exercise_ajax_4.html" target="_blank" rel="noopener">练习页面</a>中根据输入框中的提示，使用用户名“kingname”和密码“genius”进行登录,登录成功以后弹出提示框</li><li><strong>对于这种简单的登录功能，可以使用抓取异步加载网页的方式来进行处理</strong></li><li>在 Chrome 开发者工具中可以发现，当单击“登录”按钮时，网页向后台发送了一条请求<br><strong><code>{"code": "kingname is genius", "success": true}</code></strong></li></ul><pre class="line-numbers language-py"><code class="language-py">import requestsimport jsonurl = 'http://exercise.kingname.info/ajax_4_backend'code_json = requests.post(url,json={    'username':'kingname','password':'genius'}).content.decode()code__dict = json.loads(code_json)print(code__dict['code'])# kingname is genius<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这就是使用 POST 方式的最简单的 AJAX 请求。使用获取 POST 方式的 AJAX 请求的代码，就能成功获取到登录以后返回的内容</li></ul><h2 id="7-2-请求头"><a href="#7-2-请求头" class="headerlink" title="7.2 请求头"></a>7.2 请求头</h2><h3 id="7-2-1-请求头的作用"><a href="#7-2-1-请求头的作用" class="headerlink" title="7.2.1 请求头的作用"></a>7.2.1 请求头的作用</h3><ul><li>使用计算机网页版外卖网站的读者应该会发现这样一个现象：第一次登录外卖网页的时候会让你选择当前所在的商业圈，一旦选定好之后关闭浏览器再打开，网页就会自动定位到先前选择的商业圈</li><li>又比如，例如携程的网站，使用计算机浏览器打开的时候，页面看起来非常复杂多样</li><li>同一个网址，使用手机浏览器打开时，网址会自动发生改变，而且得到的页面竟然完全不同<br><strong>同一个网址，PC 端和手机端页面不同</strong></li></ul><ul><li>Headers 称为请求头，浏览器可以将一些信息通过 Headers 传递给服务器，服务器也可以将一些信息通过 Headers 传递给浏览器，电商网站常常应用的 Cookies 就是 Headers 里面的一个部分</li></ul><h3 id="7-2-2-伪造请求头"><a href="#7-2-2-伪造请求头" class="headerlink" title="7.2.2 伪造请求头"></a>7.2.2 伪造请求头</h3><ul><li>打开<a href="http://exercise.kingname.info/exercise_headers.html" target="_blank" rel="noopener">练习页</a>，使用 Chrome 的开发者工具监控这个页面的网页请求</li><li>页面看起来像是发起了一个普通的 GET 方式的异步请求给<a href="http://exercise.kingname.info/exercise_headers_backend" target="_blank" rel="noopener">http://exercise.kingname.info/exercise_headers_backend</a></li><li>使用 requests 尝试获取这个网址的返回信息,结果发现失败</li><li>使用浏览器访问网站的时候，网站可以看到一个名称为 Headers（请求头）的东西</li></ul><pre class="line-numbers language-js"><code class="language-js">headers <span class="token operator">=</span> <span class="token punctuation">{</span>            Accept<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span>            Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflate            Accept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>en<span class="token operator">-</span>US<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>en<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.7</span>            anhao<span class="token punctuation">:</span> kingname            Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json<span class="token punctuation">;</span> charset<span class="token operator">=</span>utf<span class="token number">-8</span>            Cookie<span class="token punctuation">:</span> __cfduid<span class="token operator">=</span>d513aff6c34f63c4c2971cdf1e19780051581303763            Host<span class="token punctuation">:</span> exercise<span class="token punctuation">.</span>kingname<span class="token punctuation">.</span>info            Proxy<span class="token operator">-</span>Connection<span class="token punctuation">:</span> keep<span class="token operator">-</span>alive            Referer<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>exercise<span class="token punctuation">.</span>kingname<span class="token punctuation">.</span>info<span class="token operator">/</span>exercise_headers<span class="token punctuation">.</span>html            User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> WOW64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">79.0</span><span class="token punctuation">.</span><span class="token number">3945.79</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>            X<span class="token operator">-</span>Requested<span class="token operator">-</span>With<span class="token punctuation">:</span> XMLHttpRequest            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>为了解决这个问题，就需要给爬虫“换头”。把浏览器的头安装到爬虫的身上，这样网站就不知道谁是谁了</li><li>要换头，首先就需要知道浏览器的头是什么样的。因此需要在 Chrome 浏览器开发者工具的“Network”选项卡的 Request Headers 里面观察这一次请求的请求头</li><li>在 requests 里面，设置请求头的参数名称为“headers”，它的值是一个字典<br><strong>带有请求头的请求，使用 requests 的发送格式为：</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">html = requests.get(url, headers=字典).content.decode()html = requests.post(url, json=xxx, headers=字典).content.decode()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>代码中的字典就对应了浏览器中的请求头</li><li>在爬虫里面创建一个字典，将 Chrome 的请求头的内容复制进去，并调整好格式，发起一个带有 Chrome 请求头的爬虫请求，可以发现请求获得成功</li><li>虽然对于某些网站，在请求头里面只需要设置 User-Agent 就可以正常访问了，但是为了保险起见，还是建议把所有项目都带上，这样可以让爬虫更“像”浏览器</li></ul><h2 id="7-3-模拟浏览器"><a href="#7-3-模拟浏览器" class="headerlink" title="7.3 模拟浏览器"></a>7.3 模拟浏览器</h2><ul><li><strong><a href="http://exercise.kingname.info/exercise_advanced_ajax.html" target="_blank" rel="noopener">练习页面</a></strong></li><li><em>问题：</em></li><li>有一些网站在发起 AJAX 请求的时候，会带上特殊的字符串用于身份验证。这种字符串称为 Token</li><li>打开练习页面，这个页面在发起 AJAX 请求的时候会在 Headers 中带上一个参数 ReqTime；在 POST 发送的数据中会有一个参数 sum</li><li>多次刷新页面，可以发现 ReqTime 和 sum 一直在变化</li><li>不难看出 ReqTime 是精确到毫秒的时间戳，即使使用 Python 生成了一个时间戳，也不能得到网页上面的内容</li></ul><h3 id="7-3-1-Selenium-介绍"><a href="#7-3-1-Selenium-介绍" class="headerlink" title="7.3.1 Selenium 介绍"></a>7.3.1 Selenium 介绍</h3><ul><li>虽然在网页的源代码中无法看到被异步加载的内容，但是在 Chrome 的开发者工具的“Elements”选项卡下却可以看到网页上的内容</li></ul><h3 id="7-3-2-selenium-安装"><a href="#7-3-2-selenium-安装" class="headerlink" title="7.3.2 selenium 安装"></a>7.3.2 selenium 安装</h3><ul><li>安装 selenium <code>pip install selenium</code></li><li>下载 ChromeDriver</li></ul><h3 id="7-3-3-selenium-的使用"><a href="#7-3-3-selenium-的使用" class="headerlink" title="7.3.3 selenium 的使用"></a>7.3.3 selenium 的使用</h3><h4 id="7-3-3-1-获取源代码"><a href="#7-3-3-1-获取源代码" class="headerlink" title="7.3.3.1 获取源代码"></a>7.3.3.1 获取源代码</h4><ul><li><strong>将 chromedriver 与代码放在同一个文件夹中以方便代码直接调用</strong></li></ul><pre class="line-numbers language-py"><code class="language-py"># 初始化seleniumfrom selenium import webdriverdriver = webdriver.Chrome('./chromedriver')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>指定了 Selenium 使用 ChromeDriver 来操作 Chrome 解析网页，括号里的参数就是 ChromeDriver 可执行文件的地址</li></ul><ul><li>如果要使用 PhantomJS，只需要修改第 3 行代码即可：driver = webdriver.PhantomJS(‘./phantomjs’)，需要将 PhantomJS 的可执行文件与代码放在一起</li><li>需要特别提醒的是，如果 chromedriver 与代码不在一起，可以通过绝对路径来指定，例如：driver = webdriver.Chrome(‘/usr/bin/chromedriver’)</li><li>使用 Windows 的读者可在路径字符串左引号的左边加一个“r”符号，将代码写为：driver = webdriver.Chrome(r’C:\server\chromedriver.exe’)</li><li>初始化完成以后，就可以使用 Selenium 打开网页了。要打开一个网页只需要一行代码：<br><code>driver.get('http://exercise.kingname.info/exercise_advanced_ajax.html')</code></li><li>代码运行以后会自动打开一个 Chrome 窗口，并在窗口里面自动进入这个网址对应的页面。一旦被异步加载的内容已经出现在了这个自动打开的 Chrome 窗口中，那么此时使用下列代码：<br><code>html = driver.page_source</code></li><li>就能得到在 Chrome 开发者工具中出现的 HTML 代码<br><strong>综合：</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">from selenium import webdriverimport timedriver = webdriver.Chrome(r'C:\Program Files (x86)\Google\Chrome\Application\chromedriver')driver.get('http://exercise.kingname.info/exercise_advanced_ajax.html')time.sleep(5)html = driver.page_sourceprint(html)input('按任意键结束：')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行程序会出现以下界面</strong><br><img src="/img/selenium.png" alt="selenium" title="selenium"></p><h4 id="7-3-3-2-等待信息出现"><a href="#7-3-3-2-等待信息出现" class="headerlink" title="7.3.3.2 等待信息出现"></a>7.3.3.2 等待信息出现</h4><ul><li>设置了一个 5s 的延迟，这是由于 Selenium 并不会等待网页加载完成再执行后面的代码。它只是向 ChromeDriver 发送了一个命令，让 ChromeDriver 打开某个网页</li><li>至于网页要开多久，Selenium 并不关心。由于被异步加载的内容会延迟出现，因此需要等待它出现以后再开始抓取</li></ul><h4 id="7-3-3-3-在网页中获取元素"><a href="#7-3-3-3-在网页中获取元素" class="headerlink" title="7.3.3.3 在网页中获取元素"></a>7.3.3.3 在网页中获取元素</h4><p><em>在网页中寻找需要的内容，可以使用类似于 Beautiful Soup4 的语法：</em></p><pre class="line-numbers language-py"><code class="language-py">element = driver.find_element_by_id("passwd-id") #如果有多个符合条件的，返回第1个element = driver.find_element_by_name("passwd") #如果有多个符合条件的，返回第1个element_list = driver.find_elements_by_id("passwd-id") #以列表形式返回所有的符合条件的elementelement_list = driver.find_elements_by_name("passwd") #以列表形式返回所有的符合条件的element<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>也可以使用 XPath</strong></p><pre class="line-numbers language-py"><code class="language-py">element = driver.find_element_by_xpath("//input[@id='passwd-id']")#如果有多个符合条件的，返回第1个element = driver.find_elements_by_xpath("//div[@id='passwd-id']")#以列表形式返回所有的符合条件的element<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://exercise.kingname.info/exercise_advanced_ajax.html" target="_blank" rel="noopener">练习网站</a></p><pre class="line-numbers language-py"><code class="language-py">from selenium import webdriverfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support import expected_conditions as ECimport timedriver = webdriver.Chrome(r'C:\Program Files (x86)\Google\Chrome\Application\chromedriver')driver.get('http://exercise.kingname.info/exercise_advanced_ajax.html')time.sleep(5)try :    WebDriverWait(driver,30).until(EC.text_to_be_present_in_element(By.CLASS_NAME,"content"),'通关')except Exception as _:    print('网页加载太慢，爬')# 但是也可能会爬，不知到原因element = driver.find_element_by_xpath('//div[@class="content"]')print(f'异步加载的内容是：{element.text}')# 异步加载的内容是：通关成功，通关口令：这是最终数据。driver.quit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-4-实例：乐视爬取视频评论"><a href="#7-4-实例：乐视爬取视频评论" class="headerlink" title="7.4 实例：乐视爬取视频评论"></a>7.4 实例：<a href="http://www.le.com" target="_blank" rel="noopener">乐视</a>爬取视频评论</h2><ul><li><p><em>1&gt;分析网站的异步加载请求</em></p></li><li><p><em>2&gt;使用 requests 发送请求</em></p><hr><p></p></li><li><p>通过使用 Chrome 的开发者工具分析页面的异步加载请求，可以发现评论所在的请求</p></li><li><p>可以使用 Python 来模拟这个请求，从而获取视频的评论信息</p></li><li><p>在请求的 URL 里面有两个参数：vid 和 pid,这两个参数在网页的源代码里面都可以找到</p><hr></li><li><p>爬虫首先访问视频页面，通过正则表达式获取 vid 和 pid，并将结果保存到“necessary_info”这个类属性对应的字典中</p></li></ul><pre class="line-numbers language-py"><code class="language-py"># 核心代码def get_necessary_id(self):  source = self.get_source(self.url, self.HEADERS)  vid = re.search('vid: (\d+)', source).group(1)  pid = re.search('pid: (\d+)', source).group(1)  self.necessary_info['xid'] = vid  self.necessary_info['pid'] = pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问评论的接口，用 Python 发起请求，获得评论数据</li></ul><pre class="line-numbers language-py"><code class="language-py">def get_comment(self):    url = self.COMMENT_URL.format(xid=self.necessary_info['xid'],                             pid=self.necessary_info['pid'])    source = self.get_source(url, self.HEADERS)    source_json = source[source.find('{"'): -1]    comment_dict = json.loads(source_json)    comments = comment_dict['data']    for comment in comments:        print(f'发帖人： {comment["user"]["username"]}, 评论内容：{comment["content"]}')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码中，提前定义的 self.COMMENT_URL 和 self.HEADERS</li></ul><pre class="line-numbers language-py"><code class="language-py"># 综合import reimport jsonimport requestsclass LetvSpider(object):    COMMENT_URL = 'http://api-my.le.com/vcm/api/list?jsonp=jQuery19100358 \    8935956887496_1581419682085&type=video&rows=20&page=1&sort=&cid=2&sourc\    e=1&xid=27576461&pid=10022394&ctype=cmt%2Cimg%2Cvote&listType=1&_=1581419682087'    HEADERS = {'Accept': '*/*',            'Accept-Encoding': 'gzip, deflate',            'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',            'Cookie': 'tj_lc=d551d3996ae75055e97c1f22ac9aa002; tj_uuid=-_15814196222976075472; tj_env=1; ssoCookieSynced=1; language=zh-cn; sso_curr_country=CN; vjuids=-75eba524.17033f49d1f.0.d645e0a5d3aa1; vjlast=1581419634.1581419634.30; tj_v2c=-27576461_2',            'Host': 'api-my.le.com',            'Proxy-Connection': 'keep-alive',            'Referer':'http://www.le.com/ptv/vplay/27576461.html',            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36'             }    def __init__(self,url):        self.necessary_info = {}        self.url = url        self.get_necessary_id()        self.get_comment()    # 得到request返回的html--str    def get_source(self,url,headers):        return requests.get(url,headers).content.decode()    def get_necessary_id(self):        source = self.get_source(self.url,self.HEADERS) # 得到html        vid = re.search('vid: (\d+)',source).group(1)   #re到vid、pid        pid = re.search('pid: (\d+)',source).group(1)        self.necessary_info['xid'] = vid        #传入vid、pid到字典        self.necessary_info['pid'] = pid    def get_comment(self):        url = self.COMMENT_URL.format(xid=self.necessary_info['xid'],        pid=self.necessary_info['pid'])     # format格式化  url 评论list的request_url        source = self.get_source(url,self.HEADERS)  # 调用get_source()        source_json = source[source.find('{"'): -1] # str切片        comment_dict = json.loads(source_json)  #一个字典        comments = comment_dict['data']        for comment in comments:            print(f'发帖人：{comment["user"]["username"]},评论内容:{comment["content"]}')if __name__ == '__main__':    spider = LetvSpider('http://www.le.com/ptv/vplay/27576461.html')'''发帖人：福建乐迷,评论内容:好喜欢东华帝君发帖人：河北乐迷,评论内容:十发帖人：河北乐迷,评论内容:瑶光上神好漂亮。发帖人：河北乐迷,评论内容:太好看了。发帖人：河北乐迷,评论内容:真水无香。发帖人：河北乐迷,评论内容:喜欢白浅发帖人：天莫邪,评论内容:杨幂真不好看发帖人：呆萌小甜心,评论内容:爱幂幂发帖人：G_,评论内容:有谁是看了枕上书又来看十里桃花我浅浅的发帖人：黑名单,评论内容:我来啦发帖人：凉辰梦瑾空人心_702_210,评论内容:为啥只能隔乐视看了 好伤心�😭发帖人：上海乐迷,评论内容:产科医生发帖人：红_,评论内容:这个很好看发帖人：子璇,评论内容:墨渊霸气，白浅跟她在一起才不会受伤害发帖人：聂芳英,评论内容:为什么其他的APP上看不到发帖人：月色不错,评论内容:这个是玉帝还是王母发帖人：Myth橙子,评论内容:每个平台看一遍我是有多闲发帖人：上海乐迷,评论内容:怎么这么难找〈产科医生）的电视剧发帖人：上海乐迷,评论内容:我想看产科医生的电视剧发帖人：上海乐迷,评论内容:产科医生'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-py"><code class="language-py">print("网站名：{name}, 地址 {url}".format(name="菜鸟教程", url="www.runoob.com"))# 通过字典设置参数site = {"name": "菜鸟教程", "url": "www.runoob.com"}print("网站名：{name}, 地址 {url}".format(**site))# 通过列表索引设置参数my_list = ['菜鸟教程', 'www.runoob.com']print("网站名：{0[0]}, 地址 {0[1]}".format(my_list))  # "0" 是必须的# 网站名：菜鸟教程, 地址 www.runoob.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-py"><code class="language-py">class AssignValue(object):    def __init__(self, value):        self.value = valuemy_value = AssignValue(6)print('value 为: {0.value}'.format(my_value))  # "0" 是可选的# value 为: 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-模拟登录与验证码"><a href="#8-模拟登录与验证码" class="headerlink" title="8. 模拟登录与验证码"></a>8. 模拟登录与验证码</h1><ul><li>对于一个需要登录才能访问的网站，它的页面在登录前和登录后可能是不一样的</li><li>如果直接使用 requests 去获取源代码，只能得到登录以前的页面源代码</li></ul><h2 id="8-1-模拟登录"><a href="#8-1-模拟登录" class="headerlink" title="8.1 模拟登录"></a>8.1 模拟登录</h2><ul><li>1.使用 Selenium 操作浏览器登录和使用 Cookies 登录虽然简单粗暴，但是有效</li><li>2.使用模拟提交表单登录虽然较为麻烦，但可以实现自动化</li></ul><h3 id="8-1-1-使用-Selenium-模拟登录"><a href="#8-1-1-使用-Selenium-模拟登录" class="headerlink" title="8.1.1 使用 Selenium 模拟登录"></a>8.1.1 使用 Selenium 模拟登录</h3><pre><code>     使用Selenium来进行模拟登录，整个过程非常简单。流程如下。（1）初始化ChromeDriver。（2）打开知乎登录页面。（3）找到用户名的输入框，输入用户名。（4）找到密码输入框，输入用户名。（5）手动单击验证码。（6）按下Enter键。</code></pre><ul><li>程序首先打开知乎的登录页面，然后使用“find<em>element_by</em> name”分别找到输入账号和密码的两个输入框</li><li>这两个输入框的 name 属性值分别为“account”(我的是 username)和“password”</li><li>在 Selenium 中可以使用 send_keys()方法往输入框中输入字符串</li><li>在输入了密码以后，验证码框就会弹出来。知乎使用的验证码为点击倒立的文字，这种验证码不容易自动化处理，因此在这个地方让爬虫先暂停，手动点击倒立文字</li><li>爬虫中的 input()语句会阻塞程序，直到在控制台按下 Enter 键，爬虫才会继续运行</li></ul><h3 id="8-1-2-使用-Cookies-登录"><a href="#8-1-2-使用-Cookies-登录" class="headerlink" title="8.1.2 使用 Cookies 登录"></a>8.1.2 使用 Cookies 登录</h3><ul><li><em>Cookie 是用户使用浏览器访问网站的时候网站存放在浏览器中的一小段数据</em></li><li>Cookie 的复数形式 Cookies 用来表示各种各样的 Cookie。它们有些用来记录用户的状态信息；有些用来记录用户的操作行为；还有一些，具有现代网络最重要的功能：记录授权信息——用户是否登录以及用户登录哪个账号</li><li>为了不让用户每次访问网站都进行登录操作，浏览器会在用户第一次登录成功以后放一段加密的信息在 Cookies 中。下次用户访问，网站先检查 Cookies 有没有这个加密信息，如果有并且合法，那么就跳过登录操作，直接进入登录后的页面</li><li>通过已经登录的 Cookies，可以让爬虫绕过登录过程，直接进入登录以后的页面</li><li>在已经登录知乎的情况下，打开 Chrome 的开发者工具，定位到“Network”选项卡，然后刷新网页，在加载的内容中随便选择一项，然后看右侧的数据，从 Request Headers 中可以找到 Cookie</li></ul><pre><code>cookie: _zap=56180d87-245a-4b79-83e2-711f4629644e; d_c0="AMAY69ZKzRCPTh5KJj9edoIQ4_BiQS3iqwM=|1581434842"; _xsrf=jzLzeCfZignAw6qDdNqO85UOdCrRcB3C; Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49=1581485103,1581492629,1581492650,1581494278; capsion_ticket="2|1:0|10:1581494284|14:capsion_ticket|44:ZjQyY2FjMmZkZTJmNDJkNGI5NmYxMDNkMzc3MTVlNGI=|e2f4eb7e3652b2f1f3e439d7ff4275e4e15bdfbfbed8ce423dceded2da4235cf"; z_c0="2|1:0|10:1581494646|4:z_c0|92:Mi4xY2R0cUJRQUFBQUFBd0JqcjFrck5FQ1lBQUFCZ0FsVk5kdjh3WHdBMEczY0dBVm5MNUFmV1V4cmtja0p1Rm1kMGtn|560b73b3b5f052f6151d4a02e62f1f645f01ad7826d8c183d7152fb2fcf8456d"; Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49=1581494647; tst=r; KLBRSID=81978cf28cf03c58e07f705c156aa833|1581494650|1581494278</code></pre><ul><li><strong>请注意这里一定是“Request Headers”，不要选成了“Response Headers”</strong></li></ul><ul><li>只要把这个 Request Headers 的内容通过 requests 提交，就能直接进入登录以后的知乎页面了</li><li>可以看到，使用 Cookie 来登录网页，不仅可以绕过登录步骤，还可以绕过网站的验证码</li><li>Session，是指一段会话。网站会把每一个会话的 ID（Session ID）保存在浏览器的 Cookies 中用来标识用户的身份</li><li>requests 的 Session 模块可以自动保存网站返回的一些信息</li><li>其实在前面章节中使用的 requests.get()，在底层还是会先创建一个 Session，然后用 Session 去访问</li><li>对于 HTTPS 的网站，在 requests 发送请求的时候需要带上 verify=False 这个参数，否则爬虫会报错</li><li>带上这个参数以后，爬虫依然会报一个警告，这是因为没有 HTTPS 的证书</li><li>不过这个警告不会影响爬虫的运行结果。对于有强迫症的读者，可以参考相关内容为 requests 设置证书，从而解除这个警告</li></ul><h3 id="8-1-3-模拟表单登录"><a href="#8-1-3-模拟表单登录" class="headerlink" title="8.1.3 模拟表单登录"></a>8.1.3 模拟表单登录</h3><p><strong><a href="http://exercise.kingname.info/exercise_login?next=%2Fexercise_login_success" target="_blank" rel="noopener">练习页面</a></strong></p><ul><li>这个登录页面多了一个“自动登录”复选框输入用户名 kingname，密码 genius，勾选“自动登录”复选框并单击“登录”按钮，可以看到登录成功后的页面</li><li>打开 Chrome 的开发者工具并监控登录过程</li><li>然而，仔细观察会发现登录请求的那个网址只会在“Network”选项卡中存在 1s，然后就消失了</li><li>Network”选项卡下面只剩下登录成功后的页面所发起的各种网络请求</li><li>这是因为表单登录成功以后会进行页面跳转，相当于开了一个新的网页，于是新的请求就会直接把旧的请求覆盖。为了避免这种情况，需要在 Chrome 的开发者工具的“Network”选项卡中勾选“Preserve log”复选框，再一次登录就可以看到登录过程</li><li>此时可以看到 Status Code 是 302，说明这里有一个网页跳转，也就证明了之前为什么登录以后看不到登录的请求</li><li><strong>使用 requests 的 Session 模块来模拟这个登录</strong></li></ul><pre class="line-numbers language-py"><code class="language-py">import requestslogin_url = 'http://exercise.kingname.info/exercise_login'login_sucess_url = 'http://exercise.kingname.info/exercise_login_success'data = {    'username':'kingname',    'password':'genius',    'remember':'Yes'}session = requests.Session()before_login = session.get(login_sucess_url).textprint(before_login)print('============开始登陆==============')session.post(login_url,data=data).textafter_login = session.get(login_sucess_url).textprint(after_login)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>exercise login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">label </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.login</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/exercise_login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>              <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>              <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入:kingname<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>            <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密 码 :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>              <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>              <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入:genius<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>            <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox pull-right<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>自动登录            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>              <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rememberme<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Yes<span class="token punctuation">"</span></span>              <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>            <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static/js/jquery-3.2.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>============开始登陆==============<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Login Success<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      如果你看到这一行内容，说明你已经登录成功。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/exercise_logout<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>退出登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>      <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2-验证码"><a href="#8-2-验证码" class="headerlink" title="8.2 验证码"></a>8.2 验证码</h2><h3 id="8-2-1-肉眼打码"><a href="#8-2-1-肉眼打码" class="headerlink" title="8.2.1 肉眼打码"></a>8.2.1 肉眼打码</h3><ul><li><p>对于一次登录就可以长时间使用的情况，只需要识别一次验证码即可</p></li><li><p>这种情况下，与其花时间开发一个自动识别验证码的程序，不如直接肉眼识别</p></li><li><p><strong>肉眼识别验证码有两种情况，借助浏览器与不借助浏览器</strong></p></li><li><p>1、借助浏览器<br>在模拟登录中讲到过 Cookies，通过 Cookies 能实现绕过登录，从而直接访问需要登录的网站。因此，对于需要输入验证码才能进行登录的网站，可以手动在浏览器登录网站，并通过 Chrome 获取 Cookies，然后使用 Cookies 来访问网站<br>这样就可以实现人工输入一次验证码，然后很长时间不再登录。</p></li><li><p>2、不借助浏览器<br>对于仅仅需要识别图片的验证码，可以使用这种方式——先把验证码下载到本地，然后肉眼去识别并手动输入给爬虫</p></li></ul><pre><code>手动输入验证码的一般流程如下:（1）爬虫访问登录页面（2）分析网页源代码，获取验证码地址（3）下载验证码到本地（4）打开验证码，人眼读取内容（5）构造POST的数据，填入验证码（6）POST提交</code></pre><ul><li><em>需要注意的是，其中的（2）、（3）、（4）、（5）、（6）步是一气呵成的，是在爬虫运行的时候做的。绝对不能先把爬虫程序关闭，肉眼识别验证码以后再重新运行</em></li></ul><p><strong><a href="http://exercise.kingname.info/exercise_captcha.html" target="_blank" rel="noopener">练习页面</a></strong></p><pre class="line-numbers language-py"><code class="language-py">import requestsimport lxml.htmlurl = 'http://exercise.kingname.info/exercise_captcha.html'url_check = 'http://exercise.kingname.info/exercise_captcha_check'session = requests.session()html = session.get(url).contentselector = lxml.html.fromstring(html)captcha_url = selector.xpath('//img/@src')[0]image = requests.get('http://exercise.kingname.info/'+captcha_url).contentwith open('captcha.png','wb') as f:    f.write(image)captcha = input('请查看图片，然后输入在这里：')after_check = session.post(url_check,data={'captcha':captcha})print(f'请输入验证码后，网站返回：{after_check.content.decode()}')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre><code>请查看图片，然后输入在这里：1595请输入验证码后，网站返回：看到这个页面，说明你的验证码输入正确</code></pre><p><img src="/img/captcha.png" alt="验证码"></p><h3 id="8-2-2-自动打码"><a href="#8-2-2-自动打码" class="headerlink" title="8.2.2 自动打码"></a>8.2.2 自动打码</h3><p>1、Python 图像识别</p><ul><li>对于验证码识别，Python 也有现成的库来使用</li><li>开源的 OCR 库 pytesseract 配合图像识别引擎 tesseract，可以用来将图片中的文字转换为文本</li><li>这种方式在爬虫中的应用并不多见。因为现在大部分的验证码都加上了干扰的纹理，已经很少能用单机版的图片识别方式来识别了。所以如果使用这种方式，只有两种情况：网站的验证码极其简单工整，使用大量的验证码来训练 tesseract<br><em>安装 tesseract</em><br>打开网页下载安装包：<a href="https://github.com/tesseract-ocr/tesseract/wiki/Downloads" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki/Downloads</a> ,在“3rd party Windows exe’s/ installer”下面可以找到.exe 安装包<br><em>安装 Python 库</em><br>pip install Pillow<br>pip install pytesseract<br>其中，Pillow 是 Python 中专门用来处理图像的第三方库，pytesseract 是专门用来操作 tesseract 的第三方库<br><em>tesseract 的使用</em></li></ul><pre><code>          tesseract的使用非常简单。① 导入pytesseract和Pillow。② 打开图片。③ 识别。</code></pre><pre class="line-numbers language-py"><code class="language-py"># 通过以下代码来实现最简单的图片识别：import pytesseractfrom PIL import Imageimage = Image.open('验证码.png')code = pytesseract.image_to_string(image)print(code)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、打码网站<br>在线验证码识别的网站，简称打码网站。这些网站有一些是使用深度学习技术识别验证码，有一些是雇佣了很多人来人肉识别验证码<br>网站提供了接口来实现验证码识别服务。使用打码网站理论上可以识别任何使用输入方式来验证的验证码</p><pre><code>这种打码网站的流程一般是这样的。① 将验证码上传到网站服务器。② 网站服务器将验证码分发给打码工人。③ 打码工人肉眼识别验证码并上传结果。④ 网站将结果返回。</code></pre><p><em>使用在线打码</em><br>在百度或者谷歌上面搜索“验证码在线识别”，就可以找到很多提供在线打码的网站。但是由于一般这种打码网站是需要交费才能使用的，所以要注意财产安全</p><h2 id="8-3-案例-自动登录果壳网"><a href="#8-3-案例-自动登录果壳网" class="headerlink" title="8.3 案例-自动登录果壳网"></a>8.3 案例-自动登录果壳网</h2><p><a href="https://www.guokr.com" target="_blank" rel="noopener">目标网站</a><br>使用模拟登录与验证码识别的技术实现自动登录果壳网。 果壳网的登录界面有验证码，请使用人工或者在线打码的方式识别验证码，并让爬虫登录。登录以后可以正确显示“个人资料设置”界面的源代码</p><ul><li>涉及的知识点：</li><li>（1）爬虫识别验证码。</li><li>（2）爬虫模拟登录。<blockquote><p>来自<a href="https://github.com/kingname/SourceCodeOfBook/tree/master/%E7%AC%AC8%E7%AB%A0/program" target="_blank" rel="noopener">第八章</a>，需要使用再来深度学习</p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Note </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习中遇到的问题</title>
      <link href="/2020/02/04/q-python/"/>
      <url>/2020/02/04/q-python/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-新版-pycharm-问题"><a href="#1-新版-pycharm-问题" class="headerlink" title="1. 新版 pycharm 问题"></a>1. 新版 pycharm 问题</h1><p><strong>使用 Pycharm 遇到的问题</strong><br><em>VS code 天下第一</em></p><h2 id="问题-1：pycharm-双击打不开"><a href="#问题-1：pycharm-双击打不开" class="headerlink" title="问题 1：pycharm 双击打不开"></a>问题 1：pycharm 双击打不开</h2><p>已解决：可能时进程中已经有了 pycharm，在任务管理器里结束进程，然后重新打开</p><h2 id="问题-2：pycharm-打开后回有两个窗口，而且不能再窗口上操作"><a href="#问题-2：pycharm-打开后回有两个窗口，而且不能再窗口上操作" class="headerlink" title="问题 2：pycharm 打开后回有两个窗口，而且不能再窗口上操作"></a>问题 2：pycharm 打开后回有两个窗口，而且不能再窗口上操作</h2><p>重装可以解决，但不知道什么原因，猜测可能是打开文件太多，加载不了</p><h1 id="2-Python的一些BUG"><a href="#2-Python的一些BUG" class="headerlink" title="2. Python的一些BUG"></a>2. Python的一些BUG</h1><p>写程序用一分钟，找BUG需要一天</p><h2 id="2-1-class传参的一些问题"><a href="#2-1-class传参的一些问题" class="headerlink" title="2.1 class传参的一些问题"></a>2.1 class传参的一些问题</h2><p><em>takes 2 positional arguments but 30 were given</em><br>大概就是只需要两个位置参数，但是我给了30个，<code>黑人问号？？？</code></p><p>就是这个程序， 主要就是用多线程来爬取图片，然后到第二部，获得子页面的图片url资源地址时出错，无法解决</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">import</span> lxml<span class="token punctuation">.</span>html<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token comment" spellcheck="true"># 创建 Thread 的子类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args        self<span class="token punctuation">.</span>result <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>result <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getresult</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>result<span class="token comment" spellcheck="true"># 创建爬取图片的类</span><span class="token keyword">class</span> <span class="token class-name">WallGet</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> pages<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> headers        self<span class="token punctuation">.</span>pages <span class="token operator">=</span> pages    <span class="token comment" spellcheck="true"># 很快就完了</span>    <span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        pages <span class="token operator">=</span> self<span class="token punctuation">.</span>pages        url_pics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        page <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> page <span class="token operator">&lt;=</span> int<span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> <span class="token string">'https://wallhaven.cc/search?categories=010&amp;purity=100&amp;resolutions=1280x800&amp;sorting=relevance&amp;order=desc&amp;page='</span> <span class="token operator">+</span> \                str<span class="token punctuation">(</span>page<span class="token punctuation">)</span>            html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            selector <span class="token operator">=</span> lxml<span class="token punctuation">.</span>html<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>html<span class="token punctuation">)</span>            url_pic <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>                <span class="token string">'//*[@id="thumbs"]/section/ul/li/figure/a/@href'</span><span class="token punctuation">)</span>            url_pics<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url_pic<span class="token punctuation">)</span>            page <span class="token operator">+=</span> <span class="token number">1</span>        urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> url_pic <span class="token keyword">in</span> url_pics<span class="token punctuation">:</span>            <span class="token keyword">for</span> url <span class="token keyword">in</span> url_pic<span class="token punctuation">:</span>                urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">return</span> urls    <span class="token comment" spellcheck="true"># 单个图片url的获取</span>    <span class="token keyword">def</span> <span class="token function">get_picurl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        html2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        img_url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'"wallpaper" src="(.*?)"'</span><span class="token punctuation">,</span> html2<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>img_url<span class="token punctuation">)</span>        <span class="token keyword">return</span> img_url    <span class="token keyword">def</span> <span class="token function">down_img</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> imgurls<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> imgurl <span class="token keyword">in</span> imgurls<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'下载图片第{i}张'</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>imgurl<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片无法下载'</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'requests.exceptions.ReadTimeout'</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            main_path <span class="token operator">=</span> r<span class="token string">'E:\\wallhaven\\'</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span>            dir <span class="token operator">=</span> <span class="token string">'E:\\wallhaven\\'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 运行主程序</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36"</span><span class="token punctuation">}</span>    pages <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'输入要多少页： '</span><span class="token punctuation">)</span>    wallget <span class="token operator">=</span> WallGet<span class="token punctuation">(</span>headers<span class="token punctuation">,</span> pages<span class="token punctuation">)</span>    urls <span class="token operator">=</span> wallget<span class="token punctuation">.</span>get_url<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'每页图片链接获取完成'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调试的时候这句话出现问题</span>    <span class="token comment" spellcheck="true"># th = MyThread(wallget.get_picurl,(urls[0]))</span>    <span class="token comment" spellcheck="true"># th.start()</span>    <span class="token comment" spellcheck="true"># 同样，直接用也会出现问题</span>    th2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span> wallget<span class="token punctuation">.</span>get_picurl<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    th2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(th.getresult())</span>    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        th <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>wallget<span class="token punctuation">.</span>get_picurl<span class="token punctuation">,</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>        th<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>th<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>        i<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片url资源地址获取完成'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>出错提示信息</em></p><pre class="line-numbers language-c"><code class="language-c">Exception in thread Thread<span class="token number">-1</span><span class="token punctuation">:</span><span class="token function">Traceback</span> <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"D:\py\lib\threading.py"</span><span class="token punctuation">,</span> line <span class="token number">917</span><span class="token punctuation">,</span> in _bootstrap_inner    self<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"D:\py\lib\threading.py"</span><span class="token punctuation">,</span> line <span class="token number">865</span><span class="token punctuation">,</span> in run    self<span class="token punctuation">.</span><span class="token function">_target</span><span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>_args<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>self<span class="token punctuation">.</span>_kwargs<span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token function">get_picurl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">30</span> were given<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-改用了Pool线程操作后"><a href="#2-2-改用了Pool线程操作后" class="headerlink" title="2.2 改用了Pool线程操作后"></a>2.2 改用了Pool线程操作后</h2><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 无力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Questions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客的基本知识</title>
      <link href="/2020/02/04/learn-hexo/"/>
      <url>/2020/02/04/learn-hexo/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>建立 hexo_blog，参考 b 站 up:<a href="https://space.bilibili.com/384068749" target="_blank" rel="noopener">CodeSheep</a>的<a href="https://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">视频</a></strong></p><blockquote><p><strong>所用主题 :<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a>，主要按照<a href="http://yansheng836.coding.me/" target="_blank" rel="noopener">大佬博客</a>中的<a href="http://yansheng836.coding.me/tags/hexo/" target="_blank" rel="noopener">这一分类</a>进行修改</strong></p></blockquote></blockquote><!-- more --><h2 id="1-hexo-基操"><a href="#1-hexo-基操" class="headerlink" title="1. hexo 基操"></a>1. hexo 基操</h2><h3 id="1-1-master-分支"><a href="#1-1-master-分支" class="headerlink" title="1.1 master 分支"></a>1.1 master 分支</h3><table><thead><tr><th align="center">描述</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center">新建页面 type:’tags’</td><td align="center"><code>hexo new page 'title'</code></td></tr><tr><td align="center">新建 md</td><td align="center"><code>hexo n "title"</code></td></tr><tr><td align="center">清理</td><td align="center"><code>hexo clean</code></td></tr><tr><td align="center">生成</td><td align="center"><code>hexo g</code></td></tr><tr><td align="center">部署到远端；推到 github</td><td align="center"><code>hexo d</code></td></tr><tr><td align="center">启动预览,blog</td><td align="center"><code>hexo s</code></td></tr></tbody></table><h3 id="1-2-blog-分支"><a href="#1-2-blog-分支" class="headerlink" title="1.2 blog 分支"></a>1.2 blog 分支</h3><ul><li><p>6、将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录</p><p><code>git add .</code></p></li><li><p>7、将缓存区内容添加到本地仓库</p><p><code>git commit -m "提交信息"</code></p></li><li><p>8、将本地版本库推送到远程服务器,将本地库如果设置了 blog 为默认分支，可以直接 git push</p><p><code>git push origin blog</code></p></li><li><p>9、先将远程仓库 master 中的信息同步到本地仓库 master 中</p><p><code>git pull origin master</code></p></li><li><p>10、查看工作区代码相对于暂存区的差别</p><p><code>git status</code></p></li></ul><blockquote><p>参考<a href="https://www.jianshu.com/p/2e1d551b8261" target="_blank" rel="noopener" title="简书">简书网站</a></p></blockquote><h2 id="2-source-md-blog-目录下"><a href="#2-source-md-blog-目录下" class="headerlink" title="2. source/md-(blog 目录下)"></a>2. source/md-(blog 目录下)</h2><ul><li>没有跳过的会转化为 HTML，在 blog 中体现</li></ul><h2 id="3-添加背景图片和左侧图片"><a href="#3-添加背景图片和左侧图片" class="headerlink" title="3. 添加背景图片和左侧图片"></a>3. 添加背景图片和左侧图片</h2><p>主要在<code>source/main.0cf68a.css</code> 文件中修改</p><blockquote><p>具体修改参考<a href="http://yansheng836.coding.me/" target="_blank" rel="noopener">大佬博客</a>中的<a href="http://yansheng836.coding.me/article/72a91df5.html" target="_blank" rel="noopener">这一篇</a></p></blockquote><h3 id="3-1-左侧背景"><a href="#3-1-左侧背景" class="headerlink" title="3.1 左侧背景"></a>3.1 左侧背景</h3><p><code>themes/yilia/layout/_partial/left-col.ejs</code>文件中注释掉原来代码，添加新的无属性代码</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"overlay"</span> style<span class="token operator">=</span><span class="token string">"background: &lt;%= theme.style &amp;&amp; theme.style.header ? theme.style.header : defaultBg %>"</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 左侧边栏（上半部分）不设置背景颜色 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"overlay"</span> <span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>themes\yilia\source\main.0cf68a.css</code>中修改添加背景图片</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.left-col</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* background:#fff; 注释掉原来的修改背景*/</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>      <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>,      <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>,    <span class="token url">url("http://bucket836.oss-cn-shenzhen.aliyuncs.com/wallpaper/381535373.jpeg")</span>      no-repeat <span class="token number">0%</span> <span class="token number">20%</span> / cover<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s ease-in<span class="token punctuation">;</span>  <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s ease-in<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的背景图片跟文字颜色不匹配(字看不清)，可以修改中文件</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector"><span class="token class">.left-col</span> <span class="token id">#header</span> a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#696969</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#673ab7</span>^M <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.left-col</span> <span class="token id">#header</span> a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#b0a0aa</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#03A9F4</span>^M <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.left-col</span> <span class="token id">#header</span> <span class="token class">.header-subtitle</span> </span><span class="token punctuation">{</span>     <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#999</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#673ab7</span><span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-文章背景"><a href="#3-2-文章背景" class="headerlink" title="3.2 文章背景"></a>3.2 文章背景</h3><p>先将文章背景调成透明色,搜索<code>.article {</code></p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.article</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*调成透明色，才能看清背景图片*/</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.2</span>s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再添加背景图片，搜索<code>body {</code></p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Helvetica Neue, Helvetica, STHeiTi, Arial, sans-serif<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*background-color:rgb(85, 144, 161); */</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>      <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>,      <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>, <span class="token url">url(./img/1_.jpg)</span> no-repeat <span class="token number">0%</span> <span class="token number">20%</span> / cover<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*添加背景图片*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果修改完代码，背景还没有变，可能你的 body 或者 article 定义了两次，前面有一个 body{},后面还有一个，只要删掉后面的就可以了</strong><br><em>需要自己好好的找一找</em></p><p><strong>如果你的 main.0cf68a.css,文件代码很乱，可以在<a href="https://github.com/yq010105/hexo_themes/blob/master/yilia/source/main.0cf68a.css" target="_blank" rel="noopener">我的 Github</a>中复制</strong> <em>别问我怎么知道的</em></p><h3 id="3-3-copy-代码块"><a href="#3-3-copy-代码块" class="headerlink" title="3.3 copy 代码块"></a>3.3 copy 代码块</h3><blockquote><p>按照<a href="http://yansheng836.coding.me/" target="_blank" rel="noopener">大佬博客</a>中的<a href="http://yansheng836.coding.me/article/e9d1b881.html" target="_blank" rel="noopener">这一篇</a></p></blockquote><h2 id="4-添加网站运行时间"><a href="#4-添加网站运行时间" class="headerlink" title="4. 添加网站运行时间"></a>4. 添加网站运行时间</h2><p><em>简单配置</em><br>修改<code>\themes\yilia\layout\_partial\footer.ejs</code>，在<code>&lt;/footer&gt;</code>上面添加如下内容</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>《添加网站运行时间 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"timeDate"</span><span class="token operator">></span>载入天数<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"times"</span><span class="token operator">></span>载入时分秒<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">createtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> grt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"07/25/2019 12:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处修改你的建站时间或者网站上线时间</span>        now<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">;</span>        dnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        hours <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        hnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>hnum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hnum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> hnum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        minutes <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> hnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        mnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>mnum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mnum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> mnum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        seconds <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> hnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> mnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        snum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>snum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            snum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> snum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"timeDate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">" | 本站已安全运行 "</span> <span class="token operator">+</span> dnum <span class="token operator">+</span> <span class="token string">" 天 "</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"times"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> hnum <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> mnum <span class="token operator">+</span> <span class="token string">" 分 "</span> <span class="token operator">+</span> snum <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"createtime()"</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加网站运行时间》 <span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考<a href="http://yansheng836.coding.me/article/50902a4.html" target="_blank" rel="noopener">这一篇</a></p></blockquote><h2 id="5-看板娘-かんばんむすめ"><a href="#5-看板娘-かんばんむすめ" class="headerlink" title="5. 看板娘(かんばんむすめ)"></a>5. 看板娘(かんばんむすめ)</h2><ul><li><strong>安装插件:</strong> <code>npm install --save hexo-helper-live2d</code> <strong><a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">github 项目</a></strong></li><li><strong>安装模型:</strong> <code>npm install live2d-widget-model-模型名</code> <strong><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">模型名参考</a></strong></li><li><strong>在 blog/_config.yml 中添加</strong></li><li><em>我在 yilia 中配置没有效果，但在 blog 中有效果</em></li></ul><pre class="line-numbers language-yml"><code class="language-yml"># Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: live2d-widget-model-模型名 # 模型：https://huaji8.top/post/live2d-plugin-2.0/  display:    position: right    width: 150    height: 300  mobile:    show: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>关闭 live2D:</strong> <code>enable:false</code></li><li><strong>卸载模型:</strong> <code>npm uninstall live2d-widget-model-模型名</code></li><li><strong>卸载插件:</strong> <code>npm uninstall hexo-helper-live2d</code></li><li><strong>删掉 yilia/_config.yml 中配置</strong></li><li><del><em>过于占内存，已卸载</em></del>、<em>33 真是太可爱了</em><blockquote><p><a href="https://github.com/52cik/bilibili-haruna" target="_blank" rel="noopener">2233 娘的 model</a><br>参考<a href="http://yansheng836.coding.me/article/e239dc63.html" target="_blank" rel="noopener">这一篇</a></p></blockquote></li></ul><h2 id="6-网易云音乐插件"><a href="#6-网易云音乐插件" class="headerlink" title="6. 网易云音乐插件"></a>6. 网易云音乐插件</h2><ul><li>在<code>/yilia/layout/_partial/post/left-col.ejs</code>中最后的<code>&lt;/nav&gt;</code>标签上方添加</li></ul><pre class="line-numbers language-js"><code class="language-js">    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>music <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>enable<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span># <span class="token string">"网易云音乐插件"</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span># <span class="token string">"bottom:120px; left:auto;position:absolute;  width:85%"</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> defaultHeight <span class="token operator">=</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'32'</span> <span class="token punctuation">:</span> <span class="token string">'66'</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> defaultIframeHeight <span class="token operator">=</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'52'</span> <span class="token punctuation">:</span> <span class="token string">'86'</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>iframe frameborder<span class="token operator">=</span><span class="token string">"no"</span> border<span class="token operator">=</span><span class="token string">"0"</span> marginwidth<span class="token operator">=</span><span class="token string">"0"</span> marginheight<span class="token operator">=</span><span class="token string">"0"</span> width<span class="token operator">=</span><span class="token string">"240"</span> height<span class="token operator">=</span><span class="token string">"&lt;%=defaultIframeHeight%>"</span> src<span class="token operator">=</span><span class="token string">"//music.163.com/outchain/player?type=2&amp;id=&lt;%=theme.music.id||1400594005%>&amp;auto=&lt;%=theme.music.autoPlay?1:0%>&amp;height=&lt;%=defaultHeight%>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text <span class="token operator">||</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> musicText <span class="token operator">=</span> <span class="token punctuation">(</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"这似乎是首纯音乐，请尽情的欣赏它吧！"</span> <span class="token punctuation">:</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>text<span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token string">"font-size: 24px;font-family: 'Times New Roman', Times, serif;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span>musicText<span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后在 yilia 配置文件<code>_config.yml</code>中添加</li></ul><pre class="line-numbers language-yml"><code class="language-yml"># 网易云音乐插件music:  enable: true  # 播放器尺寸类型(1：长尺寸、2：短尺寸)  type: 1  #id: 1334445174  # 网易云分享的音乐ID(更换音乐请更改此配置项)  autoPlay: false # 是否开启自动播放  # 提示文本(关闭请设置为false)  text: "底部文字"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考大佬做的<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">yilia-plus</a>中的配置</p></blockquote><h2 id="7-添加背景特效"><a href="#7-添加背景特效" class="headerlink" title="7. 添加背景特效"></a>7. 添加背景特效</h2><h3 id="7-1-点击爱心"><a href="#7-1-点击爱心" class="headerlink" title="7.1 点击爱心"></a>7.1 点击爱心</h3><ul><li>在<code>/yilia/source/js/</code>下添加<code>love.js</code>文件,书写代码</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">,</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> hearts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span>      window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span>      window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span>      window<span class="token punctuation">.</span>oRequestAnimationFrame <span class="token operator">||</span>      window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span>      <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">css</span><span class="token punctuation">(</span>      <span class="token string">".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gameloop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">gameloop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hearts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        hearts<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">--</span><span class="token punctuation">;</span>      hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0.004</span><span class="token punctuation">;</span>      hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">0.013</span><span class="token punctuation">;</span>      hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span>        <span class="token string">"left:"</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span>        <span class="token string">"px;top:"</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span>        <span class="token string">"px;opacity:"</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">+</span>        <span class="token string">";transform:scale("</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token operator">+</span>        <span class="token string">","</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token operator">+</span>        <span class="token string">") rotate(45deg);background:"</span> <span class="token operator">+</span>        hearts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>gameloop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> old <span class="token operator">=</span> <span class="token keyword">typeof</span> window<span class="token punctuation">.</span>onclick <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>onclick<span class="token punctuation">;</span>    window<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      old <span class="token operator">&amp;&amp;</span> <span class="token function">old</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">createHeart</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">createHeart</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"heart"</span><span class="token punctuation">;</span>    hearts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> d<span class="token punctuation">,</span>      x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">,</span>      y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">,</span>      scale<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      alpha<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      color<span class="token punctuation">:</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    style<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      style<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText <span class="token operator">=</span> css<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token string">"rgb("</span> <span class="token operator">+</span>      <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span>      <span class="token string">","</span> <span class="token operator">+</span>      <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span>      <span class="token string">","</span> <span class="token operator">+</span>      <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span>      <span class="token string">")"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>yilia/layout/layout.ejs</code>中添加代码(切记在<script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"./live2d_models/haruna/33/model.2018.spring.json"},"display":{"position":"right","width":200,"height":400},"mobile":{"show":true},"react":{"opacity":0.8},"log":false});</script>标签前添加)</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 《页面点击小红心 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>love<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/love.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 页面点击小红心》 <span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>yilia/_config.yml</code>中添加配置</li></ul><pre class="line-numbers language-yml"><code class="language-yml">#点击小红心love: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-2-背景线条"><a href="#7-2-背景线条" class="headerlink" title="7.2 背景线条"></a>7.2 背景线条</h3><ul><li>在<code>yilia/layout/layout.ejs</code>中添加代码</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动态线条背景<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>canvas_nest<span class="token punctuation">.</span>enable<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> color<span class="token operator">=</span><span class="token string">"&lt;%=theme.canvas_nest.color %>"</span> opacity<span class="token operator">=</span><span class="token string">"&lt;%=theme.canvas_nest.opacity %>"</span>      zIndex<span class="token operator">=</span><span class="token string">"&lt;%=theme.canvas_nest.zIndex %>"</span> count<span class="token operator">=</span><span class="token string">"&lt;%=theme.canvas_nest.count %>"</span>      src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>yilia/_config.yml</code>中添加配置</li></ul><pre class="line-numbers language-yml"><code class="language-yml"># 动态线条效果，会向鼠标集中canvas_nest:  enable: false  color: "255, 235, 59" # color of lines, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)  pointColor: "156,39,176" # color of points, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)  opacity: "0.8" # the opacity of line (0~1), default: 0.5.  count: "99" # the number of lines, default: 99.  zIndex: "-1" # z-index property of the background, default: -1.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-背景点击文字"><a href="#7-3-背景点击文字" class="headerlink" title="7.3 背景点击文字"></a>7.3 背景点击文字</h3><ul><li>在<code>yilia/source/js/</code>下添加<code>click_show_text.js</code>文件，添加代码</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>      <span class="token string">"富强"</span><span class="token punctuation">,</span>      <span class="token string">"民主"</span><span class="token punctuation">,</span>      <span class="token string">"文明"</span><span class="token punctuation">,</span>      <span class="token string">"和谐"</span><span class="token punctuation">,</span>      <span class="token string">"自由"</span><span class="token punctuation">,</span>      <span class="token string">"平等"</span><span class="token punctuation">,</span>      <span class="token string">"公正"</span><span class="token punctuation">,</span>      <span class="token string">"法治"</span><span class="token punctuation">,</span>      <span class="token string">"爱国"</span><span class="token punctuation">,</span>      <span class="token string">"敬业"</span><span class="token punctuation">,</span>      <span class="token string">"诚信"</span><span class="token punctuation">,</span>      <span class="token string">"友善"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>      y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>    $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      top<span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>      left<span class="token punctuation">:</span> x<span class="token punctuation">,</span>      position<span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>      <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>      color<span class="token punctuation">:</span> <span class="token string">"#FF0000"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>    $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>      <span class="token punctuation">{</span>        top<span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>        opacity<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token number">3000</span><span class="token punctuation">,</span>      <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"delay()"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".buryit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>yilia/layout/layout.ejs</code>中添加代码</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>单击显示文字<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>click_show_text<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/click_show_text.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<code>yilia/_config.yml</code>中添加配置</li></ul><pre class="line-numbers language-yml"><code class="language-yml"># 鼠标点击显示文字click_show_text: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="http://yansheng836.coding.me/article/cf9c6a5e.html" target="_blank" rel="noopener">参考博客</a></p></blockquote><h2 id="8-修改手机端的页面背景颜色，文章的背景颜色以及头像上方颜色"><a href="#8-修改手机端的页面背景颜色，文章的背景颜色以及头像上方颜色" class="headerlink" title="8. 修改手机端的页面背景颜色，文章的背景颜色以及头像上方颜色"></a>8. 修改手机端的页面背景颜色，文章的背景颜色以及头像上方颜色</h2><p><em>在<code>main.0cf68a.css</code>中修改@media 下的模块</em></p><h3 id="8-1-页面背景颜色-图片"><a href="#8-1-页面背景颜色-图片" class="headerlink" title="8.1 页面背景颜色(图片)"></a>8.1 页面背景颜色(图片)</h3><p>添加下列代码，即为修改页面的背景托 i 按</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>        <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">127</span>, <span class="token number">127</span>, <span class="token number">0.212</span><span class="token punctuation">)</span>,        <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.2</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>, <span class="token url">url(./img/phone2.jpg)</span> no-repeat <span class="token number">0%</span> <span class="token number">20%</span> / cover<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-文章背景颜色"><a href="#8-2-文章背景颜色" class="headerlink" title="8.2 文章背景颜色"></a>8.2 文章背景颜色</h3><p>找到<code>@media</code>下的 article</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.article</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">85</span>, <span class="token number">185</span>, <span class="token number">185</span>, <span class="token number">0.425</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.2</span>s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据自己喜好改变<code>background</code>属性值</p><h3 id="8-3-头像图片"><a href="#8-3-头像图片" class="headerlink" title="8.3 头像图片"></a>8.3 头像图片</h3><p>直接在<code>_config.yml</code>中修改，我改成了透明即<code>header: 'rgba(255, 127, 127, 0)'</code></p><h2 id="9-给你的网页添加动态标题"><a href="#9-给你的网页添加动态标题" class="headerlink" title="9. 给你的网页添加动态标题"></a>9. 给你的网页添加动态标题</h2><p>在网站的开头或者结尾添加代码，我是在<code>layout.ejs</code>上添加的</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">var</span> OriginTitile<span class="token operator">=</span>document<span class="token punctuation">.</span>title<span class="token punctuation">;</span>  <span class="token keyword">var</span> st<span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'visibilitychange'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span><span class="token punctuation">{</span>      document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"(つェ⊂)看不惹~"</span><span class="token operator">+</span>OriginTitile<span class="token punctuation">;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hide'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span><span class="token punctuation">{</span>      document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">'(*´∇｀*)被你发现了~ '</span><span class="token operator">+</span>OriginTitile<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      st<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      document<span class="token punctuation">.</span>title<span class="token operator">=</span>OriginTitile<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'endChange='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
